<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[jmeosbn]]></title>
  <link href="http://jmeosbn.github.io/atom.xml" rel="self"/>
  <link href="http://jmeosbn.github.io/"/>
  <updated>2014-07-05T23:30:42+01:00</updated>
  <id>http://jmeosbn.github.io/</id>
  <author>
    <name><![CDATA[Jamie Osborne]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Minimal Raspbian Pi]]></title>
    <link href="http://jmeosbn.github.io/blog/minimal-raspbian-pi/"/>
    <updated>2014-06-30T23:42:00+01:00</updated>
    <id>http://jmeosbn.github.io/blog/minimal-raspbian-pi</id>
    <content type="html"><![CDATA[<p>A collection of notes for setting up a clean and minimal install of the official <a href="http://raspbian.org">Raspbian</a>
image from <a href="http://raspberrypi.org/downloads">raspberrypi.org</a>.</p>

<!-- See [Minimal Raspbian Net Installer](#minimal-raspbian-net-installer) if you prefer to
build a minimal image from scratch using the
[Raspbian unattended netinstaller](https://github.com/hifi/raspbian-ua-netinst). -->

<h3 id="comparison-of-compressed-images">Comparison of compressed images</h3>

<p><code>826 MB</code> - Original 2014-06-20-wheezy-raspbian<br />
<code>284 MB</code> - Additional packages added, desktop extras removed<br />
<code>156 MB</code> - Desktop environment removed, <code>udisks-glue</code> installed<br />
<code>184 MB</code> - As above, with <code>mono</code> installed</p>

<!-- more -->

<h3 id="short-summary-of-changes">Short summary of changes</h3>

<p>After some initial setup, some common development tools and other utilities were added.
The desktop extras were then removed, followed by the desktop itself. To handle
auto-mounting of USB drives, <code>udisks-glue</code> was installed as a service using <code>supervisor</code>.
Being quite large, <code>Mono</code> was installed after room had been made for it. Wiring Pi is
built for <code>gpio</code> access, and for dropbox sync, <code>dbox</code> is used.</p>

<!--

## Disable password based logon

Disable password logins for remote ssh access (public key only).

### TODO:

 -->

<p><em>Note: less common changes are listed towards the end of the post</em></p>

<ul id="markdown-toc">
  <li><a href="#basic-pi-tips">Basic Pi Tips</a></li>
  <li><a href="#first-login-tasks">First login tasks</a></li>
  <li><a href="#change-hostname">Change Hostname</a></li>
  <li><a href="#generate-new-rsa-host-keys">Generate new RSA host keys</a></li>
  <li><a href="#configure-wifi-adapter">Configure WiFi adapter</a></li>
  <li><a href="#update-dosfstools-build">Update dosfstools build</a></li>
  <li><a href="#add-a-cron-job-for-dynamic-dns">Add a cron job for dynamic DNS</a></li>
  <li><a href="#backup-installation">Backup installation</a></li>
  <li><a href="#removing-the-desktop-environment">Removing the desktop environment</a></li>
  <li><a href="#configure-automount-for-usb-drives">Configure automount for usb drives</a></li>
  <li><a href="#add-services-using-supervisor">Add services using Supervisor</a></li>
  <li><a href="#install-mono">Install Mono</a></li>
  <li><a href="#ssh-login-by-public-key-only">SSH login by public key only</a></li>
  <li><a href="#link-settings-to-root-profile">Link settings to root profile</a></li>
  <li><a href="#build-and-install-wiringpi">Build and install WiringPi</a></li>
  <li><a href="#install-transmission">Install Transmission</a></li>
  <li><a href="#dropbox-sync-using-dbox">Dropbox sync using dbox</a></li>
  <li><a href="#precompiled-xbmc">Precompiled XBMC</a></li>
  <li><a href="#connecting-to-the-pi">Connecting to the Pi</a></li>
</ul>

<h2 id="basic-pi-tips">Basic Pi Tips</h2>

<p>You can copy an image to the SD card, without first extracting it:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># Replace image archive and device name with correct values</span>
</span><span class="line">7z e -so raspbian.img.7z <span class="s1">&#39;*.img&#39;</span> | sudo dd <span class="nv">of</span><span class="o">=</span>/dev/sdc <span class="nv">bs</span><span class="o">=</span>1M
</span><span class="line">
</span><span class="line"><span class="c"># 7z should support most compression formats</span>
</span><span class="line">7z e -so raspbmc.img.gz <span class="s1">&#39;*.img&#39;</span> | sudo dd <span class="nv">of</span><span class="o">=</span>/dev/sdc <span class="nv">bs</span><span class="o">=</span>1M
</span></code></pre></div></figure></notextile></div>

<p>To backup an entire SD card to an image file, use <code>dd</code> again:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># Replace device name with correct values</span>
</span><span class="line">sudo dd <span class="k">if</span><span class="o">=</span>/dev/sdc <span class="nv">of</span><span class="o">=</span>raspbian.img <span class="nv">bs</span><span class="o">=</span>1M
</span></code></pre></div></figure></notextile></div>

<p>For details on making an optimised <code>dd</code> image, see
<a href="http://jmeosbn.github.io/blog/making-a-pi-disk-image/">Making a Pi disk image</a>.</p>

<h2 id="first-login-tasks">First login tasks</h2>

<p>The first task after booting the Raspberry Pi, is to set up the environment. For a
headless Pi (one without a monitor or keyboard connected), you may want to use a
serial connection to login until WiFi and zeroconfig <a href="#connecting-to-the-pi">have been configured</a>.</p>

<p>Note that there will be a login message recommending to run <code>sudo raspi-config</code>. This can
be done later for tasks more specific to the installation, such as expanding the
partition to fill the SD card.</p>

<p>Most of the commands below need root privileges on the Pi, as they alter the system
configuration. To run a single command with root privileges, prepend the <code>sudo</code> command
to it. To run many commands this way without typing <code>sudo</code> each time, first start a root
shell with <code>sudo -s</code> (<em>logout with ‘exit’ or ctrl+d when finished</em>).</p>

<!--
# retain user's $HOME for non-login shell using 'sudo'
# sed -i '/env_keep.*\+.*HOME/b; $ a\\nDefaults env_keep += \"HOME\"' /etc/sudoers
-->

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># Login to the pi over serial, user:pi pw:raspberry</span>
</span><span class="line">screen /dev/tty.usbserial 115200
</span><span class="line">
</span><span class="line"><span class="c"># Disable the login message</span>
</span><span class="line">touch ~/.hushlogin
</span><span class="line">
</span><span class="line"><span class="c"># Disable setting of the terminal title</span>
</span><span class="line">sed -i <span class="s1">&#39;/PS1=.*\][0-2];/s/\w/## &amp;/&#39;</span> ~/.bashrc
</span><span class="line">
</span><span class="line"><span class="c"># Use a root shell for the following commands</span>
</span><span class="line">sudo -s
</span><span class="line">
</span><span class="line"><span class="c"># Change password for root and user</span>
</span><span class="line">passwd <span class="o">&amp;&amp;</span> passwd <span class="k">$(</span>logname<span class="k">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># Temporarily fit serial terminal to local window size</span>
</span><span class="line">stty rows 17
</span><span class="line">
</span><span class="line"><span class="c"># Configure time zone and locale</span>
</span><span class="line">dpkg-reconfigure tzdata
</span><span class="line">dpkg-reconfigure locales
</span><span class="line">
</span><span class="line"><span class="c"># Hide the Raspberry Pi logo during boot</span>
</span><span class="line">sed -i <span class="s2">&quot;/logo\.nologo/b; /1/s/$/ logo.nologo/&quot;</span> /boot/cmdline.txt
</span><span class="line">
</span><span class="line"><span class="c"># Don&#39;t prompt to run raspi-config on login</span>
</span><span class="line">rm -f /etc/profile.d/raspi-config.sh
</span><span class="line">
</span><span class="line"><span class="c"># Enable colored xterm support over serial</span>
</span><span class="line">sed -i <span class="s1">&#39;/ttyAMA0/s/vt100$/xterm-256color/&#39;</span> /etc/inittab
</span><span class="line">
</span><span class="line"><span class="c"># Update packages</span>
</span><span class="line">apt-get update <span class="o">&amp;&amp;</span> apt-get upgrade
</span><span class="line">
</span><span class="line"><span class="c"># Add tools for fat, exfat, and ntfs</span>
</span><span class="line">apt-get install dosfstools exfat-fuse ntfs-3g
</span><span class="line">
</span><span class="line"><span class="c"># Support for zeroconfig</span>
</span><span class="line">apt-get install avahi-daemon
</span><span class="line">
</span><span class="line"><span class="c"># Other utilities</span>
</span><span class="line">apt-get install p7zip-full zip curl psmisc usbutils iw bc
</span></code></pre></div></figure></notextile></div>

<h4 id="preferred-packages">Preferred Packages</h4>

<p>Depending upon your uses, you may have a set of packages you install to every fresh
Raspbian image.  Below are the packages I like to install.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># SysV configuration tool (not for systemd)</span>
</span><span class="line">apt-get install sysv-rc-conf
</span><span class="line">
</span><span class="line"><span class="c"># Install scripting tools</span>
</span><span class="line">apt-get install ruby ruby-dev ri libsqlite3-dev nodejs-legacy npm
</span><span class="line">
</span><span class="line"><span class="c"># Set npm to use known registrars only</span>
</span><span class="line">npm config <span class="nb">set </span>ca <span class="s2">&quot;&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c"># Install node packages</span>
</span><span class="line">npm install -g node-gyp markdown-preview
</span><span class="line">
</span><span class="line"><span class="c"># Install misc. packages</span>
</span><span class="line">apt-get install mediainfo irssi
</span><span class="line">
</span><span class="line"><span class="c"># Install rmate for TextMate editing over ssh</span>
</span><span class="line">gem install rmate
</span></code></pre></div></figure></notextile></div>

<h2 id="change-hostname">Change Hostname</h2>

<p>If it’s likely the Pi won’t be the only one using the local network, then it should be
given a unique host name.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># replace the hostname in each file</span>
</span><span class="line"><span class="nv">NEWNAME</span><span class="o">=</span>snhack
</span><span class="line">sed -i <span class="s2">&quot;s/${HOSTNAME}$/${NEWNAME}/&quot;</span> /etc/host<span class="o">{</span>s,name<span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="c"># enable the changes</span>
</span><span class="line">/etc/init.d/hostname.sh start
</span></code></pre></div></figure></notextile></div>

<h2 id="generate-new-rsa-host-keys">Generate new RSA host keys</h2>

<p>These keys confirm the identity of the Pi, to prevent a malicious host from intercepting the remote login process.  Not so important for your HTPi, but good standard security practice.  Also recommended if you have <a href="#change-hostname">more than one Pi</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">rm /etc/ssh/ssh_host_*
</span><span class="line">dpkg-reconfigure openssh-server
</span><span class="line">
</span><span class="line"><span class="c"># remove old host key from clients using:</span>
</span><span class="line"><span class="c"># ssh-keygen -R raspberrypi.local</span>
</span></code></pre></div></figure></notextile></div>
<!--
ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key
ssh-keygen -t rsa1 -f /etc/ssh/ssh_host_key
-->

<p>If you’re using dropbear instead of openssh, then use:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">rm -f /etc/dropbear/dropbear/dropbear_*
</span><span class="line">dropbearkey -t rsa -f /etc/dropbear/dropbear_rsa_host_key
</span><span class="line">dropbearkey -t rsa -f /etc/dropbear/dropbear_rsa_host_key
</span><span class="line">/etc/init.d/dropbear restart
</span></code></pre></div></figure></notextile></div>

<h2 id="configure-wifi-adapter">Configure WiFi adapter</h2>

<p>Some distributions include WiFi setup as part of the terminal configuration script, but
this functionality is not yet included in <code>raspi-config</code>. If keeping the desktop
installed, then its network configuration tools can be used. Otherwise, use the
instructions for <a href="#manually-configure-wifi-adapter">manual configuration</a>.</p>

<!-- My bluetooth adapter is not supported in the current build of Raspbian/XBian, but
[here is the procedure](#configure-bluetooth-adapter) I used when
trying to get it running (confirmed working on a laptop running Ubuntu). -->

<!-- If the keyboard layout is incorrect, you'll need to configure
[regional system settings](#regional-system-settings). -->

<h2 id="update-dosfstools-build">Update dosfstools build</h2>

<p>The current raspbian version of <code>dosfstools</code> is out of date and won’t reset the ‘dirty bit’
of a FAT volume, such as that used by the <code>/boot</code> partition.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">git clone http://daniel-baumann.ch/git/software/dosfstools.git
</span><span class="line"><span class="nb">cd </span>dosfstools
</span><span class="line">sudo make install
</span></code></pre></div></figure></notextile></div>

<h2 id="add-a-cron-job-for-dynamic-dns">Add a cron job for dynamic DNS</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># run cron tab as pi user</span>
</span><span class="line">sudo -u pi crontab -e
</span><span class="line">
</span><span class="line"><span class="c"># append the following line, replacing domain and token values</span>
</span><span class="line">*/5 * * * * curl -k -o /tmp/duckdns.log <span class="s1">&#39;https://www.duckdns.org/update?domains=yourdomain&amp;token=yourtoken&amp;ip=&#39;</span> &gt;/dev/null 2&gt;&amp;1
</span></code></pre></div></figure></notextile></div>

<h2 id="backup-installation">Backup installation</h2>

<p>At this point we have a Raspbian image with minor tweaks, added/updated packages, and
zeroconfig support which provides mDNS/Bonjour discovery of the Pi over a network without
needing it’s IP address.</p>

<p>To minimise the time spent installing updates on future install, it’s a good idea to
<a href="http://jmeosbn.github.io/blog/making-a-pi-disk-image/">backup the card</a> to a disk image that can be reinstalled
later. This will also come in handy if you decide later to revert large changes made
after this point (such as removal of the desktop).</p>

<h2 id="removing-the-desktop-environment">Removing the desktop environment</h2>

<p>If you only plan to run the terminal environment (and self-hosted programs, such as
XBMC), then a lot of space can be recovered by removing x11 and related packages.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># desktop extras</span>
</span><span class="line">apt-get purge oracle-java.* wolfram-engine
</span><span class="line">apt-get purge squeak-vm sonic-pi pistore midori dillo
</span><span class="line">apt-get purge penguinspuzzle <span class="s1">&#39;raspberrypi-(artwork|doc)&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c"># samba network drives</span>
</span><span class="line">apt-get purge samba-common smbclient
</span><span class="line">
</span><span class="line"><span class="c"># other libraries</span>
</span><span class="line">apt-get purge python-numpy python-pygame python3-numpy
</span><span class="line">apt-get purge liblapack3 libatlas3-base
</span></code></pre></div></figure></notextile></div>

<p>At this point, the base desktop system and utilities are still installed. However, over
800MB has already been recovered - so if you just wanted to save a little space, you may
want to keep the desktop after all.</p>

<!-- *TODO: mono depends upon libx11-6, so it'll be (re)installed with mono as req.* -->

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># desktop environment</span>
</span><span class="line">apt-get purge x11-common libx11-.* xkb-data xdg-utils menu-xdg
</span><span class="line">apt-get purge desktop-file-utils lxde-icon-theme gnome-themes*
</span></code></pre></div></figure></notextile></div>
<!-- # apt-get purge fonts-freefont-ttf -->

<p>Finally, purge packages no longer needed and clean up unused files.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># cleaning up</span>
</span><span class="line"><span class="o">(</span><span class="nb">cd</span> ~pi; rm -rf Desktop python_games ocr_pi.png<span class="o">)</span>
</span><span class="line">rm -rf /usr/share/<span class="o">{</span>icons,images<span class="o">}</span>
</span><span class="line">apt-get --purge autoremove
</span><span class="line">apt-get clean
</span></code></pre></div></figure></notextile></div>

<p><em>Note: see <a href="http://www.cnx-software.com/2012/07/31/84-mb-minimal-raspbian-armhf-image-for-raspberry-pi/">cnx-software.com</a> for an even lighter install.</em></p>

<h2 id="configure-automount-for-usb-drives">Configure automount for usb drives</h2>

<p>Install udisks-glue to automount usb drives without starting the desktop.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># install udisks-glue</span>
</span><span class="line">apt-get install udisks-glue policykit-1
</span><span class="line">
</span><span class="line"><span class="c"># edit config file to enable automount</span>
</span><span class="line">sed -i <span class="s1">&#39;/^match disks /a\    automount = true&#39;</span> /etc/udisks-glue.conf
</span><span class="line">
</span><span class="line"><span class="c"># startup using rc.local</span>
</span><span class="line">sed -i <span class="s2">&quot;/^exit 0/isudo -u $(logname) udisks-glue\n&quot;</span> /etc/rc.local
</span></code></pre></div></figure></notextile></div>

<p>Note: for startup methods other than <code>rc.local</code>, see
<a href="http://angryelectron.com/udisks-glue-initscript/">angryelectron.com</a> for an example of
how to add <code>udisks-glue</code> as a service using a traditional init.d script, or the section:
<a href="#add-services-using-supervisor">Add services using Supervisor</a>.</p>

<h2 id="add-services-using-supervisor">Add services using Supervisor</h2>

<p><a href="http://supervisord.org">Supervisor</a> provides a simple way to add user services, without messing with <code>SysV</code> or
other <code>init</code> scripts.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">apt-get install supervisor
</span></code></pre></div></figure></notextile></div>

<p>Create a startup script <code>/etc/supervisor/conf.d/udisks-glue.conf</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="ini"><span class="line"><span class="k">[program:udisks-glue]</span>
</span><span class="line"><span class="na">user</span> <span class="o">=</span> <span class="s">pi</span>
</span><span class="line"><span class="na">command</span> <span class="o">=</span> <span class="s">udisks-glue -f</span>
</span><span class="line"><span class="na">autostart</span> <span class="o">=</span> <span class="s">true</span>
</span><span class="line"><span class="na">autorestart</span> <span class="o">=</span> <span class="s">true</span>
</span><span class="line"><span class="na">stdout_logfile</span> <span class="o">=</span> <span class="s">/var/log/supervisor/udisks-glue-out.log</span>
</span><span class="line"><span class="na">stderr_logfile</span> <span class="o">=</span> <span class="s">/var/log/supervisor/udisks-glue-err.log</span>
</span></code></pre></div></figure></notextile></div>

<p>Remove the previous startup of <code>udisks-glue</code> - if already
<a href="#configure-automount-for-usb-drives">configured above</a> - and start the new service
by reloading the <code>supervisor</code> config.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># remove the startup line from rc.local</span>
</span><span class="line">sed -i <span class="s2">&quot;/udisks-glue/d&quot;</span> /etc/rc.local
</span><span class="line">
</span><span class="line"><span class="c"># stop already running process</span>
</span><span class="line">killall udisks-glue
</span><span class="line">
</span><span class="line"><span class="c"># reload supervisor config</span>
</span><span class="line">supervisorctl reload
</span></code></pre></div></figure></notextile></div>

<p>The <code>udisks-glue</code> program should start automatically on boot. Use <code>supervisorctl</code> with
<code>start</code>, <code>stop</code>, and <code>restart</code> to manually control Supervisor programs: <code>supervisorctl
restart udisks-glue</code>.</p>

<h2 id="install-mono">Install Mono</h2>

<p>Install Mono development tools, runtime, and interactive shell.</p>

<p>Note: If you’ve previously shrunk the system partition down, it may need to be expanded
(use <code>sudo raspi-config</code>) to be able to fit the mono installation (about 153MB).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">apt-get install mono-devel mono-utils mono-csharp-shell
</span></code></pre></div></figure></notextile></div>

<!--
pkg-count
353 mono-complete
214 cli-common-dev
172 mono-devel
168 libmono-cil-dev

# for a minimal cli toolchain:
apt-get install mono-mcs mono-xbuild mono-csharp-shell
-->

<h2 id="ssh-login-by-public-key-only">SSH login by public key only</h2>

<p>If the Pi is open to the internet or a shared WiFi hotspot, it’s recommended to disable
SSH password logins (after first setting up <a href="#copy-public-key-to-the-pi">public key login</a>).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># add settings to sshd config</span>
</span><span class="line"><span class="nb">echo</span> <span class="s1">&#39;</span>
</span><span class="line"><span class="s1"># enforce public key login</span>
</span><span class="line"><span class="s1">ChallengeResponseAuthentication no</span>
</span><span class="line"><span class="s1">PasswordAuthentication no</span>
</span><span class="line"><span class="s1">UsePAM no&#39;</span> | sudo tee -a /etc/ssh/sshd_config
</span><span class="line">
</span><span class="line"><span class="c"># restart sshd</span>
</span><span class="line">sudo /etc/init.d/ssh reload
</span></code></pre></div></figure></notextile></div>

<h2 id="link-settings-to-root-profile">Link settings to root profile</h2>

<p>Occasionally you’ll want to use a root shell, and then be annoyed that your aliases etc. are not configured for the root user.  You can either copy the profile files into ~/root or, as shown here, link them symbolically so that any future modifications will be reflected.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># change to the home folder you want to link from</span>
</span><span class="line"><span class="nb">cd</span> /home/<span class="k">$(</span>logname<span class="k">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># define a list of dot files to link</span>
</span><span class="line"><span class="nv">dotfiles</span><span class="o">=</span><span class="s2">&quot;.profile .bashrc .bash_aliases .bash_logout .nanorc .toprc .inputrc&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c"># link each existing file into the root user&#39;s home folder</span>
</span><span class="line"><span class="k">for </span>i in <span class="nv">$dotfiles</span>; <span class="k">do</span>
</span><span class="line">  <span class="o">[</span> -f <span class="nv">$i</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> sudo ln -sfv ~+/<span class="nv">$i</span> ~root/
</span><span class="line"><span class="k">done</span>
</span><span class="line">
</span><span class="line"><span class="c"># hush login message</span>
</span><span class="line">sudo touch ~root/.hushlogin
</span></code></pre></div></figure></notextile></div>

<p>If you prefer to copy the files into ~root, then replace <code>ln -sfv</code> with <code>cp</code>.</p>

<h2 id="build-and-install-wiringpi">Build and install WiringPi</h2>

<p><a href="https://projects.drogon.net/raspberry-pi/wiringpi">WiringPi</a> is a library to access the Pi’s GPIO, SPI, and I2C headers, modelled on the Arduino Wiring system.  It also includes the <code>gpio</code> utility for use of the libraries from the command prompt.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">apt-get install gcc make git-core libi2c-dev
</span><span class="line">git clone git://git.drogon.net/wiringPi
</span><span class="line"><span class="nb">cd </span>wiringPi; ./build
</span><span class="line">
</span><span class="line"><span class="c"># test with gpio utility</span>
</span><span class="line">gpio readall
</span><span class="line">
</span><span class="line"><span class="c"># install ruby gem (optional)</span>
</span><span class="line">gem install --user-install wiringpi
</span></code></pre></div></figure></notextile></div>

<h2 id="install-transmission">Install Transmission</h2>

<p>The transmission bittorrent client doesn’t have many dependencies, can be installed as a
daemon, and accessed remotely using a Web UI.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># install packages</span>
</span><span class="line">apt-get install transmission-daemon
</span><span class="line">
</span><span class="line"><span class="c"># start daemon as logged in user (usually &#39;pi&#39;)</span>
</span><span class="line">sed -i <span class="s2">&quot;/^USER=/s/.*/#&amp;\nUSER=$(logname)/&quot;</span> /etc/init.d/transmission-daemon
</span><span class="line">
</span><span class="line"><span class="c"># don&#39;t store config in &#39;/var/lib/&#39;</span>
</span><span class="line">sed -i <span class="s2">&quot;/^OPTIONS=/s/^/# /&quot;</span> /etc/default/transmission-daemon
</span><span class="line">
</span><span class="line"><span class="c"># test transmission-daemon uses ~/.config</span>
</span><span class="line">service transmission-daemon restart
</span><span class="line">ls -l .config/transmission-daemon
</span><span class="line">
</span><span class="line"><span class="c"># customise settings for transmission (see below)</span>
</span><span class="line">nano .config/transmission-daemon/settings.json
</span><span class="line">service transmission-daemon reload
</span></code></pre></div></figure></notextile></div>

<p>The following block includes settings needed to get the Web UI up and running, pasting it
before the last setting will replace any definitions duplicated earlier in the file.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="json"><span class="line"><span class="s2">&quot;watch-dir&quot;</span><span class="err">:</span> <span class="s2">&quot;/home/pi/torrents&quot;</span><span class="err">,</span>
</span><span class="line"><span class="s2">&quot;download-dir&quot;</span><span class="err">:</span> <span class="s2">&quot;/home/pi/torrents&quot;</span><span class="err">,</span>
</span><span class="line"><span class="s2">&quot;incomplete-dir&quot;</span><span class="err">:</span> <span class="s2">&quot;/home/pi/torrents/incomplete&quot;</span><span class="err">,</span>
</span><span class="line"><span class="s2">&quot;incomplete-dir-enabled&quot;</span><span class="err">:</span> <span class="kc">false</span><span class="err">,</span>
</span><span class="line"><span class="s2">&quot;watch-dir-enabled&quot;</span><span class="err">:</span> <span class="kc">true</span><span class="err">,</span>
</span><span class="line"><span class="s2">&quot;trash-original-torrent-files&quot;</span><span class="err">:</span> <span class="kc">true</span><span class="err">,</span>
</span><span class="line">
</span><span class="line"><span class="s2">&quot;rpc-port&quot;</span><span class="err">:</span> <span class="mi">9091</span><span class="err">,</span>
</span><span class="line"><span class="s2">&quot;rpc-whitelist&quot;</span><span class="err">:</span> <span class="s2">&quot;127.0.0.1, 192.168.*.*, 172.16.0.*&quot;</span><span class="err">,</span>
</span><span class="line">
</span><span class="line"><span class="s2">&quot;rpc-password&quot;</span><span class="err">:</span> <span class="s2">&quot;pi&quot;</span><span class="err">,</span>
</span><span class="line"><span class="s2">&quot;rpc-username&quot;</span><span class="err">:</span> <span class="s2">&quot;transmission&quot;</span><span class="err">,</span>
</span><span class="line"><span class="s2">&quot;rpc-authentication-required&quot;</span><span class="err">:</span> <span class="kc">true</span><span class="err">,</span>
</span></code></pre></div></figure></notextile></div>

<p>Full details on transmission’s config files may be found
<a href="https://trac.transmissionbt.com/wiki/EditConfigFiles">here</a>. Other settings such as port
forwarding, bandwidth throttling, and encryption, can be configured from the Web UI
(usually at <code>raspbian.local:9091</code>) .</p>

<h2 id="dropbox-sync-using-dbox">Dropbox sync using dbox</h2>

<p>Follow the <a href="https://github.com/kenpratt/dbox">dbox installation instructions</a> to set up the dropbox sdk developer
keys and authorisation tokens. To use dbox for automatic folder syncing, see my post:
<a href="http://jmeosbn.github.io/blog/pi-box/">Dropbox on Pi</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">apt-get install gcc make ruby ruby-dev libsqlite3-dev
</span><span class="line">gem install dbox
</span></code></pre></div></figure></notextile></div>

<h2 id="precompiled-xbmc">Precompiled XBMC</h2>

<p>If you’re running raspbian and want to use the same image with XBMC, you can install the
base XBMC and required packages as follows (adapted from
<a href="http://michael.gorven.za.net/raspberrypi/xbmc">michael.gorven.za.net</a>):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="nb">echo</span> <span class="s1">&#39;deb http://archive.mene.za.net/raspbian wheezy contrib</span>
</span><span class="line"><span class="s1">&#39;</span> | sudo tee /etc/apt/sources.list.d/mene.list
</span><span class="line">
</span><span class="line">apt-key adv --keyserver keyserver.ubuntu.com --recv-key 5243CDED
</span><span class="line">
</span><span class="line">apt-get update <span class="o">&amp;&amp;</span> apt-get install xbmc
</span><span class="line">
</span><span class="line">nano /etc/default/xbmc  <span class="c"># edit to enable and set user</span>
</span></code></pre></div></figure></notextile></div>

<h2 id="connecting-to-the-pi">Connecting to the Pi</h2>

<p>With support for zeroconfig installed (via <code>avahi-daemon</code>), it’s much easier to
find your Pi on the network<sup id="fnref:hostname"><a href="#fn:hostname" rel="footnote">1</a></sup>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># login using zeroconfig</span>
</span><span class="line">ssh pi@raspberrypi.local
</span></code></pre></div></figure></notextile></div>

<p><em>Note: If multiple Pis are active on the same network, they should be given
<a href="#change-hostname">unique hostnames</a>.</em></p>

<h3 id="copy-public-key-to-the-pi">Copy public key to the Pi</h3>

<p>Before setting up the Pi remotely, there are some things that can be done locally (on your PC, laptop, etc.) to ease logging in when using SSH.  This will obviate the need to enter a password, or specify the full host name each time we access the Pi.</p>

<p>If generating a new key pair, accept the default key location as suggested by <code>ssh-keygen</code> below.  While a passphrase is optional, anyone can use a copy of the unencrypted private key to authenticate with your identity.  Many operating systems are preconfigured to use <code>ssh-agent</code> or a similar utility, to avoid having to enter a passphrase multiple times (if at all).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># generate a key pair if none already exists</span>
</span><span class="line"><span class="nb">test</span> -f ~/.ssh/id_rsa.pub <span class="o">||</span> ssh-keygen
</span><span class="line">
</span><span class="line"><span class="c"># remove any old, conflicting host entries</span>
</span><span class="line">ssh-keygen -R raspberrypi.local
</span><span class="line">
</span><span class="line"><span class="c"># password is required until the key is installed</span>
</span><span class="line">ssh-copy-id pi@raspberrypi.local
</span></code></pre></div></figure></notextile></div>

<p>The easiest way to append a key to the remote user’s <code>~/.ssh/authorized_keys</code> file is to use <code>ssh-copy-id</code> as shown above.  Download <a href="http://hg.mindrot.org/openssh/raw-file/tip/contrib/ssh-copy-id">ssh-copy-id</a> from source (or <a href="https://github.com/beautifulcode/ssh-copy-id-for-OSX">github</a>) if your system doesn’t already have it (<a href="http://www.commandlinefu.com/commands/view/10228/...if-you-have-sudo-access-you-could-just-install-ssh-copy-id-mac-users-take-note.-this-is-how-you-install-ssh-copy-id-">installation instructions</a>), this <a href="http://www.commandlinefu.com/commands/view/188/copy-your-ssh-public-key-to-a-server-from-a-machine-that-doesnt-have-ssh-copy-id">alternative method</a> should also work in most situations.</p>

<h3 id="add-an-alias-to-sshconfig">Add an alias to .ssh/config</h3>

<p>Locally define the alias <code>pi</code>, to be used in place of <code>pi@raspberrypi.local</code> with
ssh commands such as <code>ssh pi</code> and <code>sftp pi</code>. Enter the text below as a single command, or
manually paste the quoted text into <code>~/.ssh/config</code> using <code>nano</code> or similar (the IP
address can be used for <code>Hostname</code> if preferred).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="nb">echo</span> <span class="s1">&#39;</span>
</span><span class="line"><span class="s1">Host pi</span>
</span><span class="line"><span class="s1">  User  pi</span>
</span><span class="line"><span class="s1">  Hostname  raspberrypi.local&#39;</span> &gt;&gt; ~/.ssh/config
</span></code></pre></div></figure></notextile></div>

<h3 id="transfer-files">Transfer files</h3>

<p>If you have previous files from your Pi stored locally, you can transfer them using <code>sftp</code>, <code>scp</code>, etc.  For easily transferring many arbitrary files , a GUI sftp client is recommended.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># connect to the pi, using the `xb` alias defined above</span>
</span><span class="line">sftp xb
</span><span class="line">sftp&gt; put .bash_aliases
</span><span class="line">sftp&gt; <span class="nb">exit</span>
</span><span class="line">
</span><span class="line"><span class="c"># you can also use ctlr+d to logout</span>
</span></code></pre></div></figure></notextile></div>

<h3 id="manually-configure-wifi-adapter">Manually configure WiFi adapter</h3>

<p><a href="http://www.savagehomeautomation.com/raspi-airlink101">Instructions adapted from here</a>.</p>

<p>Use <code>lsusb</code> to check that the adapter is recognised, and <code>lsmod</code> to check the kernel module (e.g. <code>8192cu</code>) is loaded.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">sudo nano /etc/network/interfaces
</span></code></pre></div></figure></notextile></div>

<p>Make sure the following lines exist in the interfaces file, adding them as needed:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">allow-hotplug wlan0
</span><span class="line">iface wlan0 inet manual
</span><span class="line">wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf
</span></code></pre></div></figure></notextile></div>

<!--
To manually set a static IP, add the following lines with the desired values:

    address 192.168.1.31
    netmask 255.255.255.0
    gateway 192.168.1.254

-->

<p>Open the file that configures WiFi hotspots:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">sudo nano /etc/wpa_supplicant/wpa_supplicant.conf
</span></code></pre></div></figure></notextile></div>

<p>Add your network details, using the following template:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="nv">network</span><span class="o">={</span>
</span><span class="line">  <span class="nv">ssid</span><span class="o">=</span><span class="s2">&quot;YOUR-NETWORK-SSID&quot;</span>
</span><span class="line">  <span class="nv">psk</span><span class="o">=</span><span class="s2">&quot;YOUR-WLAN-PASSWORD&quot;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></div></figure></notextile></div>

<p>Or, more fully as required:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="nv">network</span><span class="o">={</span>
</span><span class="line">  <span class="nv">ssid</span><span class="o">=</span><span class="s2">&quot;YOUR-NETWORK-SSID&quot;</span>
</span><span class="line">  <span class="nv">psk</span><span class="o">=</span><span class="s2">&quot;YOUR-WLAN-PASSWORD&quot;</span>
</span><span class="line">  <span class="nv">proto</span><span class="o">=</span>WPA2
</span><span class="line">  <span class="nv">key_mgmt</span><span class="o">=</span>WPA-PSK
</span><span class="line">  <span class="nv">pairwise</span><span class="o">=</span>CCMP TKIP
</span><span class="line">  <span class="nv">group</span><span class="o">=</span>CCMP TKIP
</span><span class="line"><span class="o">}</span>
</span></code></pre></div></figure></notextile></div>

<p>Reinitialise the adapter, and check it’s connected.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">sudo ifdown wlan0
</span><span class="line">sudo ifup wlan0
</span><span class="line"><span class="c"># you may get some errors here, even when successful</span>
</span></code></pre></div></figure></notextile></div>

<p>Use <code>iwconfig</code> to view wifi adapter info and <code>ifconfig</code> for general network info.</p>

<h3 id="configure-bluetooth-adapter">Configure bluetooth adapter</h3>

<p><a href="http://www.ctheroux.com/2012/08/a-step-by-step-guide-to-setup-a-bluetooth-keyboard-and-mouse-on-the-raspberry-pi/">Adapted from ctheroux</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># install bluetooth support and dependencies</span>
</span><span class="line">agi bluez python-gobject  <span class="c"># minimal?</span>
</span><span class="line">agi bluetooth bluez-utils  <span class="c"># full</span>
</span><span class="line">
</span><span class="line"><span class="c"># for management from the desktop</span>
</span><span class="line">agi blueman
</span><span class="line">
</span><span class="line"><span class="c"># check adapter is working*</span>
</span><span class="line">hcitool dev
</span><span class="line">
</span><span class="line"><span class="c"># scan for devices</span>
</span><span class="line">hcitool scan
</span><span class="line">
</span><span class="line"><span class="c"># pair with device, using the address listed from scan</span>
</span><span class="line">bluez-simple-agent hci0 XX:XX:XX:XX:XX:XX
</span><span class="line">
</span><span class="line"><span class="c"># trust the device</span>
</span><span class="line">bluez-test-device trusted XX:XX:XX:XX:XX:XX yes
</span><span class="line">
</span><span class="line"><span class="c"># connect to input device</span>
</span><span class="line">bluez-test-input hci0 XX:XX:XX:XX:XX:XX
</span><span class="line">
</span><span class="line"><span class="c"># adapter status</span>
</span><span class="line">hciconfig
</span></code></pre></div></figure></notextile></div>

<p><em>*Note: a bluetooth adapter may be listed in <code>lsusb</code> and <code>hciconfig</code>, without being recognised by <code>hcitool</code>. This is the case with the belkin dongle I have, so use <code>hcitool</code> to check that a device is working properly.</em></p>

<h3 id="install-aircrack-and-related-tools">Install aircrack and related tools</h3>

<p>Taken from <a href="http://blog.petrilopia.net/linux/raspberry-pi-install-aircrackng-suite/">blog.petrilopia.net</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">apt-get -y install iw reaver
</span><span class="line">apt-get -y install libssl-dev libnl-3-dev libnl-genl-3-dev
</span><span class="line">wget http://download.aircrack-ng.org/aircrack-ng-1.2-beta3.tar.gz
</span><span class="line">tar -zxvf aircrack-ng-1.2-beta3.tar.gz
</span><span class="line"><span class="nb">cd </span>aircrack-ng-1.2-beta3
</span><span class="line">make
</span><span class="line">make install
</span></code></pre></div></figure></notextile></div>

<h3 id="using-reaver">Using Reaver</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">apt-get install reaver
</span><span class="line">
</span><span class="line"><span class="c"># put wifi device into monitor mode</span>
</span><span class="line">airmon-ng start wlan0
</span><span class="line">
</span><span class="line"><span class="c"># list available networks</span>
</span><span class="line">airodump-ng wlan0
</span><span class="line"><span class="c"># airodump-ng mon0</span>
</span><span class="line">
</span><span class="line"><span class="c"># set bssid to target network name</span>
</span><span class="line"><span class="nv">bssid</span><span class="o">=</span><span class="s2">&quot;setthistobssid&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c"># start reaver</span>
</span><span class="line">reaver -i mon0 -b <span class="s2">&quot;$bssid&quot;</span> -vv
</span></code></pre></div></figure></notextile></div>

<h3 id="configure-automount-for-usb-drives-1">Configure automount for usb drives</h3>

<p>If there’s no service already installed to automount usb drives, then udisks-glue can be
setup as follows.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># install udisks-glue</span>
</span><span class="line">apt-get install udisks-glue
</span><span class="line">
</span><span class="line"><span class="c"># create config file, including spin down of drives after 10 mins</span>
</span><span class="line"><span class="nb">echo</span> <span class="s1">&#39;filter disks {</span>
</span><span class="line"><span class="s1">    optical = false</span>
</span><span class="line"><span class="s1">    partition_table = false</span>
</span><span class="line"><span class="s1">    usage = filesystem</span>
</span><span class="line"><span class="s1">}</span>
</span><span class="line">
</span><span class="line"><span class="s1">match disks {</span>
</span><span class="line"><span class="s1">    automount = true</span>
</span><span class="line"><span class="s1">    automount_options = { sync, noatime }</span>
</span><span class="line"><span class="s1">    post_insertion_command = &quot;udisks --set-spindown %device_file --spindown-timeout 600 --mount %device_file --mount-options sync,noatime&quot;</span>
</span><span class="line"><span class="s1">}&#39;</span> | sudo tee /etc/udisks-glue.conf
</span><span class="line">
</span><span class="line"><span class="c"># create &#39;upstart&#39; service definition</span>
</span><span class="line"><span class="nb">echo</span> <span class="s1">&#39;#</span>
</span><span class="line"><span class="s1"># udisks-glue</span>
</span><span class="line"><span class="s1">#</span>
</span><span class="line">
</span><span class="line"><span class="s1">description &quot;udisks-glue for udisks&quot;</span>
</span><span class="line">
</span><span class="line"><span class="s1">start on started</span>
</span><span class="line"><span class="s1">stop on (runlevel [06] or stopped dbus)</span>
</span><span class="line">
</span><span class="line"><span class="s1">expect fork</span>
</span><span class="line"><span class="s1">respawn</span>
</span><span class="line"><span class="s1">setuid pi</span>
</span><span class="line"><span class="s1">exec /usr/bin/udisks-glue</span>
</span><span class="line"><span class="s1">&#39;</span> | sudo tee /etc/init/udisks-glue.conf
</span><span class="line">
</span><span class="line"><span class="c"># alternative startup using rc.local</span>
</span><span class="line"><span class="c"># sed -i &quot;/^exit 0/isudo -u $(logname) udisks-glue\n&quot; /etc/rc.local</span>
</span></code></pre></div></figure></notextile></div>

<p>Note: see <a href="http://angryelectron.com/udisks-glue-initscript/">angryelectron.com</a> for an
example of how to add udisks-glue as a service when using a traditional init.d script.</p>

<h3 id="install-xbian-onto-a-raspbian-image">Install XBian onto a Raspbian image</h3>

<p>From <a href="http://forum.xbian.org/thread-1850.html">Installing XBIAN directly on RASPBIAN IMG</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># install xbian repo</span>
</span><span class="line">wget http://xbian.brantje.com/pool/stable/main/x/xbian-package-repo/xbian-package-repo_1.0.0_armhf.deb
</span><span class="line">dpkg -i xbian-package-repo_1.0.0_armhf.deb
</span><span class="line">
</span><span class="line"><span class="c"># enable staging and development repositories and update</span>
</span><span class="line">sed -i <span class="s1">&#39;/ staging\|devel main/s/^#\+ //&#39;</span> /etc/apt/sources.list.d/xbian.list
</span><span class="line">apt-get update
</span><span class="line"><span class="c"># revert previous edit</span>
</span><span class="line">sed -i <span class="s1">&#39;/ staging\|devel main/s/^/### /&#39;</span> /etc/apt/sources.list.d/xbian.list
</span><span class="line">
</span><span class="line"><span class="c"># install xbmc **only**</span>
</span><span class="line"><span class="c"># apt-get install xbian-package-xbmc # 97MB</span>
</span><span class="line">
</span><span class="line"><span class="c"># install xbian and xbmc</span>
</span><span class="line">apt-get install xbian-package-xbianhome xbian-package-kernel
</span><span class="line">
</span><span class="line"><span class="c"># reboot required to make file system changes, and conversion to btrfs</span>
</span><span class="line">sed -i /rootfstype/s/btrfs/ext4/ /boot/cmdline.txt <span class="c"># do not use btrfs</span>
</span><span class="line">reboot
</span><span class="line">
</span><span class="line"><span class="c"># install remaining xbian packages</span>
</span><span class="line"><span class="c"># Note: a warning for removal of &#39;sysvinit&#39; will be displayed,</span>
</span><span class="line"><span class="c"># as xbian replaces it with the &#39;upstart&#39; service manager.</span>
</span><span class="line"><span class="c"># Also, cmdline.txt should remain unchanged, with new</span>
</span><span class="line"><span class="c"># parameters written to /boot/cmdline.new.</span>
</span><span class="line">apt-get install xbian-update xbian-package-rasp-switching
</span><span class="line">
</span><span class="line"><span class="c"># XBMC can now be started with &quot;start XBMC&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c"># boot to desktop</span>
</span><span class="line"><span class="c"># apt-get install lightdm</span>
</span></code></pre></div></figure></notextile></div>

<!-- XBMC can be started with "start XBMC", Raspbian X desktop with "service lightdm start".

if you Raspbian setup used to boot into X with PI user automatically, you can keep this and indeed start / load XBMC quick and easy way - even jumping back and forth between XBMC and you X Desktop. We can click "Logout", put "xbian" as user to log in and XBMC starts. If you quit XBMC, X will come again. No reboots needed.
Both X and XBMC can be managed now from xbian-config tool (from SSH or even XBMC). There is how you RPI will boot if you select what service for autostart: -->

<!-- endofpost -->

<h3 id="not-used-with-recent-versions">Not used with recent versions</h3>

<p>Previously useful functionality or workarounds</p>

<h3 id="clear-cached-network-adapter">Clear cached network adapter</h3>

<p>(needed for switching cards between devices)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="nb">echo</span> | sudo tee /etc/udev/rules.d/70-persistent-net.rules
</span></code></pre></div></figure></notextile></div>

<h3 id="regional-system-settings">Regional system settings</h3>

<p>If the console keyboard is not setup correctly for the en_GB layout, a solution I’ve used before is to install <code>keyboard-configuration</code>, which only seems to work once <code>console-setup</code> is also installed.</p>

<p><em>The latter package will change the console font, but this can be reverted during the commands shown below. Just choose the font you prefer, or choose ‘Do not change the boot/kernel font’.</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># Packages needed to change keyboard layout</span>
</span><span class="line">apt-get install console-setup keyboard-configuration
</span><span class="line">
</span><span class="line"><span class="c"># Configure keyboard settings</span>
</span><span class="line">dpkg-reconfigure keyboard-configuration
</span><span class="line">
</span><span class="line"><span class="c"># Configure console font</span>
</span><span class="line"><span class="c"># accept the defaults until the font selection screen</span>
</span><span class="line">dpkg-reconfigure console-setup
</span><span class="line">
</span><span class="line"><span class="c"># Configure time zone and locale</span>
</span><span class="line">dpkg-reconfigure tzdata
</span><span class="line">dpkg-reconfigure locales
</span></code></pre></div></figure></notextile></div>

<div class="footnotes">
  <ol>
    <li id="fn:hostname">
      <p>It should be possible to connect with the hostname even without zeroconfig,
e.g. <code>pi@raspberrypi</code>, but I’ve had no luck with this (except for when the router sets
this up via DNS).<a href="#fnref:hostname" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making a Pi Disk Image]]></title>
    <link href="http://jmeosbn.github.io/blog/making-a-pi-disk-image/"/>
    <updated>2014-06-30T21:13:00+01:00</updated>
    <id>http://jmeosbn.github.io/blog/making-a-pi-disk-image</id>
    <content type="html"><![CDATA[<p>After setting up the Raspberry Pi, it’s a good idea to make your own installation image
from it. This mainly involves using the <code>dd</code> command to clone the SD card into a file.
However, there are some extra steps that can be used to produce a smaller file, and to
provide a helpful login message to anyone using the image.</p>

<!-- more -->

<h3 id="preparation-on-the-running-system">Preparation on the running system</h3>

<p>After setting up your Raspberry Pi - but before shutting it down - prepare the installed
system for imaging.</p>

<p>Edit the login message to detail setup tasks required on logon:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="nb">echo</span> -e <span class="s2">&quot;\e[47;30;1m</span>
</span><span class="line"><span class="s2">Please generate new host keys by using the following commands:</span>
</span><span class="line"><span class="s2">  rm /etc/ssh/ssh_host_*</span>
</span><span class="line"><span class="s2">  dpkg-reconfigure openssh-server</span>
</span><span class="line">
</span><span class="line"><span class="s2">Set user and root passwords with &#39;sudo passwd $(logname) &amp;&amp; sudo passwd&#39;</span>
</span><span class="line">
</span><span class="line"><span class="s2">You should also use &#39;sudo raspi-config&#39; to change the hostname</span>
</span><span class="line"><span class="s2">and expand the filesystem to fill the SD card.</span>
</span><span class="line">
</span><span class="line"><span class="s2">Use the following command to suppress this message in future:</span>
</span><span class="line"><span class="s2">  touch ~/.hushlogin</span>
</span><span class="line"><span class="s2">\e[0m&quot;</span> | sudo tee /etc/motd
</span><span class="line">
</span><span class="line"><span class="c"># ensure the message is shown</span>
</span><span class="line">rm -f /home/<span class="k">$(</span>logname<span class="k">)</span>/.hushlogin
</span></code></pre></div></figure></notextile></div>

<p>Clean up the system by removing any unneeded files and private user data.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># login as root</span>
</span><span class="line">sudo -s
</span><span class="line">
</span><span class="line"><span class="c"># install secure-delete</span>
</span><span class="line">apt-get install secure-delete
</span><span class="line">
</span><span class="line"><span class="c"># clean up downloaded packages, log, caches, etc.</span>
</span><span class="line">apt-get clean
</span><span class="line">find /var/log -type f -delete
</span><span class="line">du -sch /var/cache/*
</span><span class="line">df -h /
</span><span class="line">
</span><span class="line"><span class="c"># backup files from your home directory before removal</span>
</span><span class="line"><span class="nb">cd</span> /home/<span class="k">$(</span>logname<span class="k">)</span>
</span><span class="line">zip -FS -ry1 /media/KEY/pihome.zip .
</span><span class="line">
</span><span class="line"><span class="c"># remove any other unneeded or private user data</span>
</span><span class="line">nano /etc/network/interfaces
</span><span class="line">nano /etc/wpa_supplicant/wpa_supplicant.conf
</span><span class="line">
</span><span class="line"><span class="c"># list of temp files in home dir</span>
</span><span class="line"><span class="nv">tmpfiles</span><span class="o">=</span><span class="s2">&quot;.*_history .lesshst *.log .cache/ .hushlogin&quot;</span>
</span><span class="line"><span class="c"># list of config files in home dir</span>
</span><span class="line"><span class="nv">dotfiles</span><span class="o">=</span><span class="s2">&quot;.config/ .local/ .git* .gem/ .npm/ .ssh__/&quot;</span>
</span><span class="line"><span class="c"># remove transient and config files for root and user home</span>
</span><span class="line"><span class="k">for </span>u in /home/<span class="k">$(</span>logname<span class="k">)</span> /root; <span class="k">do </span><span class="nb">echo</span> <span class="o">&amp;&amp;</span>
</span><span class="line">  <span class="nb">cd</span> <span class="nv">$u</span> <span class="o">&amp;&amp;</span> <span class="nb">pwd</span> <span class="o">&amp;&amp;</span> rm -rfv <span class="nv">$tmpfiles</span> <span class="nv">$dotfiles</span>
</span><span class="line">  ls -A
</span><span class="line"><span class="k">done</span>
</span></code></pre></div></figure></notextile></div>

<p>Zero fill the unused SD card space for better compression. This can instead be done with an
image file<sup id="fnref:zerofree"><a href="#fn:zerofree" rel="footnote">1</a></sup> if you’re concerned about wearing out the card.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># zero fill the swap file</span>
</span><span class="line">swapoff -a
</span><span class="line">dd <span class="k">if</span><span class="o">=</span>/dev/zero <span class="nv">of</span><span class="o">=</span>/var/swap <span class="nv">bs</span><span class="o">=</span>1M <span class="nv">count</span><span class="o">=</span>100
</span><span class="line">mkswap /var/swap
</span><span class="line">
</span><span class="line"><span class="c"># zero fill the filesystem</span>
</span><span class="line">sfill -z -l -l -f -v /boot /
</span><span class="line">
</span><span class="line"><span class="c"># shutdown and remove the card</span>
</span><span class="line">poweroff
</span></code></pre></div></figure></notextile></div>

<p>Here’s the basic command to copy an SD card into a file. The size is correct for the
current Raspbian image at <a href="http://raspberrypi.org">raspberrypi.org</a>, and can be confirmed
by viewing the size of the original uncompressed image: <code>unzip -l raspbian.zip</code>, or
by using <code>fdisk</code><sup id="fnref:fdisk"><a href="#fn:fdisk" rel="footnote">2</a></sup>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># location and size of SD card</span>
</span><span class="line"><span class="nv">dev</span><span class="o">=</span>/dev/rdisk2
</span><span class="line"><span class="nv">size</span><span class="o">=</span>2825
</span><span class="line">
</span><span class="line"><span class="c"># create the image</span>
</span><span class="line"><span class="nv">date</span><span class="o">=</span><span class="k">$(</span>date +%Y%m%d<span class="k">)</span>
</span><span class="line"><span class="nv">name</span><span class="o">=</span>raspbian-minimal
</span><span class="line">sudo dd <span class="k">if</span><span class="o">=</span><span class="nv">$dev</span> <span class="nv">of</span><span class="o">=</span><span class="nv">$name</span>.img <span class="nv">count</span><span class="o">=</span><span class="nv">$size</span> <span class="nv">bs</span><span class="o">=</span>1m
</span><span class="line">
</span><span class="line"><span class="c"># compress the image using 7z (without BCJ filter)</span>
</span><span class="line">7z a -mf- <span class="nv">$date</span>-<span class="nv">$name</span>.img.7z <span class="nv">$name</span>.img
</span></code></pre></div></figure></notextile></div>

<!--
If the image is going to be compressed straightaway, it's also possible to read and
compress in one operation.  This will be much slower than reading the SD card normally.

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='sh'><span class='line'><span class="c"># read the sd card and compress using 7z</span>
</span><span class='line'>sudo dd <span class="k">if</span><span class="o">=</span><span class="nv">$dev</span> <span class="nv">count</span><span class="o">=</span><span class="nv">$size</span> <span class="nv">bs</span><span class="o">=</span>1m | 7z a -mf- -si<span class="nv">$name</span>.img <span class="nv">$date</span>-<span class="nv">$name</span>.img.7z
</span></code></pre></div></figure>
 &#8211;>

<!--

The above method is sufficient to take a backup of a card that's had some initial setup,
but hasn't yet had it's filesystem expanded and does not require mounting the filesystem
for further modifications. Otherwise, skip to the more detailed instructions to cleanup
the image and determine it's correct size.

[ubuntu]: http://www.ubuntu.com/download/desktop/



<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='sh'><span class='line'><span class="c"># reduce size of the main partition in gparted</span>
</span><span class='line'><span class="c"># (to minimise the sd card read/write time)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># set device path for sd card</span>
</span><span class='line'><span class="nv">dev</span><span class="o">=</span>/dev/sdc
</span><span class='line'>
</span><span class='line'><span class="c"># check the filesystems</span>
</span><span class='line'>umount <span class="k">${</span><span class="nv">dev</span><span class="k">}</span>?
</span><span class='line'>fsck -pfv <span class="k">${</span><span class="nv">dev</span><span class="k">}</span>?
</span><span class='line'>
</span><span class='line'><span class="c"># extract partition info</span>
</span><span class='line'>partedm<span class="o">()</span> <span class="o">{</span> <span class="nv">usage</span><span class="o">=</span><span class="s2">&quot;Usage: partedm dev part field unit&quot;</span>
</span><span class='line'>            <span class="o">[</span> <span class="nv">$# </span>-ne 4 <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="nv">$usage</span> <span class="o">&amp;&amp;</span> <span class="k">return</span>
</span><span class='line'><span class="k">            </span>parted -m <span class="nv">$1</span> unit <span class="nv">$4</span> print |
</span><span class='line'>            grep <span class="s2">&quot;^$2&quot;</span> | cut -d: -f<span class="nv">$3</span> | tr -d TGMKB; <span class="o">}</span>
</span><span class='line'><span class="nv">size</span><span class="o">=</span><span class="k">$((</span><span class="o">(</span><span class="k">$(</span>partedm <span class="nv">$dev</span> 2 3 b<span class="k">)</span><span class="o">+</span><span class="m">1</span><span class="o">)</span> <span class="o">/</span><span class="m">1024</span><span class="o">/</span><span class="m">1024</span><span class="k">))</span>
</span><span class='line'><span class="nv">boot</span><span class="o">=</span><span class="k">$(</span>partedm <span class="nv">$dev</span> 1 2 b<span class="k">)</span>
</span><span class='line'><span class="nv">main</span><span class="o">=</span><span class="k">$(</span>partedm <span class="nv">$dev</span> 2 2 b<span class="k">)</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;total size = $size MB</span>
</span><span class='line'><span class="s2"> boot starts at  $boot bytes</span>
</span><span class='line'><span class="s2"> main starts at $main bytes&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># copy the sd card - using calculated size of image</span>
</span><span class='line'>dd <span class="k">if</span><span class="o">=</span><span class="nv">$dev</span> <span class="nv">of</span><span class="o">=</span><span class="nv">$name</span>.img <span class="nv">bs</span><span class="o">=</span>1M <span class="nv">count</span><span class="o">=</span><span class="k">${</span><span class="nv">size</span><span class="k">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># mount image file and zero fill free space</span>
</span><span class='line'><span class="k">for </span>part in boot main; <span class="k">do</span>
</span><span class='line'><span class="k">  </span>mkdir -p <span class="nv">$part</span>
</span><span class='line'>  mount -o loop,offset<span class="o">=</span><span class="k">${</span><span class="p">!part</span><span class="k">}</span> <span class="nv">$name</span>-basic.img <span class="nv">$part</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>    sfill -z -l -l -f -v <span class="nv">$part</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="c"># zero fill the swap file</span>
</span><span class='line'>dd <span class="k">if</span><span class="o">=</span>/dev/zero <span class="nv">of</span><span class="o">=</span>main/var/swap <span class="nv">bs</span><span class="o">=</span>1M <span class="nv">count</span><span class="o">=</span>100
</span><span class='line'>mkswap main/var/swap
</span><span class='line'>
</span><span class='line'><span class="c"># unmount (after making any final changes)</span>
</span><span class='line'>umount boot main <span class="o">&amp;&amp;</span> rm -rf boot main
</span><span class='line'>
</span><span class='line'><span class="c"># compress the image using 7z (without BCJ filter)</span>
</span><span class='line'>7z a -mf- <span class="nv">$name</span>.img.7z <span class="nv">$name</span>.img
</span></code></pre></div></figure>

 &#8211;>

<!--
# make image on Mac OS X
dev=/dev/rdisk2
fdisk $dev
bc -l <<< '(122880+3481600)/2/1024'
dd if=$dev of=$name.img bs=1m count=$size
-->

<!-- OFFSET=`fdisk -lu $IMAGE | grep -m 1 Linux$ | awk '{ print $2 *512 }'` -->
<div class="footnotes">
  <ol>
    <li id="fn:zerofree">
      <p>In this case, you could try the more efficient <code>zerofree</code> utility for the main ext3/4 partition.<a href="#fnref:zerofree" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:fdisk">
      <p>Use <code>fdisk</code> to view the partition table info of the SD card, then calculate the
total amount to copy using <code>bc</code>:</p>

      <pre><code># confirm the above values
sudo fdisk $dev  # append '-l' flag on linux

# on OS X, add the last partition start to its size
bc -l &lt;&lt;&lt; '(122880+5662720)/2/1024'

# on Linux, use the last partition block
bc -l &lt;&lt;&lt; '(5785599+1)/2/1024'
</code></pre>
      <p><a href="#fnref:fdisk" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows 8.1 - EFI install]]></title>
    <link href="http://jmeosbn.github.io/blog/windows-8.1-efi-install/"/>
    <updated>2014-06-16T17:40:00+01:00</updated>
    <id>http://jmeosbn.github.io/blog/windows-8.1-efi-install</id>
    <content type="html"><![CDATA[<p>I recently wanted to test something on Windows, and not wanting to use a virtual machine,
I decided to install Windows 8.1 on my MacBook.</p>

<p>All Intel based Macs use EFI with a GUID partition table (GPT), instead of the
traditional Wintel BIOS/MBR combination. Until recently, this has meant that Windows can
only be installed by emulating an MBR disk, typically by using Apple’s Boot Camp to
create the Windows partition.</p>

<p>Since Windows 8 now supports installation under EFI<sup id="fnref:win7efi"><a href="#fn:win7efi" rel="footnote">1</a></sup>, and Boot Camp is fairly rigid about
the placement of a Windows partition, I wanted to try installing Windows 8.1 using EFI and
GPT just as I do with Mac OS X and Ubuntu.</p>

<!-- more -->

<p><em>Note: this procedure gets rapidly more complicated under only slightly unusual
circumstances (such as having a non Windows OS installed, or more than one disk). Since
this information involved some trial and error to discover, I post it here more for the
record than as an endorsement of something that’s worth doing (it’s not too hard, but
seriously, Ubuntu is free and much easier to install!).</em></p>

<ul id="markdown-toc">
  <li><a href="#why-the-windows-install-will-fail">Why the Windows install will fail</a></li>
  <li><a href="#a-new-windows-partition">A new Windows partition</a></li>
  <li><a href="#preparing-a-guid-partition-table">Preparing a GUID Partition Table</a></li>
  <li><a href="#install-windows-to-a-gpt-disk">Install Windows to a GPT disk</a></li>
  <li><a href="#manually-mount-the-efi-partition">Manually mount the EFI partition</a></li>
  <li><a href="#delete-the-previous-boot-configuration">Delete the previous boot configuration</a></li>
  <li><a href="#continue-installation-of-windows">Continue installation of Windows</a></li>
  <li><a href="#why-the-recovery-console-will-fail">Why the Recovery Console will fail</a></li>
  <li><a href="#legacy-boot-manager">Legacy boot manager</a></li>
</ul>

<h2 id="why-the-windows-install-will-fail">Why the Windows install will fail</h2>

<p>The issues below will prevent the installation of Windows 8 (and 8.1) from succeeding
when installing under EFI on a Mac or other EFI based system. The lack of clear error
messages actually makes an EFI installation seem impossible, despite the EFI boot loader
being present on the Windows disc. However, the fixes are fairly straightforward once you
understand the issues.</p>

<ul>
  <li>When installing from a USB key<sup id="fnref:usbkey"><a href="#fn:usbkey" rel="footnote">2</a></sup>, that key must use an MBR partition table</li>
  <li>The target for the installation must use a GUID partition table (GPT)</li>
  <li>The target disk must not have a hybrid GPT/MBR partition table, such as that created by Boot Camp, Disk Utility, or GParted<sup id="fnref:gparted"><a href="#fn:gparted" rel="footnote">3</a></sup>.  A GPT with <em>protective</em> MBR is fine though, and protects the GUID partitions on unsupported systems</li>
  <li>Windows will normally fail to install on systems with more than one GPT disk</li>
</ul>

<h2 id="a-new-windows-partition">A new Windows partition</h2>

<p>The first task is to make some free space available, and then create a new NTFS partition
for Windows to install to (size should be at least 20GB). It’s easier to do this now,
before trying to install Windows, for reasons that will become apparent.</p>

<p>If you’ll be resizing any Mac HFS+ partitions then you should probably use Disk Utility
on OS X. Likewise, for resizing ext3/4 and other file systems unknown to OS X, use
<a href="http://gparted.org/index.php">GParted</a> (booting from the <a href="http://gparted.org/livecd.php">gparted live cd</a> if no Linux system is installed).</p>

<p>Note: On a Mac, the boot manager can be accessed by holding the <code>alt</code> key during startup.</p>

<h2 id="preparing-a-guid-partition-table">Preparing a GUID Partition Table</h2>

<p>You can check the GUID partition table (or create one from an existing MBR) using
<code>gdisk</code> - which can be <a href="http://sourceforge.net/projects/gptfdisk/files/gptfdisk/0.8.10/gdisk-binaries/gdisk-0.8.10.pkg/download">installed on Mac OS X</a> or used from most Linux
distros, such as the <a href="http://gparted.org/livecd.php">gparted live cd</a>.</p>

<ol>
  <li>From a terminal, run <code>sudo gdisk /dev/&lt;target-disk-id&gt;</code><sup id="fnref:diskid"><a href="#fn:diskid" rel="footnote">4</a></sup></li>
  <li><code>gdisk</code> should display <code>GPT: present</code>, but <em>must not</em> list <code>MBR: hybrid</code></li>
  <li>If the disk has a GPT without a hybrid MBR, quit by typing <code>q</code> then <code>enter</code></li>
</ol>

<p>If the target disk is listed with <code>MBR: hybrid</code>, then Windows will fail to install under
EFI. The best way to correct the GPT is to replace the hybrid MBR using <code>gdisk</code>.</p>

<ol>
  <li>Still in <code>gdisk</code>, use <code>x</code> to enter the expert menu</li>
  <li>Enter <code>n</code> to create a new <em>protective</em> MBR</li>
  <li>Check the protective<sup id="fnref:protective"><a href="#fn:protective" rel="footnote">5</a></sup> MBR and GPT by using <code>o</code> and <code>p</code> respectively</li>
  <li>You can abort before writing any changes by using <code>q</code> to quit</li>
  <li>Once satisfied, write out the new table to disk by using <code>w</code></li>
</ol>

<p>If the target disk is listed with <code>MBR: MBR only</code>, then <code>gdisk</code> should have automatically
created a GUID partition table in memory<sup id="fnref:gptwarning"><a href="#fn:gptwarning" rel="footnote">6</a></sup>. If the MBR partition table isn’t
required to support older systems or legacy boot loaders, then use the menu commands
shown above to check the existing partitions have been added correctly before writing out
the tables to disk.</p>

<h2 id="install-windows-to-a-gpt-disk">Install Windows to a GPT disk</h2>

<p>Start the Windows installation using your preferred media, select the custom install
option, then continue on to the partition selection screen and select the empty NTFS
partition <a href="#a-new-windows-partition">created previously</a>. With a <em>single non-hybrid</em> GPT
disk, Windows should install without complaint.</p>

<p>Note: While you can use the installer to format or delete existing partitions, using it
to create a new partition from free space will likely create additional system partitions
which you may prefer not to have littering your disk. If you don’t want to reboot at this
point to create an NTFS partition, <code>diskpart</code> can be used to avoid the additional
partition clutter.</p>

<p>With some free space ready to be partitioned, type <code>Shift + F10</code> to bring up a command
prompt and use the following commands.</p>

<pre><code># start the diskpart utility
diskpart

# select the target disk
list disk
sel disk &lt;target disk&gt;
list part

# create a new partition using the selected disk's free space
create part pri
format fs=ntfs label=Windows quick

# exit diskpart
exit
</code></pre>

<h2 id="manually-mount-the-efi-partition">Manually mount the EFI partition</h2>

<p>With more than one GPT disk, Windows will fail to install as it only expects to have one
EFI system partition in which to store its boot configuration files. To work around this,
use <code>diskpart</code> to manually mount the EFI partition from the target installation disk,
then tell Windows to use that partition by using <code>bcdedit</code>.</p>

<p>Type <code>Shift + F10</code> to bring up a command prompt.</p>

<pre><code># start diskpart
diskpart

# mount the efi volume
list vol
sel vol &lt;efi volume&gt;
assign letter=s
exit

# set the EFI partition with bcdedit
bcdedit /sysstore s:
</code></pre>

<h2 id="delete-the-previous-boot-configuration">Delete the previous boot configuration</h2>

<p>If you’ve previously had Windows installed using EFI, then the previous boot loader and
boot configuration data store (BCD) will likely still be installed in the EFI system
partition. To prevent previous Windows entries from showing up as duplicates in the
Windows boot manager, you can delete the previous BCD store before installing Windows.</p>

<p>Assuming the EFI partition is mounted to <code>S:\</code>, the following command will delete the BCD store.</p>

<pre><code># delete boot store from a previous windows install
del s:\EFI\Microsoft\Boot\BCD
</code></pre>

<p><em>If you forget to do this until Windows is installed, and a previous configuration did
exist, then a system selection screen will be shown after each startup of Windows. To
remove the additional entry, use <code>bcdedit /delete {id-of-boot-entry}</code>.</em></p>

<h2 id="continue-installation-of-windows">Continue installation of Windows</h2>

<p>Back in the installer, you should now be able to select the new partition and continue
the installation as normal. When Windows reboots, it may be necessary to use the system’s
EFI boot manager to select the Windows partition and complete installation.</p>

<h2 id="why-the-recovery-console-will-fail">Why the Recovery Console will fail</h2>

<p>With Windows installed, you may at some point need to use the recovery console. On EFI
systems with more than one GPT disk, you’ll find that most of the recovery tools, such as
System Restore, will fail due to the same issue that causes the installation to fail.</p>

<p>From <em>Troubleshoot -&gt; Advanced Options -&gt; Command Prompt</em>, you can manually mount the
correct EFI partition using <code>diskpart</code> as
<a href="#manually-mount-the-efi-partition">described above</a>. Once done, simply use the graphical
menu to select <em>System Restore</em> or another recovery option.</p>

<h2 id="legacy-boot-manager">Legacy boot manager</h2>

<p>Windows 8 uses a graphical boot manager that’s only shown once the system is mostly
booted. Apart from taking longer to switch between systems, there is no access to
advanced boot options such as safe mode etc., without first being able to start the
graphical boot manager or recovery environment.</p>

<p>Previously, advanced options could be accessed by holding <code>F8</code> during startup, but
Windows no longer checks for this key<sup id="fnref:f8key"><a href="#fn:f8key" rel="footnote">7</a></sup> as it adds a second or so to the boot
time. If you’d prefer to have the menu available instead, then the <code>legacy</code> boot menu
policy can be enabled using <code>bcdedit</code>.</p>

<pre><code># allow F8 during boot to access advanced options
bcdedit /set bootmenupolicy legacy
</code></pre>

<p>Alternatively, the advanced options can be shown for the next boot only, or for every boot
(without needing to hold <code>F8</code>).</p>

<pre><code># show advanced options for the next boot only
bcdedit /set onetimeadvancedoptions on

# always show the boot menu before system startup
bcdedit /set {bootmgr} displaybootmenu yes
</code></pre>
<div class="footnotes">
  <ol>
    <li id="fn:win7efi">
      <p>Windows 7 actually supports efi booting from CD, but the efi loader and
related files were not included in the CD’s filesystem (there
<a href="http://forums.bit-tech.net/showthread.php?t=209045">is a hack</a> to work around
this, but it doesn’t seem to work on my MacBook).<a href="#fnref:win7efi" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:usbkey">
      <p>Write a new MBR partition table to a USB key and add a single FAT32 partition.
Then copy the Windows install files from the disc to the USB
 key using <code>rsync -aPh &lt;source&gt;/. &lt;key&gt;</code>.<a href="#fnref:usbkey" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:gparted">
      <p>Disk Utility only adds a hybrid MBR when creating a new partition table and
will retain any protective MBR already present. Annoyingly, GParted will re-add a hybrid
MBR whenever it modifies a disk that uses GPT, and this will prevent Windows from
starting under EFI until the hybrid MBR is removed.<a href="#fnref:gparted" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:diskid">
      <p>On Linux systems, the disk will normally be named using the form <code>sda</code>, where
the <code>a</code> represents the first disk. On Mac OS X, the form is <code>disk0</code>, where the <code>0</code>
represents the first disk.<a href="#fnref:diskid" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:protective">
      <p>A <em>protective</em> MBR usually lists only one partition, that spans the entire
disk to prevent non-GPT aware tools from identifying the disk as being uninitialised or
empty. A <em>hybrid</em> MBR exploits the protective MBR to make up to four primary partitions
available to systems that don’t support GPT disks. The use of a hybrid MBR is
discouraged, and not supported by Windows when booting under EFI.<a href="#fnref:protective" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:gptwarning">
      <p>It may be that <code>gdisk</code> can’t write out the GPT due to lack of free spaceat
the start of the disk. In this case you can try to resize the first partition to start a
few megabytes later.<a href="#fnref:gptwarning" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:f8key">
      <p>The check is supposedly still there, but is so short that it can’t be activated.<a href="#fnref:f8key" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dropbox on Pi]]></title>
    <link href="http://jmeosbn.github.io/blog/pi-box/"/>
    <updated>2012-12-19T00:54:00+00:00</updated>
    <id>http://jmeosbn.github.io/blog/pi-box</id>
    <content type="html"><![CDATA[<p>There’s currently no build of the Dropbox sync client that runs on ARM devices; while there is source available, it’s not suitable for automatic, unattended sync on a Raspberry Pi that may not have any windowing system installed.</p>

<p>Dropbox does make various SDKs available though, which enables a ruby or python script to be used instead of the official client.</p>

<!-- more -->

<h1 id="a-ready-made-solution">a ready made solution..</h1>

<p><a href="https://github.com/kenpratt/dbox">dbox</a> is a great ruby client for Dropbox that can locally create, clone, push, pull, sync, and move, a Dropbox folder hierarchy.  It can be used as an API directly from another ruby script, or with the included command line tool.</p>

<blockquote>
  <p><a href="https://github.com/kenpratt/dbox">dbox</a><br />
Dropbox integration made easy. This robust client gives you control over what, where, and when you sync with Dropbox.</p>
</blockquote>

<p>dbox syncs one file at a time, so it won’t be as quick as the official client when syncing large amounts of files.  For most uses this will only be an issue when initially cloning a large folder.</p>

<h2 id="installation">installation</h2>

<p>Before installing dbox, make sure you have any needed packages.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">sudo apt-get install ruby ruby-dev libsqlite3-dev
</span><span class="line">sudo gem install dbox
</span></code></pre></div></figure></notextile></div>

<p>Then follow the rest of the instructions from the <a href="https://github.com/kenpratt/dbox">dbox</a> page, to configure your keys and clone your Dropbox folder.</p>

<p>To run dbox periodically, download<sup id="fnref:dl"><a href="#fn:dl" rel="footnote">1</a></sup> the <a href="https://github.com/kenpratt/dbox/blob/master/sample_polling_script.rb">example script</a> and make it executable, then replace the example keys and path settings with your own.</p>

<!--	cp /var/lib/gems/1.9.1/gems/dbox-0.7.2/sample_polling_script.rb dboxsync.rb -->

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">wget https://raw.github.com/kenpratt/dbox/master/sample_polling_script.rb
</span><span class="line">mv ./sample_polling_script.rb dboxsync.rb
</span><span class="line">chmod +x dboxsync.rb
</span><span class="line">nano dboxsync.rb
</span><span class="line">./dboxsync.rb
</span></code></pre></div></figure></notextile></div>

<p>All output is written to a log file, so it’s normal not to see any output while running.  If you want to see some basic info while testing, change the script so <code>LOGFILE = STDOUT</code>.  To show the full syncing progress and other debug info, set the level of the <a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/logger/rdoc/Logger.html">logger class</a> by changing the script so it reads <code>LOGGER.level = Logger::DEBUG</code>.</p>

<p>To have the script run on startup, add the following entry to <code>/etc/rc.local</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">sudo nano /etc/rc.local
</span><span class="line">
</span><span class="line"><span class="c"># add the following</span>
</span><span class="line"><span class="k">if</span> ! pgrep -f dboxsync; <span class="k">then</span>
</span><span class="line"><span class="k">  </span>sudo -u xbian nice -n 10 /home/xbian/dboxsync.rb &amp;
</span><span class="line"><span class="k">fi</span>
</span></code></pre></div></figure></notextile></div>

<p>There’s more proper ways of doing this, but this seemed the simplest.</p>

<h2 id="todo">todo</h2>

<ul>
  <li>increase polling delay, but add detection of local changes to initiate push/pull</li>
</ul>

<h2 id="notes">notes</h2>

<p>While cron or similar could be used to run dbox periodically, each separate invocation of dbox from the command line incurs a startup delay of a few seconds, during which time the Pi’s CPU is maxed out loading ruby and the code needed to run dbox.  This isn’t ideal and would likely cause issues if the Pi is used as a media player.</p>

<p>The sample_polling_script accesses dbox directly though it’s ruby API, and doesn’t exit during each polling interval.  Therefore, code remains cached in memory<sup id="fnref:mem"><a href="#fn:mem" rel="footnote">2</a></sup> and the delay occurs only once upon startup; this is a great advantage over running the command line version periodically.</p>

<h1 id="alternatives">alternatives</h1>

<p>Here’s some more options I considered, in order of decreasing usefulness.</p>

<h2 id="one-way-sync">one way sync</h2>

<p>Create a simple ruby script to sync files one way - <em>from Dropbox</em> - using the Dropbox SDK.  It’s also possible to sync both ways in ruby, but <a href="https://github.com/kenpratt/dbox">dbox</a> has already done a great job implementing that.</p>

<p>Ruby SDK <a href="https://www.dropbox.com/developers/start/setup#ruby">Tutorial</a>, <a href="https://www.dropbox.com/static/developers/dropbox-ruby-sdk-1.5.1-docs/index.html">Documentation</a>.</p>

<p>eg. See the <a href="https://www.dropbox.com/static/developers/dropbox-ruby-sdk-1.5.1-docs/DropboxClient.html#method-i-delta">delta method</a> to keep local files in sync without writing too much code.</p>

<p>There’s also the cli_example.rb script included in the SDK, which provides a simple shell interface similar to FTP but does not have any syncing logic included.</p>

<h2 id="linux-daemon">linux daemon</h2>

<p>Dropbox does have a download for a daemon, but it’s x86/_64 only; see the <a href="https://www.dropbox.com/install?os=lnx">Linux Download</a> page for more info.</p>

<blockquote>
  <p>The Dropbox daemon works fine on all 32-bit and 64-bit Linux servers. To install, run the following command in your Linux terminal.</p>
</blockquote>

<h2 id="build-from-source">build from source</h2>

<p>The Dropbox source appears to be just a plugin for the nautilus file browser (and doesn’t include the above daemon?).  This is only useful when using the desktop.</p>

<p>Download the <a href="https://www.dropbox.com/download?dl=packages/nautilus-dropbox-1.4.0.tar.bz2">source archive</a> and build as usual.  More details can be found in <a href="https://www.dropbox.com/help/247">this help topic</a>.</p>

<h2 id="use-something-else">use something else</h2>

<p>I also use github, sftp, scp, and rsync for file transfer, version history and keeping various things in sync; there are many ways to achieve automatic folder syncing.  However, Dropbox fulfills a role that can’t easily be duplicated if you use many Dropbox enabled mobile apps, and do not wish the Pi to rely upon a second computer to sync through.</p>
<div class="footnotes">
  <ol>
    <li id="fn:dl">
      <p>the script is also included in the installed gem:  <code>cp /var/lib/gems/1.9.1/gems/dbox-0.7.2/sample_polling_script.rb dboxsync.rb</code><a href="#fnref:dl" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:mem">
      <p>memory usage starts at ~8MB after startup, and evens out to ~12MB after many polling loops; polling takes a second or two, during which CPU usage is around 5%, peaking at ~12%.  Contrast with the CLI version which uses a similar amount of memory, but takes several seconds to complete each sync, and includes the overhead of almost total CPU usage for half that time.<a href="#fnref:mem" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Home Theatre Pi (HTPi)]]></title>
    <link href="http://jmeosbn.github.io/blog/baking-the-pi/"/>
    <updated>2012-12-17T19:13:00+00:00</updated>
    <id>http://jmeosbn.github.io/blog/baking-the-pi</id>
    <content type="html"><![CDATA[<p>A collection of notes for setting up a clean image of <a href="http://www.xbian.org">XBian</a> (1.0 Beta 1) on the Raspberry Pi.</p>

<!-- more -->

<p>Jump to <a href="#first-login-tasks">first login tasks</a> if you have already set up terminal access to the Pi.</p>

<ul id="markdown-toc">
  <li><a href="#connecting-to-the-pi">Connecting to the Pi</a></li>
  <li><a href="#pre-setup-on-pc-laptop-etc">Pre-setup; on PC, laptop, etc.</a></li>
  <li><a href="#transfer-files">Transfer files</a></li>
  <li><a href="#first-login-tasks">First login tasks</a></li>
  <li><a href="#change-hostname">Change Hostname</a></li>
  <li><a href="#fake-a-hardware-clock">Fake a hardware clock</a></li>
  <li><a href="#link-settings-to-root-profile">Link settings to root profile</a></li>
  <li><a href="#generate-new-rsa-host-keys">Generate new RSA host keys</a></li>
  <li><a href="#configure-wifi-and-bluetooth">Configure WiFi and Bluetooth</a></li>
  <li><a href="#ttl-serial-console">TTL serial console</a></li>
  <li><a href="#build-and-install-wiringpi">Build and install WiringPi</a></li>
  <li><a href="#remove-the-desktop-environment">Remove the desktop environment</a></li>
  <li><a href="#install-mono">Install Mono</a></li>
  <li><a href="#install-aircrack-and-related-tools">Install aircrack and related tools</a></li>
  <li><a href="#regional-system-settings">Regional system settings</a></li>
  <li><a href="#install-dbox-dropbox-tool">Install dbox (dropbox tool)</a></li>
  <li><a href="#setup-xbmc">Setup XBMC</a></li>
  <li><a href="#useful-extras-not-always-used">Useful extras, not always used</a></li>
  <li><a href="#troubleshooting-and-backup">Troubleshooting and backup</a></li>
  <li><a href="#not-used-with-recent-versions">Not used with recent versions</a></li>
</ul>

<h2 id="connecting-to-the-pi">Connecting to the Pi</h2>

<p>XBian names the default user account <code>xbian</code>, other distributions normally use <code>pi</code>.  The default password is <code>raspberry</code>.  XBian includes support for zeroconfig (via avahi-daemon), so it’s easier to find your Pi on the network<sup id="fnref:hostname"><a href="#fn:hostname" rel="footnote">1</a></sup>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># login using zeroconfig</span>
</span><span class="line">ssh xbian@xbian.local
</span></code></pre></div></figure></notextile></div>

<p>If zeroconfig can’t be used, you can <a href="#find-the-ip-address">find the Pi’s network IP address</a> and use that to login.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># login using IP address</span>
</span><span class="line">ssh xbian@192.168.1.10
</span><span class="line">
</span><span class="line"><span class="c"># login as user pi on raspbian</span>
</span><span class="line">ssh pi@192.168.1.10
</span></code></pre></div></figure></notextile></div>

<p><em>Note: If multiple Pis are active on the same network, they should be given <a href="#change-hostname">unique hostnames</a>.</em></p>

<h2 id="pre-setup-on-pc-laptop-etc">Pre-setup; on PC, laptop, etc.</h2>

<p>Before setting up the Pi remotely, there are some things to do locally to ease logging in when using SSH.  This will obviate the need to enter a password, or specify the full host name each time we access the Pi.</p>

<h3 id="copy-public-key-to-pi">Copy public key to Pi</h3>

<p>If generating a new key pair, accept the default key location as suggested by <code>ssh-keygen</code> below.  While a passphrase is optional, anyone can use a copy of the unencrypted private key to authenticate with your identity.  Many operating systems are preconfigured to use <code>ssh-agent</code> or a similar utility, to avoid having to enter a passphrase multiple times (if at all).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># generate a key pair if none already exists</span>
</span><span class="line"><span class="nb">test</span> -f ~/.ssh/id_rsa.pub <span class="o">||</span> ssh-keygen
</span><span class="line">
</span><span class="line"><span class="c"># remove any old, conflicting host entries</span>
</span><span class="line">ssh-keygen -R xbian.local
</span><span class="line">
</span><span class="line"><span class="c"># password is required until the key is installed</span>
</span><span class="line">ssh-copy-id xbian@xbian.local
</span></code></pre></div></figure></notextile></div>

<p>The easiest way to append a key to the remote user’s <code>~/.ssh/authorized_keys</code> file is to use <code>ssh-copy-id</code> as shown above.  Download <a href="http://hg.mindrot.org/openssh/raw-file/tip/contrib/ssh-copy-id">ssh-copy-id</a> from source if your system doesn’t already have it (<a href="http://www.commandlinefu.com/commands/view/10228/...if-you-have-sudo-access-you-could-just-install-ssh-copy-id-mac-users-take-note.-this-is-how-you-install-ssh-copy-id-">installation instructions</a>), this <a href="http://www.commandlinefu.com/commands/view/188/copy-your-ssh-public-key-to-a-server-from-a-machine-that-doesnt-have-ssh-copy-id">alternative method</a> should also work in most situations.</p>

<h3 id="add-an-alias-to-sshconfig">Add an alias to .ssh/config</h3>

<p>Locally define the alias <code>xb</code>, to be used in place of <code>xbian@xbian.local</code> with commands such as <code>ssh xb</code> and <code>sftp xb</code>.  Enter the text below as a single command, or manually paste the quoted text into <code>~/.ssh/config</code> using <code>nano</code> or similar (the IP address can be used for Hostname if preferred).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="nb">echo</span> <span class="s1">&#39;</span>
</span><span class="line"><span class="s1">Host xb</span>
</span><span class="line"><span class="s1">  User  xbian</span>
</span><span class="line"><span class="s1">  Hostname  xbian.local&#39;</span> &gt;&gt; ~/.ssh/config
</span></code></pre></div></figure></notextile></div>

<h2 id="transfer-files">Transfer files</h2>

<p>If you have previous files from your Pi stored locally, you can transfer them using <code>sftp</code>, <code>scp</code>, etc.  For easily transferring many arbitrary files , a GUI sftp client is recommended.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># connect to the pi, using the `xb` alias defined above</span>
</span><span class="line">sftp xb
</span><span class="line">sftp&gt; put .bash_aliases
</span><span class="line">sftp&gt; <span class="nb">exit</span>
</span><span class="line">
</span><span class="line"><span class="c"># you can also use ctlr+d to logout</span>
</span></code></pre></div></figure></notextile></div>

<h2 id="first-login-tasks">First login tasks</h2>

<p>Most of the commands below need root privileges on the Pi, as they alter the system configuration.  To run a single command with root privileges, prepend the <code>sudo</code> command to it.  To run many commands this way without typing <code>sudo</code> each time, first start a root shell with <code>sudo -s</code>; <em>remember to logout with ‘exit’ or ctrl+d when finished</em>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># Login to the pi, using the `xb` alias</span>
</span><span class="line">ssh xb
</span><span class="line">
</span><span class="line"><span class="c"># xbian-config may run here, set it up as you like then exit</span>
</span><span class="line">
</span><span class="line"><span class="c"># Disable autorun of xbian-config</span>
</span><span class="line"><span class="c"># Use &#39;sudo xbian-config&#39; to run manually</span>
</span><span class="line"><span class="nb">echo </span>0 &gt; .xbian-config-start
</span><span class="line">
</span><span class="line"><span class="c"># Disable the login message</span>
</span><span class="line">touch ~/.hushlogin
</span><span class="line">
</span><span class="line"><span class="c"># Disable setting of the terminal title</span>
</span><span class="line">sed -i <span class="s1">&#39;/PS1=.*\][0-2];/s/^/##/&#39;</span> ~/.bashrc
</span><span class="line">
</span><span class="line"><span class="c"># Use a root shell for the following commands</span>
</span><span class="line">sudo -s
</span><span class="line">
</span><span class="line"><span class="c"># Change password for root and xbian users</span>
</span><span class="line">passwd <span class="o">&amp;&amp;</span> passwd xbian
</span><span class="line">
</span><span class="line"><span class="c"># Allow full use of sudo without needing password</span>
</span><span class="line"><span class="c"># note: XBian 1.0a4 made this much less essential</span>
</span><span class="line"><span class="nb">echo</span> <span class="s1">&#39;%sudo  ALL=(ALL) NOPASSWD: ALL&#39;</span> &gt;&gt; /etc/sudoers
</span><span class="line">
</span><span class="line"><span class="c"># Allow boot partition to be mounted</span>
</span><span class="line">sed -i <span class="s1">&#39;/\s\/boot\s/s/,noauto//&#39;</span> /etc/fstab
</span><span class="line">
</span><span class="line"><span class="c"># Update packages</span>
</span><span class="line">apt-get update <span class="o">&amp;&amp;</span> apt-get upgrade
</span><span class="line">
</span><span class="line"><span class="c"># Install some utilities and services</span>
</span><span class="line">apt-get install p7zip zip curl mediainfo avahi-daemon iw
</span><span class="line">
</span><span class="line"><span class="c"># Install gcc compiler, dev tools</span>
</span><span class="line">apt-get install gcc make git-core
</span><span class="line">
</span><span class="line"><span class="c"># Install scripting tools</span>
</span><span class="line">apt-get install ruby ruby-dev ri libsqlite3-dev npm
</span><span class="line"><span class="c"># Fix node binary being named nodejs</span>
</span><span class="line"><span class="nb">cd</span> /usr/bin; sudo ln -s nodejs node; <span class="nb">cd</span>
</span><span class="line">
</span><span class="line"><span class="c"># Install rmate for TextMate editing over ssh</span>
</span><span class="line">gem install rmate
</span></code></pre></div></figure></notextile></div>

<h2 id="change-hostname">Change Hostname</h2>

<p>If it’s likely the Pi won’t be the only one using the local network, then it should be given a unique host name.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">nano /etc/hostname               <span class="c"># enter the desired name</span>
</span><span class="line">nano /etc/hosts                  <span class="c"># replace the hostname</span>
</span><span class="line">/etc/init.d/hostname.sh start    <span class="c"># to enable the changes</span>
</span></code></pre></div></figure></notextile></div>

<h2 id="fake-a-hardware-clock">Fake a hardware clock</h2>

<p>The Pi doesn’t have a real time clock, so it usually defaults to some point in the past until the time can be set correctly using the Internet.  To make the clock more consistent across power cycles, it can be initialised using the last recorded date and time.  <em>(note: previous distros required the <a href="#fake-a-hardware-clock-unabridged">unabridged instructions</a>.)</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">apt-get install fake-hwclock
</span></code></pre></div></figure></notextile></div>

<h2 id="link-settings-to-root-profile">Link settings to root profile</h2>

<p>Occasionally you’ll want to use a root shell, and then be annoyed that your aliases etc. are not configured for the root user.  You can either copy the profile files into ~/root or, as shown here, link them symbolically so that any future modifications will be reflected.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># change to the home folder you want to link from</span>
</span><span class="line"><span class="nb">cd</span> ~xbian
</span><span class="line">
</span><span class="line"><span class="c"># define a list of dot files to link</span>
</span><span class="line"><span class="nv">dotfiles</span><span class="o">=</span><span class="s2">&quot;.profile .bashrc .bash_aliases .bash_logout .nanorc .toprc .gemrc&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c"># link each existing file into the root user&#39;s home folder</span>
</span><span class="line"><span class="k">for </span>i in <span class="nv">$dotfiles</span>; <span class="k">do</span> <span class="o">[</span> -f <span class="nv">$i</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> sudo ln -sfv ~+/<span class="nv">$i</span> ~root/; <span class="k">done</span>
</span><span class="line">
</span><span class="line"><span class="c"># hush login message</span>
</span><span class="line">sudo touch ~root/.hushlogin
</span></code></pre></div></figure></notextile></div>

<h2 id="generate-new-rsa-host-keys">Generate new RSA host keys</h2>

<p>These keys confirm the identity of the Pi, to prevent a malicious host from intercepting the remote login process.  Not so important for your HTPi, but good standard security practice.  Also recommended if you have <a href="#change-hostname">more than one Pi</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">rm /etc/ssh/ssh_host_*
</span><span class="line">dpkg-reconfigure openssh-server
</span><span class="line">
</span><span class="line"><span class="c"># remove old host key from clients using:</span>
</span><span class="line"><span class="c"># ssh-keygen -R xbian.local</span>
</span></code></pre></div></figure></notextile></div>
<!--
ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key
ssh-keygen -t rsa1 -f /etc/ssh/ssh_host_key
-->

<p>If you’re using dropbear instead of openssh, then use:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">rm -f /etc/dropbear/dropbear/dropbear_*
</span><span class="line">dropbearkey -t rsa -f /etc/dropbear/dropbear_rsa_host_key
</span><span class="line">dropbearkey -t rsa -f /etc/dropbear/dropbear_rsa_host_key
</span><span class="line">/etc/init.d/dropbear restart
</span></code></pre></div></figure></notextile></div>

<h2 id="configure-wifi-and-bluetooth">Configure WiFi and Bluetooth</h2>

<p>XBian now includes simple WiFi configuration as part of the xbian-config setup menu.  See the <a href="#manually-configure-wifi-adapter">manual configuration</a> if you want finer control over the network settings (e.g. connecting to multiple networks).</p>

<p>My bluetooth adapter is not supported in the current build of Raspbian/XBian, but <a href="#configure-bluetooth-adapter">here is the procedure</a> I used when trying to get it running (confirmed working on a laptop running Ubuntu).</p>

<h2 id="ttl-serial-console">TTL serial console</h2>

<p>The display of full screen terminal programs becomes corrupted when using a TTL to USB serial connection to the Pi from Mac OS X.  Changing the terminal type enables use of programs such as <code>nano</code> and <code>xbian-config</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">sed -i <span class="s1">&#39;/ttyAMA0/s/vt100$/xterm/&#39;</span> /etc/inittab
</span></code></pre></div></figure></notextile></div>

<h2 id="build-and-install-wiringpi">Build and install WiringPi</h2>

<p><a href="https://projects.drogon.net/raspberry-pi/wiringpi">WiringPi</a> is a library to access the Pi’s GPIO, SPI, and I2C headers, modelled on the Arduino Wiring system.  It also includes the <code>gpio</code> utility for use of the libraries from the command prompt.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">apt-get install gcc make git-core libi2c-dev
</span><span class="line">git clone git://git.drogon.net/wiringPi
</span><span class="line"><span class="nb">cd </span>wiringPi; ./build
</span><span class="line">
</span><span class="line"><span class="c"># test with gpio utility</span>
</span><span class="line">gpio readall
</span><span class="line">
</span><span class="line"><span class="c"># install ruby gem (optional)</span>
</span><span class="line">gem install wiringpi
</span></code></pre></div></figure></notextile></div>

<h2 id="remove-the-desktop-environment">Remove the desktop environment</h2>

<p>If you only plan to run the terminal environment (including self-hosted programs such as XBMC), then a lot of space can be recovered by removing x11 and related packages.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># desktop</span>
</span><span class="line">apt-get purge x11-common libx11-.* lxde-icon-theme xkb-data
</span><span class="line">apt-get purge fonts-freefont-ttf libraspberrypi0
</span><span class="line">
</span><span class="line"><span class="c"># cleaning up</span>
</span><span class="line"><span class="o">(</span><span class="nb">cd</span> ~pi; rm -rf Desktop python_games ocr_pi.png<span class="o">)</span>
</span><span class="line">apt-get autoremove
</span><span class="line">apt-get clean
</span></code></pre></div></figure></notextile></div>

<p><em>Note: this task is not normally required for distros such as xbian.</em></p>

<h2 id="install-mono">Install Mono</h2>

<p>Install Mono development tools, runtime, and interactive shell.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">apt-get install mono-devel mono-csharp-shell
</span></code></pre></div></figure></notextile></div>

<h2 id="install-aircrack-and-related-tools">Install aircrack and related tools</h2>

<p>Taken from <a href="http://blog.petrilopia.net/linux/raspberry-pi-install-aircrackng-suite/">blog.petrilopia.net</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">apt-get -y install iw reaver
</span><span class="line">apt-get -y install libssl-dev libnl-3-dev libnl-genl-3-dev
</span><span class="line">wget http://download.aircrack-ng.org/aircrack-ng-1.2-beta3.tar.gz
</span><span class="line">tar -zxvf aircrack-ng-1.2-beta3.tar.gz
</span><span class="line"><span class="nb">cd </span>aircrack-ng-1.2-beta3
</span><span class="line">make
</span><span class="line">make install
</span></code></pre></div></figure></notextile></div>

<h3 id="using-reaver">Using Reaver</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">apt-get install reaver
</span><span class="line">
</span><span class="line"><span class="c"># put wifi device into monitor mode</span>
</span><span class="line">airmon-ng start wlan0
</span><span class="line">
</span><span class="line"><span class="c"># list available networks</span>
</span><span class="line">airodump-ng wlan0
</span><span class="line"><span class="c"># airodump-ng mon0</span>
</span><span class="line">
</span><span class="line"><span class="c"># set bssid to target network name</span>
</span><span class="line"><span class="nv">bssid</span><span class="o">=</span><span class="s2">&quot;setthistobssid&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c"># start reaver</span>
</span><span class="line">reaver -i mon0 -b <span class="s2">&quot;$bssid&quot;</span> -vv
</span></code></pre></div></figure></notextile></div>

<h2 id="regional-system-settings">Regional system settings</h2>

<p>Both XBian and Raspbian have system setup menus, but neither seem to setup the console keyboard correctly for the en_GB layout.  The current solution I use is to install <code>keyboard-configuration</code>, which only seems to work once <code>console-setup</code> is also installed.</p>

<p><em>The latter package will change the console font, but this can be reverted during the commands shown below. Just choose the font you prefer, or choose ‘Do not change the boot/kernel font’.</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># Packages needed to change keyboard layout</span>
</span><span class="line">apt-get install console-setup keyboard-configuration
</span><span class="line">
</span><span class="line"><span class="c"># Configure keyboard settings</span>
</span><span class="line">dpkg-reconfigure keyboard-configuration
</span><span class="line">
</span><span class="line"><span class="c"># Configure console font</span>
</span><span class="line"><span class="c"># accept the defaults until the font selection screen</span>
</span><span class="line">dpkg-reconfigure console-setup
</span><span class="line">
</span><span class="line"><span class="c"># Configure time zone and locale</span>
</span><span class="line">dpkg-reconfigure tzdata
</span><span class="line">dpkg-reconfigure locales
</span></code></pre></div></figure></notextile></div>

<h2 id="install-dbox-dropbox-tool">Install dbox (dropbox tool)</h2>

<p>Follow the <a href="https://github.com/kenpratt/dbox">dbox installation instructions</a> to set up the dropbox sdk developer keys and authorisation tokens.  To use dbox for automatic folder syncing, see my post: <a href="http://jmeosbn.github.io/blog/pi-box/">Dropbox on Pi</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">apt-get install gcc make ruby ruby-dev libsqlite3-dev
</span><span class="line">gem install dbox
</span></code></pre></div></figure></notextile></div>

<h2 id="setup-xbmc">Setup XBMC</h2>

<h3 id="xbmc-extensions">XBMC Extensions</h3>

<p>Use <code>wget</code> to download the latest versions from the links below, then open the zip files directly from xbmc’s addons page.</p>

<ul>
  <li><a href="http://code.google.com/p/xbmc-iplayerv2/downloads/list">http://code.google.com/p/xbmc-iplayerv2/downloads/list</a></li>
  <li><a href="http://code.google.com/p/mossy-xbmc-repo/downloads/list">http://code.google.com/p/mossy-xbmc-repo/downloads/list</a></li>
  <li><a href="http://code.google.com/p/xbmc-itv-player/downloads/list">http://code.google.com/p/xbmc-itv-player/downloads/list</a></li>
</ul>

<h3 id="xbmc-settings">XBMC Settings</h3>

<p>If you are storing media in the root folder of an NTFS formatted hard drive, you may see some system folders while using the video/audio file views.  You can hide these system folders, change other advanced xbmc behaviour, or preset/lock standard settings in <a href="http://wiki.xbmc.org/?title=Advancedsettings.xml">advancedsettings.xml</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>~/.xbmc/userdata/advancedsettings.xml</span></figcaption><div class="highlight"><pre><code class="xml"><span class="line"><span class="nt">&lt;video&gt;</span>
</span><span class="line">    <span class="c">&lt;!-- hide system folders from the video files view --&gt;</span>
</span><span class="line">    <span class="c">&lt;!-- you could also add these to &#39;excludefromscan&#39; --&gt;</span>
</span><span class="line">    <span class="nt">&lt;excludefromlisting&gt;</span>
</span><span class="line">        <span class="nt">&lt;regexp&gt;</span>(\$RECYCLE.BIN|System Volume Information)<span class="nt">&lt;/regexp&gt;</span>
</span><span class="line">    <span class="nt">&lt;/excludefromlisting&gt;</span>
</span><span class="line"><span class="nt">&lt;/video&gt;</span>
</span><span class="line"><span class="nt">&lt;audio&gt;</span>
</span><span class="line">    <span class="c">&lt;!-- do likewise for the audio files view --&gt;</span>
</span><span class="line">    <span class="nt">&lt;excludefromlisting&gt;</span>
</span><span class="line">        <span class="nt">&lt;regexp&gt;</span>(\$RECYCLE.BIN|System Volume Information)<span class="nt">&lt;/regexp&gt;</span>
</span><span class="line">    <span class="nt">&lt;/excludefromlisting&gt;</span>
</span><span class="line"><span class="nt">&lt;/audio&gt;</span>
</span></code></pre></div></figure></notextile></div>

<h2 id="useful-extras-not-always-used">Useful extras, not always used</h2>

<p>Stuff used infrequently, or currently being tested</p>

<h3 id="packages-from-raspbian">Packages from Raspbian</h3>

<p>Some standard packages that are usually excluded from the xbian distro, as they are not required for use of xbmc only.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">apt-get install omxplayer
</span><span class="line">
</span><span class="line"><span class="c"># included on xbian &gt;= 1.0b</span>
</span><span class="line">apt-get install psmisc usbutils
</span></code></pre></div></figure></notextile></div>

<h3 id="other-useful-packages">Other useful packages</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">apt-get install fs2resize exfat-fuse
</span><span class="line">apt-get install clang geany
</span><span class="line">apt-get install sysv-rc-conf
</span></code></pre></div></figure></notextile></div>

<h3 id="find-the-ip-address">Find the IP address</h3>

<p>You can get the IP address from your Pi, by running either of the following commands locally on the device.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">ip r | grep -o <span class="s1">&#39;src.*&#39;</span>
</span><span class="line">
</span><span class="line">ifconfig 2&gt;&amp;1 | grep cast | grep -o <span class="s1">&#39;inet [^ ]*&#39;</span>
</span></code></pre></div></figure></notextile></div>

<p>Connect to the address that has the same subnet (starts similar) as the IP address you will be connecting from, ignoring the localhost address (127.0.0.1).</p>

<p>If it isn’t possible to run a command locally on the Pi (e.g. there is no monitor or keyboard attached), you can either <a href="http://www.recantha.co.uk/blog/?p=2397">scan the network</a>, run <code>nmap 192.168.0.1/24 -p 22</code>, or view ‘Attached Devices’ in your Router’s setup.  Look for a matching hostname or MAC address (which will start with <code>b8:27:eb</code> for the on-board LAN).</p>

<h3 id="manually-configure-wifi-adapter">Manually configure WiFi adapter</h3>

<p><a href="http://www.savagehomeautomation.com/raspi-airlink101">Instructions adapted from here</a>.</p>

<p>Use <code>lsusb</code> to check that the adapter is recognised, and <code>lsmod</code> to check the kernel module (e.g. <code>8192cu</code>) is loaded.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">sudo nano /etc/network/interfaces
</span></code></pre></div></figure></notextile></div>

<p>Make sure the following lines exist in the interfaces file, adding them as needed:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">allow-hotplug wlan0
</span><span class="line">iface wlan0 inet manual
</span><span class="line">wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf
</span></code></pre></div></figure></notextile></div>

<p>You may have the line <code>wireless-power off</code> in this file, which relates to power <strong><em>management</em></strong> only.  I’ve commented it out as it resulted in errors logged during <code>ifup</code> and power management remained off without it.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">sudo nano /etc/wpa_supplicant/wpa_supplicant.conf
</span></code></pre></div></figure></notextile></div>

<p>Add your network details to wpa_supplicant.conf, using the following template:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="nv">network</span><span class="o">={</span>
</span><span class="line">  <span class="nv">ssid</span><span class="o">=</span><span class="s2">&quot;YOUR-NETWORK-SSID&quot;</span>
</span><span class="line">  <span class="nv">proto</span><span class="o">=</span>WPA2
</span><span class="line">  <span class="nv">key_mgmt</span><span class="o">=</span>WPA-PSK
</span><span class="line">  <span class="nv">pairwise</span><span class="o">=</span>CCMP TKIP
</span><span class="line">  <span class="nv">group</span><span class="o">=</span>CCMP TKIP
</span><span class="line">  <span class="nv">psk</span><span class="o">=</span><span class="s2">&quot;YOUR-WLAN-PASSWORD&quot;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></div></figure></notextile></div>

<p>Reinitialise the adapter, and check it’s connected.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">sudo ifdown wlan0
</span><span class="line">sudo ifup wlan0
</span><span class="line"><span class="c"># you may get some errors here, even when successful</span>
</span></code></pre></div></figure></notextile></div>

<p>Use <code>iwconfig</code> to view wifi adapter info and <code>ifconfig</code> for general network info.</p>

<h3 id="configure-bluetooth-adapter">Configure bluetooth adapter</h3>

<p><a href="http://www.ctheroux.com/2012/08/a-step-by-step-guide-to-setup-a-bluetooth-keyboard-and-mouse-on-the-raspberry-pi/">Adapted from ctheroux</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># install bluetooth support and dependencies</span>
</span><span class="line">agi bluez python-gobject  <span class="c"># minimal?</span>
</span><span class="line">agi bluetooth bluez-utils  <span class="c"># full</span>
</span><span class="line">
</span><span class="line"><span class="c"># for management from the desktop</span>
</span><span class="line">agi blueman
</span><span class="line">
</span><span class="line"><span class="c"># check adapter is working*</span>
</span><span class="line">hcitool dev
</span><span class="line">
</span><span class="line"><span class="c"># scan for devices</span>
</span><span class="line">hcitool scan
</span><span class="line">
</span><span class="line"><span class="c"># pair with device, using the address listed from scan</span>
</span><span class="line">bluez-simple-agent hci0 XX:XX:XX:XX:XX:XX
</span><span class="line">
</span><span class="line"><span class="c"># trust the device</span>
</span><span class="line">bluez-test-device trusted XX:XX:XX:XX:XX:XX yes
</span><span class="line">
</span><span class="line"><span class="c"># connect to input device</span>
</span><span class="line">bluez-test-input hci0 XX:XX:XX:XX:XX:XX
</span><span class="line">
</span><span class="line"><span class="c"># adapter status</span>
</span><span class="line">hciconfig
</span></code></pre></div></figure></notextile></div>

<p><em>*Note: a bluetooth adapter may be listed in <code>lsusb</code> and <code>hciconfig</code>, without being recognised by <code>hcitool</code>. This is the case with the belkin dongle I have, so use <code>hcitool</code> to check that a device is working properly.</em></p>

<h3 id="testing-pvr">Testing PVR</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">apt-get install vdr-plugin-dvbsddevice
</span></code></pre></div></figure></notextile></div>

<h3 id="setup-webcam">Setup webcam</h3>

<p>Use ‘motion’ or ‘fswebcam’, motion may need a default cfg copying</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">apt-get install motion
</span><span class="line">cp /etc/default/motion /etc/motion/motion.conf
</span></code></pre></div></figure></notextile></div>

<h2 id="troubleshooting-and-backup">Troubleshooting and backup</h2>

<p>Some useful commands and procedures</p>

<h3 id="quick-tips">Quick Tips</h3>

<ul>
  <li>You can detect hdmi audio modes: <code>/opt/vc/bin/tvservice -a</code></li>
  <li>Setup CEC remote over hdmi from console: <code>cec-config</code></li>
</ul>

<h3 id="backup-settings">Backup settings</h3>

<ul>
  <li>Settings, addons etc. are in ~/.xbmc</li>
  <li>.xbmc/userdata - preferences etc</li>
  <li>.xbmc/addons - binaries, themes</li>
  <li>.xbmc/addons/packages - original downloads, can use with “install from zip”</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># backup profile settings</span>
</span><span class="line">zip -FS -ry xbmc .xbmc/
</span><span class="line">zip -FS -ry dotfiles .bash_aliases .nanorc .toprc .ssh
</span><span class="line">
</span><span class="line"><span class="c"># backup system config files</span>
</span><span class="line">sudo zip -FS -ry basecfg /etc/wpa_supplicant/wpa_supplicant.conf
</span></code></pre></div></figure></notextile></div>

<p>Or using tar..</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># backup profile settings</span>
</span><span class="line">tar -czf xbmc-backup.tar.gz .xbmc
</span><span class="line">
</span><span class="line"><span class="c"># restore profile settings</span>
</span><span class="line">sudo initctl stop xbmc
</span><span class="line">tar -xzf xbmc-backup.tar.gz
</span><span class="line">sudo initctl start xbmc
</span></code></pre></div></figure></notextile></div>

<!-- endofpost -->

<h2 id="not-used-with-recent-versions">Not used with recent versions</h2>

<p>Previously useful functionality or workarounds</p>

<h3 id="clear-cached-network-adapter">Clear cached network adapter</h3>

<p>(needed for switching cards between devices)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="nb">echo</span> | sudo tee /etc/udev/rules.d/70-persistent-net.rules
</span></code></pre></div></figure></notextile></div>

<h3 id="fake-a-hardware-clock-unabridged">Fake a hardware clock (unabridged)</h3>

<p>More complicated instructions, as used on previous versions of XBian.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">touch /etc/init.d/hwclock.sh
</span><span class="line">/etc/init.d/ntp restart
</span><span class="line">apt-get install ntpdate fake-hwclock
</span><span class="line">ntpdate-debian
</span><span class="line">dpkg-reconfigure tzdata
</span><span class="line">sed -i <span class="s1">&#39;s/^exit 0/ntpdate-debian\nexit 0/g&#39;</span> /etc/rc.local
</span></code></pre></div></figure></notextile></div>

<h3 id="fix-ssh-access-using-public-key">Fix ssh access using public key</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># must be owned by root</span>
</span><span class="line">chown root: ~ ~/.ssh
</span><span class="line"><span class="c"># no write for others</span>
</span><span class="line">chmod <span class="nv">a</span><span class="o">=</span>rx,u+w  ~
</span><span class="line">
</span><span class="line"><span class="c"># no access for others</span>
</span><span class="line">chmod -R go-rwx ~/.ssh
</span><span class="line"><span class="c"># public key can be readable</span>
</span><span class="line">chmod a+r ~/.ssh/id_rsa.pub
</span></code></pre></div></figure></notextile></div>

<h3 id="download-openssh-sftp-server">Download OpenSSH sftp server</h3>

<p>If sftp is not already on your system (such as when using dropbear), it can’t be installed
manually without installing the entire openssh package.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">apt-get download openssh-server
</span><span class="line">dpkg-deb -X openssh-server_*.deb sftp
</span><span class="line">cp sftp/usr/lib/openssh/sftp-server /usr/lib/
</span><span class="line">rm -r sftp openssh-server_*.deb
</span></code></pre></div></figure></notextile></div>

<h3 id="update-firmware-without-kernel">Update firmware without kernel</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">wget http://goo.gl/1BOfJ -O /usr/bin/rpi-update <span class="o">&amp;&amp;</span> chmod +x /usr/bin/rpi-update
</span><span class="line"><span class="nv">SKIP_KERNEL</span><span class="o">=</span>1 rpi-update 128
</span></code></pre></div></figure></notextile></div>

<h3 id="allow-xbmc-to-unmount-usb-drives">Allow XBMC to unmount USB drives</h3>

<p>XBian used to include the usbmount package to mount USB devices as soon as they are connected.  This prevented XBMC from bring able to use the udisk service to mount and unmount USB drives itself, due to root privileges being required to unmount devices mounted by usbmount.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># disable the usbmount package</span>
</span><span class="line">sed -i <span class="s1">&#39;/ENABLED=/s/=1/=0/&#39;</span> /etc/usbmount/usbmount.conf
</span><span class="line">
</span><span class="line"><span class="c"># optionally remove unused usbmount directories</span>
</span><span class="line"><span class="c"># umount /media/usb*; rmdir /media/usb*; rm /media/usb</span>
</span></code></pre></div></figure></notextile></div>

<p>Drives can be unmounted manually using <code>udisks</code> without needing to be root, and members of the <code>plugdev</code> group can also use <code>pumount</code>.</p>

<h3 id="install-shairport">Install Shairport</h3>

<p>Instructions found <a href="http://tomsolari.id.au/post/27169019561/airplay-music-streaming-on-raspberry-pi">here</a> (alt site <a href="http://cheeftun.appspot.com/trouch.com/2012/08/03/airpi-airplay-audio-with-raspberry/">here</a>)</p>

<p>More recent instructions: http://lifehacker.com/5978594/turn-a-raspberry-pi-into-an-airplay-receiver-for-streaming-music-in-your-living-room</p>

<p>A change in IOS 6 <a href="http://jordanburgess.com/post/38986434391/raspberry-pi-airplay">requires Perl Net-SDP</a> module to installed.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line">git clone https://github.com/njh/perl-net-sdp.git perl-net-sdp
</span><span class="line"><span class="nb">cd </span>perl-net-sdp
</span><span class="line">perl Build.PL
</span><span class="line">sudo ./Build
</span><span class="line">sudo ./Build <span class="nb">test</span>
</span><span class="line">sudo ./Build install
</span><span class="line"><span class="nb">cd</span> ..
</span></code></pre></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># do as root</span>
</span><span class="line">sudo -s
</span><span class="line">apt-get install alsa-utils
</span><span class="line">modprobe snd_bcm2835
</span><span class="line"><span class="c"># optionally set to headphone output</span>
</span><span class="line"><span class="c"># amixer cset numid=3 1</span>
</span><span class="line"><span class="c"># optionally restore to hdmi output</span>
</span><span class="line"><span class="c"># amixer cset numid=3 2</span>
</span><span class="line">apt-get install build-essential libssl-dev libcrypt-openssl-rsa-perl libao-dev libio-socket-inet6-perl libwww-perl avahi-utils pkg-config
</span><span class="line">wget https://github.com/albertz/shairport/zipball/master
</span><span class="line">unzip master
</span><span class="line"><span class="nb">cd </span>albertz-shairport-*
</span><span class="line">make install
</span><span class="line">cp shairport.init.sample /etc/init.d/shairport
</span><span class="line"><span class="c"># add to start of shairport: modprobe snd_bcm2835</span>
</span><span class="line">nano /etc/init.d/shairport
</span><span class="line"><span class="c"># optionally edit name of service (remove port number):</span>
</span><span class="line">nano /usr/local/bin/shairport.pl
</span><span class="line">insserv shairport
</span><span class="line"><span class="c"># manually start [services](http://pi-raspberry.blogspot.co.uk/2012/08/shairport-raspberry-pi.html)</span>
</span><span class="line">service avahi-daemon start
</span><span class="line">/etc/init.d/shairport start
</span><span class="line"><span class="c"># exit root</span>
</span><span class="line"><span class="nb">exit</span>
</span></code></pre></div></figure></notextile></div>

<!--
## Host a WiFi hotspot

If no other WiFi is found, then start a hotspot.  This allows clients to connect
to the Raspberry Pi by WiFi as usual.

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='sh'><span class='line'><span class="c"># Install the busybox DHCP server and Host AP driver</span>
</span><span class='line'>apt-get install udhcpd hostapd
</span><span class='line'>
</span><span class='line'><span class="c"># Enable udhcp</span>
</span><span class='line'>sed -i <span class="s1">&#39;/DHCPD_ENABLED/s/^/# /&#39;</span> /etc/default/udhcpd
</span><span class='line'>
</span><span class='line'><span class="c"># Configure interface to use</span>
</span><span class='line'>sed -i <span class="s1">&#39;/^interface/s/eth0/wlan0/&#39;</span> /etc/udhcpd.conf
</span><span class='line'>
</span><span class='line'><span class="c"># Enable &#39;remaining&#39; option (for devices without rtc)</span>
</span><span class='line'>sed -i <span class="s1">&#39;/^#remaining/s/^#//&#39;</span> /etc/udhcpd.conf
</span></code></pre></div></figure>
 &#8211;>

<!--
## Owncloud - a self hosted dropbox

Using the script provided at [github.com/petrockblog](https://github.com/petrockblog),
install the owncloud dependencies and NGiNX based web app.

Before starting, check the free space available with `df -h /` and ensure there is enough
space available (needs upto 800MB, depends upon existing packages already installed and
includes increasing the swap file to 512MB).

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><pre><code class='sh'><span class='line'><span class="c"># install script dependency</span>
</span><span class='line'>apt-get install dialog
</span><span class='line'>
</span><span class='line'><span class="c"># download script and execute</span>
</span><span class='line'>wget https://github.com/petrockblog/OwncloudPie/raw/master/owncloudpie_setup.sh
</span><span class='line'>chmod +x owncloudpie_setup.sh
</span><span class='line'>./owncloudpie_setup.sh
</span></code></pre></div></figure>

Use option (1) to set the URL (or IP) where the Pi can be accessed.  Then option (2)
for a new install using NGiNX.  For more details on manual setup, or fixing WebDAV issues,
see the [eiosifidis](http://eiosifidis.blogspot.co.uk/2014/06/owncloud-on-raspberry-pi-moebious-nginx.html).
 &#8211;>
<div class="footnotes">
  <ol>
    <li id="fn:hostname">
      <p>It should be possible to connect with the hostname even without zeroconfig, e.g. <code>xbian@xbian</code> or <code>pi@raspberrypi</code> (on raspbian), but I’ve had no luck with this.<a href="#fnref:hostname" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stellaris Virtual Serial Device]]></title>
    <link href="http://jmeosbn.github.io/blog/stellaris-virtual-serial-device/"/>
    <updated>2012-12-10T02:48:00+00:00</updated>
    <id>http://jmeosbn.github.io/blog/stellaris-virtual-serial-device</id>
    <content type="html"><![CDATA[<p>The Stellaris <a href="http://www.ti.com/ww/en/launchpad/stellaris_head.html">Launchpad</a> is able to provide a virtual serial port over the debug USB interface.  Data can be sent in either direction using this serial connection, to interact with program execution, or log it’s output.</p>

<!-- more -->

<h2 id="device-permissions">device permissions</h2>

<p>Root privileges are required to access the device on some Linux and Unix based systems, so remember to use <code>sudo</code> with commands such as <code>lm4flash</code> and <code>ttylog</code> which directly access the device.</p>

<p>Alternatively, on Linux you can configure permissions for the device using udev rules:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="nv">$ </span>sudo nano /etc/udev/rules.d/42-sellaris.rules
</span><span class="line">
</span><span class="line"><span class="c"># add the following lines:</span>
</span><span class="line">ATTRS<span class="o">{</span>product<span class="o">}==</span><span class="s2">&quot;In-Circuit Debug Interface&quot;</span>, <span class="nv">OWNER</span><span class="o">=</span><span class="s2">&quot;devuser&quot;</span> <span class="nv">KERNEL</span><span class="o">==</span><span class="s2">&quot;ttyACM?&quot;</span>
</span></code></pre></div></figure></notextile></div>

<p>The (fairly open) rules shown above, give the user named ‘<em>devuser</em>’ permission to access the launchpad’s usb interface, along with it’s virtual serial device.</p>

<p>Note: these rules should be more specific if you have similar devices that you don’t wish to allow access to inadvertently.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># Exact match for Stellaris LM4F120XL</span>
</span><span class="line"><span class="nv">SUBSYSTEMS</span><span class="o">==</span><span class="s2">&quot;usb&quot;</span>, ATTRS<span class="o">{</span>idVendor<span class="o">}==</span><span class="s2">&quot;1cbe&quot;</span>, ATTRS<span class="o">{</span>idProduct<span class="o">}==</span><span class="s2">&quot;00fd&quot;</span>, <span class="nv">MODE</span><span class="o">=</span><span class="s2">&quot;0660&quot;</span>, <span class="nv">OWNER</span><span class="o">=</span><span class="s2">&quot;devuser&quot;</span>
</span></code></pre></div></figure></notextile></div>

<p>The device in this rule is strictly defined, and read/write permissions have been explicitly set for it.  Also, because the whole device is matched directly (rather than it’s individual interfaces), only one rule is required.  You could also try assigning the device to a group, using <code>GROUP="devgroup"</code>.</p>

<p>To define these rules, the exact name, vendor, and/or product id needs to be known.  You can check these values using <code>dmesg</code> after connecting your device; the lines of interest are shown below.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="nv">$ </span>dmesg
</span><span class="line"><span class="c"># &lt;snip&gt;</span>
</span><span class="line"><span class="o">[</span>39911.201497<span class="o">]</span> usb 1-1.2.3: New USB device found, <span class="nv">idVendor</span><span class="o">=</span>1cbe, <span class="nv">idProduct</span><span class="o">=</span>00fd
</span><span class="line"><span class="o">[</span>39911.201537<span class="o">]</span> usb 1-1.2.3: Product: In-Circuit Debug Interface
</span><span class="line"><span class="o">[</span>39911.201551<span class="o">]</span> usb 1-1.2.3: Manufacturer: Texas Instruments
</span><span class="line"><span class="o">[</span>39911.344575<span class="o">]</span> cdc_acm 1-1.2.3:1.0: ttyACM0: USB ACM device
</span></code></pre></div></figure></notextile></div>

<h2 id="serial-device">serial device</h2>

<p>If you want to use the serial connection to provide input or commands to the launchpad, you’ll need a terminal emulator that can connect to a serial device.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="nv">$ </span><span class="nb">cd </span>stellaris/boards/ek-lm4f120xl/qs-rgb
</span><span class="line"><span class="nv">$ </span>make
</span><span class="line"><span class="nv">$ </span>lm4flash gcc/qs-rgb.bin
</span><span class="line">
</span><span class="line"><span class="c"># Use of screen on linux</span>
</span><span class="line"><span class="nv">$ </span>screen /dev/ttyACM? 115200
</span><span class="line">
</span><span class="line"><span class="c"># Use of screen on mac os x</span>
</span><span class="line"><span class="nv">$ </span>screen /dev/tty.usbmodem* 115200
</span><span class="line">
</span><span class="line"><span class="c"># Kill the connection by typing: ^A k</span>
</span><span class="line"><span class="c">#  to list other commands, type: ^A ?</span>
</span></code></pre></div></figure></notextile></div>

<p>Use of the wildcard in <code>ttyACM?</code> allows for the times the device may get assigned a different number, e.g. when power cycling or reconnecting.  If you have another ttyACM device connected then you should probably use it’s full name.</p>

<p>On OS X the device should be named similar to <code>tty.usbmodem</code>, with the serial number of the device appended.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing the Stellaris Toolchain]]></title>
    <link href="http://jmeosbn.github.io/blog/testing-the-stellaris-toolchain/"/>
    <updated>2012-11-15T20:40:00+00:00</updated>
    <id>http://jmeosbn.github.io/blog/testing-the-stellaris-toolchain</id>
    <content type="html"><![CDATA[<p>Once the <a href="https://github.com/jsnyder/arm-eabi-toolchain">toolchain</a> is <a href="http://jmeosbn.github.io/blog/compiling-the-stellaris-toolchain">installed</a>, here’s the basic steps to compile an example and get the code onto the launchpad.  A mirror for the Stellaris example code and other pieces is available on <a href="https://github.com/yuvadm/stellaris">github</a>.</p>

<!-- more -->

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># Add the toolchain to your profile&#39;s path</span>
</span><span class="line"><span class="c"># Ideally this should go into your bash profile</span>
</span><span class="line"><span class="nv">$ </span><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$HOME</span>/arm-cs-tools/bin:<span class="nv">$PATH</span>
</span><span class="line">
</span><span class="line"><span class="c"># Test the compiler</span>
</span><span class="line"><span class="nv">$ </span>git clone https://github.com/yuvadm/stellaris
</span><span class="line"><span class="nv">$ </span><span class="nb">cd </span>stellaris/boards/ek-lm4f120xl/project0/
</span><span class="line"><span class="nv">$ </span>make clean; make
</span><span class="line">
</span><span class="line"><span class="c"># Flash binary to the board</span>
</span><span class="line"><span class="nv">$ </span>lm4flash gcc/project0.bin
</span><span class="line">
</span><span class="line"><span class="c"># Try making a source modification</span>
</span><span class="line"><span class="nv">$ </span>nano project0.c
</span><span class="line"><span class="nv">$ </span>make <span class="o">&amp;&amp;</span> lm4flash gcc/project0.bin
</span></code></pre></div></figure></notextile></div>

<h2 id="debugging">debugging</h2>

<p><a href="https://github.com/utzig/lm4tools">lm4tools</a> has a bridge to enable TCP over USB, so code running on the device can be debugged using gdb from the compiled toolchain.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="c"># build with debug symbols</span>
</span><span class="line"><span class="nv">$ </span>make clean <span class="o">&amp;&amp;</span> make <span class="nv">DEBUG</span><span class="o">=</span>1
</span><span class="line"><span class="nv">$ </span>lm4flash gcc/project0.bin
</span><span class="line">
</span><span class="line"><span class="c"># start the tcp/usb bridge (in the background)</span>
</span><span class="line"><span class="nv">$ </span>lmicdi &amp;
</span><span class="line">
</span><span class="line"><span class="c"># start gdb and connect to device</span>
</span><span class="line"><span class="nv">$ </span>arm-none-eabi-gdb gcc/project0.axf
</span><span class="line">Reading symbols from ./gcc/project0.axf...done.
</span><span class="line"><span class="o">(</span>gdb<span class="o">)</span> target remote :7777
</span><span class="line">Remote debugging using :7777
</span><span class="line">0x00000494 in SysCtlDelay <span class="o">()</span>
</span><span class="line"><span class="o">(</span>gdb<span class="o">)</span> c
</span><span class="line">Continuing.
</span><span class="line">^C
</span><span class="line"><span class="o">[</span>Thread &lt;main&gt;<span class="o">]</span> <span class="c">#1 stopped.</span>
</span><span class="line">0x00000662 in SysCtlDelay <span class="o">()</span>
</span><span class="line"><span class="o">(</span>gdb<span class="o">)</span> detach
</span><span class="line">Ending remote debugging.
</span><span class="line"><span class="o">(</span>gdb<span class="o">)</span> quit
</span><span class="line">
</span><span class="line"><span class="c"># quit lmicdi to allow use of lm4flash</span>
</span><span class="line"><span class="nv">$ </span>sudo killall lmicdi <span class="c"># or type &#39;fg&#39; followed by ^C</span>
</span></code></pre></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compiling the Stellaris Toolchain]]></title>
    <link href="http://jmeosbn.github.io/blog/compiling-the-stellaris-toolchain/"/>
    <updated>2012-11-15T20:02:00+00:00</updated>
    <id>http://jmeosbn.github.io/blog/compiling-the-stellaris-toolchain</id>
    <content type="html"><![CDATA[<p>If you have a Stellaris <a href="http://www.ti.com/ww/en/launchpad/stellaris_head.html">Launchpad</a> - and don’t want to use the <a href="http://www.ti.com/tool/SW-EK-LM4F120XL">official</a> tools - you can mostly follow the instructions at <a href="http://blog.y3xz.com/blog/2012/10/29/an-open-toolchain-for-the-ti-stellaris/">y3xz</a> to build your own toolchain on any Unix/Linux based system using the <a href="https://github.com/jsnyder/arm-eabi-toolchain">ARM EABI Toolchain Builder</a>.  This includes Mac OS X, but I ran into a couple of minor issues as listed below.</p>

<!-- more -->

<p><em>(If you don’t fancy building the toolchain, <a href="http://www.yagarto.de/">yagarto</a> offers recent binaries for Windows and Mac OS X that target ARM devices.)</em></p>

<p>Note, the libraries included with the Codesourcery Lite <a href="http://www.mentor.com/embedded-software/sourcery-tools/sourcery-codebench/editions/lite-edition">toolchain</a> used here <a href="https://sourcery.mentor.com/GNUToolchain/release2322?@template=datasheet">do not support</a> the hardware FPU of the ARM <a href="http://en.wikipedia.org/wiki/ARM_Cortex-M#Cortex-M4">Cortex-M4F</a>, using software floating point code instead.  There is a <a href="https://github.com/prattmic/arm-cortex-m4-hardfloat-toolchain">hardfloat-toolchain</a> builder (which I’ve not used yet), and ARM is maintaining a <a href="https://launchpad.net/gcc-arm-embedded/+download">GCC toolchain</a> targeting embedded ARM processors, which I’ll probably try building next.</p>

<p>For more details on the launchpad, and the various libraries etc. that it uses, T.I. has a selection of <a href="http://www.ti.com/product/lm4f120h5qr">technical documentation</a> on their site.</p>

<h2 id="toolchain">toolchain</h2>

<p>The makefile failed to download the source archive, so <a href="https://sourcery.mentor.com/GNUToolchain/package10384/public/arm-none-eabi/arm-2012.03-56-arm-none-eabi.src.tar.bz2">download</a> it manually into the root of the toolchain repo.  Make will continue so long as the filename and checksum matches.</p>

<h2 id="lm4tools">lm4tools</h2>

<p>The <code>lm4flash</code> tool included in <a href="https://github.com/utzig/lm4tools/commit/cc466b1">recent</a> versions of <a href="https://github.com/utzig/lm4tools">lm4tools</a> is unable to read the serial number of the device on OS X, so compiled code cannot be flashed to the launchpad device.</p>

<p><strong>Update: The dev has <a href="https://github.com/utzig/lm4tools/commit/99d501b">committed</a> a workaround that fixes <code>lm4flash</code> on OS X.</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="nv">$ </span>./lm4flash project0.bin
</span><span class="line">Unable to get device serial number: LIBUSB_ERROR_OTHER
</span><span class="line">Unable to find any ICDI devices
</span></code></pre></div></figure></notextile></div>

<p>Newer versions of lm4tools require a kernel extension to be installed on OS X (this will prevent access to the virtual serial device), see the <a href="https://github.com/utzig/lm4tools/issues/8">issue</a> on github for more info.  The simplest workaround is to checkout and build commit <a href="https://github.com/utzig/lm4tools/commit/ea3c905">ea3c905</a>, which doesn’t check for the serial number.</p>

<p>Btw, you will get a similar error if your system requires root privileges to access the device directly over usb; try using <code>sudo</code> on linux/unix systems if you have issues.</p>

<h2 id="more-links">more links</h2>

<p><a href="http://hertaville.com/2012/05/28/gcc-arm-toolchain-stm32f0discovery/">Setting up the GCC ARM Toolchain</a> - focuses on using ARM’s <a href="https://launchpad.net/gcc-arm-embedded/+download">GCC toolchain</a> on Windows</p>

<p><a href="http://jmeosbn.github.io/testing-the-stellaris-toolchain">Testing the Stellaris Toolchain</a> - my overview for compiling and testing code on the device.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resources for Using Git]]></title>
    <link href="http://jmeosbn.github.io/blog/resources-for-using-git/"/>
    <updated>2012-09-29T20:35:00+01:00</updated>
    <id>http://jmeosbn.github.io/blog/resources-for-using-git</id>
    <content type="html"><![CDATA[<p>Here’s some basic resources to get started pushing code to github.</p>

<p>Note: As well as computer source code, git is useful for tracking changes to anything that can be represented as plain text, e.g. <a href="http://www.wired.com/wiredenterprise/2012/08/bundestag/">German Law</a>.</p>

<p>The simplest use of git is to create the repo locally, stored in the same folder as the source (known as the working tree) and named <code>.git</code>.</p>

<!-- more -->

<p>To <a href="http://git-scm.com/docs/git-init">initialise</a> a new git repo, simply run <code>git-init</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="nv">$ </span><span class="nb">cd </span>my-project
</span><span class="line"><span class="nv">$ </span>git init
</span><span class="line">Initialized empty Git repository in my-project/.git/
</span></code></pre></div></figure></notextile></div>

<p><a href="http://git-scm.com/docs/git-add">Add</a> any new or changed files you want to track, then <a href="http://git-scm.com/docs/git-commit">commit</a> those changes to the repo.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="nv">$ </span><span class="nb">echo </span>About My-Project &gt; README.md
</span><span class="line"><span class="nv">$ </span>git add . <span class="c"># add all files recursively</span>
</span><span class="line"><span class="nv">$ </span>git commit -m <span class="s1">&#39;First Commit&#39;</span>
</span><span class="line"><span class="o">[</span>master <span class="o">(</span>root-commit<span class="o">)</span> cdab15f<span class="o">]</span> First Commit
</span><span class="line"> 1 file changed, 1 insertion<span class="o">(</span>+<span class="o">)</span>
</span><span class="line"> create mode 100644 README.md
</span></code></pre></div></figure></notextile></div>

<p><a href="http://git-scm.com/docs/git-log">View recent commits</a> using <code>git log</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git log
</span><span class="line">commit cdab15f2036b0b8b1c8fbfceab6357c8e56a0d5f
</span><span class="line">Author: Jamie Osborne &lt;jmeosbn@your-email.com&gt;
</span><span class="line">Date:   Sat Sep 29 23:30:20 2012 +0100
</span><span class="line">
</span><span class="line">    First Commit
</span></code></pre></div></figure></notextile></div>

<h2 id="documentation">documentation</h2>

<p>Git itself can be installed from <a href="http://git-scm.com/downloads">git-scm.com</a> if your OS doesn’t already include it. The same site also hosts a copy of the <a href="http://git-scm.com/docs">documentation</a>, as well as the <a href="http://git-scm.com/book">Pro Git book</a> which is a great place to start learning git.  Pro Git is also available as a commercially <a href="http://www.amazon.com/gp/product/1430218339?ie=UTF8&amp;tag=prgi-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1430218339">printed book</a> from Apress, and as a free <a href="https://github.s3.amazonaws.com/media/progit.epub">ePub</a>, <a href="https://github.s3.amazonaws.com/media/pro-git.en.mobi">mobi</a>, or <a href="https://github.s3.amazonaws.com/media/progit.en.pdf">PDF</a> download.</p>

<p>If you don’t fancy reading an entire book, then this <a href="http://www.vogella.com/articles/Git/article.html">Git Tutorial</a> gets straight to the point for those already familiar with the concepts of version control.  There’s minimal explanatory text, but full command examples for most operations; making it a useful resource for commands you use rarely and need to quickly relearn.</p>

<h2 id="graphical-interfaces">graphical interfaces</h2>

<p>While it’s good to know how to use git from the command line, it’s worth getting a GUI for easier building of commits etc. (you could also integrate it with your favourite editor and diff viewer)</p>

<p><a href="http://github.com/">Github</a> offers their own <a href="http://mac.github.com/">Mac</a> and <a href="http://windows.github.com/">Windows</a> GUI clients, which have the advantage of closer integration with some of github’s features, such as organisations and the “Clone in Windows/Mac” button found on each repo on github.</p>

<p><img src="http://jmeosbn.github.io/blog/resources-for-using-git/promo-screenshot.png" alt="GitHub for Mac" /></p>

<p>They do lack some more advanced features though so I mostly prefer <a href="http://gitx.laullon.com/">GitX</a> on the Mac, though <a href="http://git-scm.com/downloads/guis">plenty more GUIs</a> exist on various platforms.</p>

<p><img src="http://jmeosbn.github.io/blog/resources-for-using-git/commit.png" alt="GitX" /></p>

<h2 id="other-info">other info</h2>

<p>Btw, if you just want to share some code snippets somewhere while maintaining versioning etc., then check out <a href="https://gist.github.com/">gists</a>, a feature of github.</p>
]]></content>
  </entry>
  
</feed>
