<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[git-log(1)]]></title>
  <link href="http://jmeosbn.github.com/atom.xml" rel="self"/>
  <link href="http://jmeosbn.github.com/"/>
  <updated>2013-02-25T20:14:01+00:00</updated>
  <id>http://jmeosbn.github.com/</id>
  <author>
    <name><![CDATA[Jamie Osborne]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dropbox on Pi]]></title>
    <link href="http://jmeosbn.github.com/blog/pi-box/"/>
    <updated>2012-12-19T00:54:00+00:00</updated>
    <id>http://jmeosbn.github.com/blog/pi-box</id>
    <content type="html"><![CDATA[<p>There&#8217;s currently no build of the Dropbox sync client that runs on ARM devices; while there is source available, it&#8217;s not suitable for automatic, unattended sync on a Raspberry Pi that may not have any windowing system installed.</p>

<p>Dropbox does make various SDKs available though, which enables a ruby or python script to be used instead of the official client.</p>

<!-- more -->

<h1 id="a-ready-made-solution">a ready made solution..</h1>

<p><a href="https://github.com/kenpratt/dbox">dbox</a> is a great ruby client for Dropbox that can locally create, clone, push, pull, sync, and move, a Dropbox folder hierarchy.  It can be used as an API directly from another ruby script, or with the included command line tool.</p>

<blockquote>
  <p><a href="https://github.com/kenpratt/dbox">dbox</a><br />
Dropbox integration made easy. This robust client gives you control over what, where, and when you sync with Dropbox.</p>
</blockquote>

<p>dbox syncs one file at a time, so it won&#8217;t be as quick as the official client when syncing large amounts of files.  For most uses this will only be an issue when initially cloning a large folder.</p>

<h2 id="installation">installation</h2>

<p>Before installing dbox, make sure you have any needed packages.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">sudo apt-get install ruby ruby-dev libsqlite3-dev
</span><span class="line">sudo gem install dbox
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then follow the rest of the instructions from the <a href="https://github.com/kenpratt/dbox">dbox</a> page, to configure your keys and clone your Dropbox folder.</p>

<p>To run dbox periodically, download<sup id="fnref:dl"><a href="#fn:dl" rel="footnote">1</a></sup> the <a href="https://github.com/kenpratt/dbox/blob/master/sample_polling_script.rb">example script</a> and make it executable, then replace the example keys and path settings with your own.</p>

<!--	cp /var/lib/gems/1.9.1/gems/dbox-0.7.2/sample_polling_script.rb dboxsync.rb -->

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">wget https://raw.github.com/kenpratt/dbox/master/sample_polling_script.rb
</span><span class="line">mv ./sample_polling_script.rb dboxsync.rb
</span><span class="line">chmod +x dboxsync.rb
</span><span class="line">nano dboxsync.rb
</span><span class="line">./dboxsync.rb
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>All output is written to a log file, so it&#8217;s normal not to see any output while running.  If you want to see some basic info while testing, change the script so <code>LOGFILE = STDOUT</code>.  To show the full syncing progress and other debug info, set the level of the <a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/logger/rdoc/Logger.html">logger class</a> by changing the script so it reads <code>LOGGER.level = Logger::DEBUG</code>.</p>

<p>To have the script run on startup, add the following entry to <code>/etc/rc.local</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">sudo nano /etc/rc.local
</span><span class="line">
</span><span class="line"><span class="c"># add the following</span>
</span><span class="line"><span class="k">if</span> ! pgrep -f dboxsync; <span class="k">then</span>
</span><span class="line"><span class="k">  </span>sudo -u xbian nice -n 10 /home/xbian/dboxsync.rb &amp;
</span><span class="line"><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>There&#8217;s more proper ways of doing this, but this seemed the simplest.</p>

<h2 id="todo">todo</h2>

<ul>
  <li>increase polling delay, but add detection of local changes to initiate push/pull</li>
</ul>

<h2 id="notes">notes</h2>

<p>While cron or similar could be used to run dbox periodically, each separate invocation of dbox from the command line incurs a startup delay of a few seconds, during which time the Pi&#8217;s CPU is maxed out loading ruby and the code needed to run dbox.  This isn&#8217;t ideal and would likely cause issues if the Pi is used as a media player.</p>

<p>The sample_polling_script accesses dbox directly though it&#8217;s ruby API, and doesn&#8217;t exit during each polling interval.  Therefore, code remains cached in memory<sup id="fnref:mem"><a href="#fn:mem" rel="footnote">2</a></sup> and the delay occurs only once upon startup; this is a great advantage over running the command line version periodically.</p>

<h1 id="alternatives">alternatives</h1>

<p>Here&#8217;s some more options I considered, in order of decreasing usefulness.</p>

<h2 id="one-way-sync">one way sync</h2>

<p>Create a simple ruby script to sync files one way - <em>from Dropbox</em> - using the Dropbox SDK.  It&#8217;s also possible to sync both ways in ruby, but <a href="https://github.com/kenpratt/dbox">dbox</a> has already done a great job implementing that.</p>

<p>Ruby SDK <a href="https://www.dropbox.com/developers/start/setup#ruby">Tutorial</a>, <a href="https://www.dropbox.com/static/developers/dropbox-ruby-sdk-1.5.1-docs/index.html">Documentation</a>.</p>

<p>eg. See the <a href="https://www.dropbox.com/static/developers/dropbox-ruby-sdk-1.5.1-docs/DropboxClient.html#method-i-delta">delta method</a> to keep local files in sync without writing too much code.</p>

<p>There&#8217;s also the cli_example.rb script included in the SDK, which provides a simple shell interface similar to FTP but does not have any syncing logic included.</p>

<h2 id="linux-daemon">linux daemon</h2>

<p>Dropbox does have a download for a daemon, but it&#8217;s x86/_64 only; see the <a href="https://www.dropbox.com/install?os=lnx">Linux Download</a> page for more info.</p>

<blockquote>
  <p>The Dropbox daemon works fine on all 32-bit and 64-bit Linux servers. To install, run the following command in your Linux terminal.</p>
</blockquote>

<h2 id="build-from-source">build from source</h2>

<p>The Dropbox source appears to be just a plugin for the nautilus file browser (and doesn&#8217;t include the above daemon?).  This is only useful when using the desktop.</p>

<p>Download the <a href="https://www.dropbox.com/download?dl=packages/nautilus-dropbox-1.4.0.tar.bz2">source archive</a> and build as usual.  More details can be found in <a href="https://www.dropbox.com/help/247">this help topic</a>.</p>

<h2 id="use-something-else">use something else</h2>

<p>I also use github, sftp, scp, and rsync for file transfer, version history and keeping various things in sync; there are many ways to achieve automatic folder syncing.  However, Dropbox fulfills a role that can&#8217;t easily be duplicated if you use many Dropbox enabled mobile apps, and do not wish the Pi to rely upon a second computer to sync through.</p>
<div class="footnotes">
  <ol>
    <li id="fn:dl">
      <p>the script is also included in the installed gem:  <code>cp /var/lib/gems/1.9.1/gems/dbox-0.7.2/sample_polling_script.rb dboxsync.rb</code><a href="#fnref:dl" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:mem">
      <p>memory usage starts at ~8MB after startup, and evens out to ~12MB after many polling loops; polling takes a second or two, during which CPU usage is around 5%, peaking at ~12%.  Contrast with the CLI version which uses a similar amount of memory, but takes several seconds to complete each sync, and includes the overhead of almost total CPU usage for half that time.<a href="#fnref:mem" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Home Theatre Pi (HTPi)]]></title>
    <link href="http://jmeosbn.github.com/blog/baking-the-pi/"/>
    <updated>2012-12-17T19:13:00+00:00</updated>
    <id>http://jmeosbn.github.com/blog/baking-the-pi</id>
    <content type="html"><![CDATA[<p>A collection of notes for setting up a clean image of <a href="http://www.xbian.org">XBian</a> (1.0 Alpha 5) on the Raspberry Pi.</p>

<!-- more -->

<p>Jump to <a href="#first-login-tasks">first login tasks</a> if you have already set up terminal access to the Pi.</p>

<h3 class="no_toc" id="contents">Contents</h3>

<ul id="markdown-toc">
  <li><a href="#basic-pi-tips">Basic Pi Tips</a></li>
  <li><a href="#pre-setup-on-pc-laptop-etc">Pre-setup, on PC, laptop, etc.</a></li>
  <li><a href="#transfer-files">Transfer files</a></li>
  <li><a href="#first-login-tasks">First login tasks</a></li>
  <li><a href="#ttl-serial-console">TTL serial console</a></li>
  <li><a href="#fake-a-hardware-clock">Fake a hardware clock</a></li>
  <li><a href="#configure-wifi-and-bluetooth">Configure WiFi and Bluetooth</a></li>
  <li><a href="#link-settings-to-root-profile">Link settings to root profile</a></li>
  <li><a href="#generate-new-rsa-host-keys">Generate new RSA host keys</a></li>
  <li><a href="#build-and-install-wiringpi">Build and install WiringPi</a></li>
  <li><a href="#install-dbox-dropbox-tool">Install dbox (dropbox tool)</a></li>
  <li><a href="#install-mono">Install Mono</a></li>
  <li><a href="#xbmc-extensions">XBMC Extensions</a></li>
  <li><a href="#xbmc-settings">XBMC Settings</a></li>
  <li><a href="#useful-extras-not-always-used">Useful extras, not always used</a></li>
  <li><a href="#troubleshooting-and-backup">Troubleshooting and backup</a></li>
  <li><a href="#not-used-with-recent-versions">Not used with recent versions</a></li>
</ul>

<h2 id="basic-pi-tips">Basic Pi Tips</h2>

<p>Guide for navigating XBMC with the <a href="http://wiki.xbmc.org/index.php?title=Keyboard">keyboard</a>.</p>

<h3 id="connecting-to-the-pi">Connecting to the Pi</h3>

<p>XBian names the default user account <code>xbian</code>, other distributions normally use <code>pi</code>.  The default password is <code>raspberry</code>.  XBian also supports zeroconfig<sup id="fnref:hostname"><a href="#fn:hostname" rel="footnote">1</a></sup>, so it&#8217;s easier to find your Pi on the network.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="c"># login using zeroconfig</span>
</span><span class="line">ssh xbian@xbian.local
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Otherwise, you can <a href="#find-the-ip-address">find the Pi&#8217;s network IP address</a> and use that to login.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="c"># login using IP address</span>
</span><span class="line">ssh xbian@192.168.1.10
</span><span class="line">
</span><span class="line"><span class="c"># login as user pi on raspbian</span>
</span><span class="line">ssh pi@192.168.1.10
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>Note: If multiple Pis are active on the same network, they should be given <a href="#change-hostname">unique hostnames</a>.</em></p>

<h2 id="pre-setup-on-pc-laptop-etc">Pre-setup, on PC, laptop, etc.</h2>

<p>Before setting up the Pi remotely, there are some things to do locally to ease logging in when using SSH.  This will obviate the need to enter a password, or specify the full host name each time we access the Pi.</p>

<h3 id="copy-public-key-to-pi">Copy public key to Pi</h3>

<p>If generating a new key pair, accept the default key location as suggested by <code>ssh-keygen</code> below.  While a passphrase is optional, anyone can use a copy of the unencrypted private key to authenticate with your identity.  Many operating systems are preconfigured to use <code>ssh-agent</code> or a similar utility, to avoid having to enter a passphrase multiple times (if at all).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="c"># generate a key pair if none already exists</span>
</span><span class="line"><span class="nb">test</span> -f ~/.ssh/id_rsa.pub <span class="o">||</span> ssh-keygen
</span><span class="line">
</span><span class="line"><span class="c"># remove any old, conflicting host entries</span>
</span><span class="line">ssh-keygen -R xbian.local
</span><span class="line">
</span><span class="line"><span class="c"># password is required until the key is installed</span>
</span><span class="line">ssh-copy-id xbian@xbian.local
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The easiest way to append a key to the remote user&#8217;s <code>~/.ssh/authorized_keys</code> file is to use <code>ssh-copy-id</code> as shown above.  Download <a href="http://hg.mindrot.org/openssh/raw-file/tip/contrib/ssh-copy-id">ssh-copy-id</a> from source if your system doesn&#8217;t already have it (<a href="http://www.commandlinefu.com/commands/view/10228/...if-you-have-sudo-access-you-could-just-install-ssh-copy-id-mac-users-take-note.-this-is-how-you-install-ssh-copy-id-">installation instructions</a>), this <a href="http://www.commandlinefu.com/commands/view/188/copy-your-ssh-public-key-to-a-server-from-a-machine-that-doesnt-have-ssh-copy-id">alternative method</a> should also work in most situations.</p>

<h3 id="add-an-alias-to-sshconfig">Add an alias to .ssh/config</h3>

<p>Locally define the alias <code>xb</code>, to be used in place of <code>xbian@xbian.local</code> with commands such as <code>ssh xb</code> and <code>sftp xb</code>.  Enter the text below as a single command, or manually paste the quoted text into <code>~/.ssh/config</code> using <code>nano</code> or similar.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nb">echo</span> <span class="s1">&#39;</span>
</span><span class="line"><span class="s1">Host xb</span>
</span><span class="line"><span class="s1">  User  xbian</span>
</span><span class="line"><span class="s1">  Hostname  xbian.local&#39;</span> &gt;&gt; ~/.ssh/config
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="transfer-files">Transfer files</h2>

<p>If you have previous files from your Pi stored locally, you can transfer them using <code>sftp</code>, <code>scp</code>, etc.  For easily transferring many arbitrary files , a GUI sftp client is recommended.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="c"># connect to the pi, using the `xb` alias defined above</span>
</span><span class="line">sftp xb
</span><span class="line">sftp&gt; put .bash_aliases
</span><span class="line">sftp&gt; <span class="nb">exit</span>
</span><span class="line">
</span><span class="line"><span class="c"># you can also use ctlr+d to logout</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="first-login-tasks">First login tasks</h2>

<p>Most of the commands below need root privileges on the Pi, as they alter the system configuration.  To run a single command with root privileges, prepend the <code>sudo</code> command to it.  To run many commands this way without typing <code>sudo</code> each time, first start a root shell with <code>sudo -s</code>; <em>remember to logout with &#8216;exit&#8217; or ctrl+d when finished</em>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="c"># Login to the pi, using the `xb` alias</span>
</span><span class="line">ssh xb
</span><span class="line">
</span><span class="line"><span class="c"># xbian-config may run here, set it up as you like then exit</span>
</span><span class="line">
</span><span class="line"><span class="c"># Disable autorun of xbian-config</span>
</span><span class="line"><span class="c"># Use &#39;sudo xbian-config&#39; to run manually</span>
</span><span class="line">sed -i <span class="s1">&#39;/^sudo xbian-config/s/^/# /&#39;</span> ~/.bashrc
</span><span class="line">
</span><span class="line"><span class="c"># Disable the login message</span>
</span><span class="line">touch ~/.hushlogin
</span><span class="line">
</span><span class="line"><span class="c"># Disable setting of the terminal title</span>
</span><span class="line">sed -i <span class="s1">&#39;/PS1=.*\][0-2];/s/^/##/&#39;</span> ~/.bashrc
</span><span class="line">
</span><span class="line"><span class="c"># Use a root shell for the following commands</span>
</span><span class="line">sudo -s
</span><span class="line">
</span><span class="line"><span class="c"># Allow full use of sudo without needing password</span>
</span><span class="line"><span class="c"># note: XBian 1.0b4 made this much less essential</span>
</span><span class="line"><span class="nb">echo</span> <span class="s1">&#39;%sudo  ALL=(ALL) NOPASSWD: ALL&#39;</span> &gt;&gt; /etc/sudoers
</span><span class="line">
</span><span class="line"><span class="c"># Update packages</span>
</span><span class="line">apt-get update <span class="o">&amp;&amp;</span> apt-get upgrade
</span><span class="line">
</span><span class="line"><span class="c"># Install some utilities</span>
</span><span class="line">apt-get install p7zip zip mediainfo
</span><span class="line">
</span><span class="line"><span class="c"># Install gcc compiler, dev tools</span>
</span><span class="line">apt-get install gcc make git-core
</span><span class="line">
</span><span class="line"><span class="c"># Install scripting tools</span>
</span><span class="line">apt-get install ruby ruby-dev ri libsqlite3-dev
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="ttl-serial-console">TTL serial console</h2>

<p>The display of full screen terminal programs becomes corrupted when using a TTL to USB serial connection to the Pi from Mac OS X.  Changing the terminal type enables use of programs such as <code>nano</code> and <code>xbian-config</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">sed -i <span class="s1">&#39;/ttyAMA0/s/vt100$/xterm/&#39;</span> /etc/inittab
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="fake-a-hardware-clock">Fake a hardware clock</h2>

<p>The Pi doesn&#8217;t have a real time clock, so it usually defaults to some point in the past until the time can be set correctly using the Internet.  To make the clock more consistent across power cycles, it can be initialised using the last recorded date and time.  <em>(note: previous distros required the <a href="#fake-a-hardware-clock-unabridged">unabridged instructions</a>.)</em></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">apt-get install fake-hwclock
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="configure-wifi-and-bluetooth">Configure WiFi and Bluetooth</h2>

<p>XBian includes simple WiFi configuration as part of the xbian-config setup menu,  see <a href="#manually-configure-wifi-adapter">manual configuration</a> if you want finer control over the network settings (e.g. connecting to multiple networks).  My bluetooth adapter is not supported in the current build of Raspbian/XBian, but <a href="#configure-bluetooth-adapter">here is the procedure</a> I used when trying to get it running (confirmed working on a laptop running Ubuntu).</p>

<h2 id="link-settings-to-root-profile">Link settings to root profile</h2>

<p>Occasionally you&#8217;ll want to use a root shell, and then be annoyed that your aliases etc. are not configured for the root user.  You can either copy the profile files into ~/root or, as shown here, link them symbolically so that any future modifications will be reflected.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="c"># change to the home folder you want to link from</span>
</span><span class="line"><span class="nb">cd</span> ~xbian
</span><span class="line">
</span><span class="line"><span class="c"># define a list of dot files to link</span>
</span><span class="line"><span class="nv">dotfiles</span><span class="o">=</span><span class="s2">&quot;.profile .bashrc .bash_aliases .bash_logout .nanorc .toprc&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c"># link each existing file into the root user&#39;s home folder</span>
</span><span class="line"><span class="k">for </span>i in <span class="nv">$dotfiles</span>; <span class="k">do</span> <span class="o">[</span> -f <span class="nv">$i</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> sudo ln -sfv ~+/<span class="nv">$i</span> ~root/; <span class="k">done</span>
</span><span class="line">
</span><span class="line"><span class="c"># hush login message</span>
</span><span class="line">sudo touch ~root/.hushlogin
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="generate-new-rsa-host-keys">Generate new RSA host keys</h2>

<p>These keys confirm the identity of the Pi, to prevent a malicious host from intercepting the remote login process.  Not so important for your HTPi, but good standard security practice.  Also recommended if you have <a href="#change-hostname">more than one Pi</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">rm /etc/ssh/ssh_host_*
</span><span class="line">/usr/sbin/dpkg-reconfigure openssh-server
</span><span class="line">
</span><span class="line"><span class="c"># remove old host key from clients using:</span>
</span><span class="line"><span class="c"># ssh-keygen -R xbian.local</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<!--
	ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key
	ssh-keygen -t rsa1 -f /etc/ssh/ssh_host_key
-->

<h2 id="build-and-install-wiringpi">Build and install WiringPi</h2>

<p><a href="https://projects.drogon.net/raspberry-pi/wiringpi">WiringPi</a> is a library to access the Pi&#8217;s GPIO, SPI, and I2C headers, modelled on the Arduino Wiring system.  It also includes the <code>gpio</code> utility for use of the libraries from the command prompt.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">apt-get install gcc make git-core libi2c-dev
</span><span class="line">git clone git://git.drogon.net/wiringPi
</span><span class="line"><span class="nb">cd </span>wiringPi; ./build
</span><span class="line">
</span><span class="line"><span class="c"># test with gpio utility</span>
</span><span class="line">gpio readall
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="install-dbox-dropbox-tool">Install dbox (dropbox tool)</h2>

<p>Follow the <a href="https://github.com/kenpratt/dbox">dbox installation instructions</a> to set up the dropbox sdk developer keys and authorisation tokens.  To use dbox for automatic folder syncing, see my post: <a href="http://jmeosbn.github.com/blog/pi-box/">Dropbox on Pi</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">apt-get install gcc make ruby ruby-dev libsqlite3-dev
</span><span class="line">gem install dbox
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="install-mono">Install Mono</h2>

<p>Basic mono setup to run and compile command line tools.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">apt-get install mono-devel mono-gmcs mono-csharp-shell
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="xbmc-extensions">XBMC Extensions</h2>

<p>Use <code>wget</code> to download the latest versions from the links below, then open the zip files directly from xbmc&#8217;s addons page.</p>

<ul>
  <li><a href="http://code.google.com/p/xbmc-iplayerv2/downloads/list">http://code.google.com/p/xbmc-iplayerv2/downloads/list</a></li>
  <li><a href="http://code.google.com/p/mossy-xbmc-repo/downloads/list">http://code.google.com/p/mossy-xbmc-repo/downloads/list</a></li>
  <li><a href="http://code.google.com/p/xbmc-itv-player/downloads/list">http://code.google.com/p/xbmc-itv-player/downloads/list</a></li>
</ul>

<h2 id="xbmc-settings">XBMC Settings</h2>

<p>If you are storing media in the root folder of an NTFS formatted hard drive, you may see some system folders while using the video/audio file views.  You can hide these system folders, change other advanced xbmc behaviour, or preset/lock standard settings in <a href="http://wiki.xbmc.org/?title=Advancedsettings.xml">advancedsettings.xml</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>~/.xbmc/userdata/advancedsettings.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="nt">&lt;video&gt;</span>
</span><span class="line">    <span class="c">&lt;!-- hide system folders from the video files view --&gt;</span>
</span><span class="line">    <span class="c">&lt;!-- you could also add these to &#39;excludefromscan&#39; --&gt;</span>
</span><span class="line">    <span class="nt">&lt;excludefromlisting&gt;</span>
</span><span class="line">    	<span class="nt">&lt;regexp&gt;</span>(\$RECYCLE.BIN|System Volume Information)<span class="nt">&lt;/regexp&gt;</span>
</span><span class="line">    <span class="nt">&lt;/excludefromlisting&gt;</span>
</span><span class="line"><span class="nt">&lt;/video&gt;</span>
</span><span class="line"><span class="nt">&lt;audio&gt;</span>
</span><span class="line">    <span class="c">&lt;!-- do likewise for the audio files view --&gt;</span>
</span><span class="line">    <span class="nt">&lt;excludefromlisting&gt;</span>
</span><span class="line">        <span class="nt">&lt;regexp&gt;</span>(\$RECYCLE.BIN|System Volume Information)<span class="nt">&lt;/regexp&gt;</span>
</span><span class="line">    <span class="nt">&lt;/excludefromlisting&gt;</span>
</span><span class="line"><span class="nt">&lt;/audio&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="useful-extras-not-always-used">Useful extras, not always used</h2>

<p>Stuff used infrequently, or currently being tested</p>

<h3 id="packages-from-raspbian">Packages from Raspbian</h3>

<p>Some standard packages that are usually excluded from the xbian distro, as they are not required for use of xbmc only.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">apt-get install omxplayer
</span><span class="line">
</span><span class="line"><span class="c"># included on xbian &gt;= 1.0b</span>
</span><span class="line">apt-get install psmisc usbutils
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="other-useful-packages">Other useful packages</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">apt-get install fs2resize exfat-fuse
</span><span class="line">apt-get install clang geany
</span><span class="line">apt-get install sysv-rc-conf
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="find-the-ip-address">Find the IP address</h3>

<p>You can get the IP address from your Pi, by running either of the following commands locally on the device.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">ip r | grep -o <span class="s1">&#39;src.*&#39;</span>
</span><span class="line">
</span><span class="line">ifconfig 2&gt;&amp;1 | grep cast | grep -o <span class="s1">&#39;inet [^ ]*&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Connect to the address that has the same subnet (starts similar) as the IP address you will be connecting from, ignoring the localhost address (127.0.0.1).</p>

<p>If it isn&#8217;t possible to run a command locally on the Pi (e.g. there is no monitor or keyboard attached), you can either <a href="http://www.recantha.co.uk/blog/?p=2397">scan the network</a> or view &#8216;Attached Devices&#8217; in your Router&#8217;s setup.  Look for a matching hostname or MAC address (which will start with <code>b8:27:eb</code> for the on-board LAN).</p>

<h3 id="change-hostname">Change Hostname</h3>

<p>If it&#8217;s likely the Pi won&#8217;t be the only one using the local network, then it should be given a unique host name.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">sudo nano /etc/hostname <span class="c"># enter the desired name</span>
</span><span class="line">sudo nano /etc/hosts <span class="c"># replace the hostname</span>
</span><span class="line">sudo /etc/init.d/hostname.sh start <span class="c"># to enable the changes</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="testing-pvr">Testing PVR</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">apt-get install vdr-plugin-dvbsddevice
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="setting-up-webcam">Setting up webcam</h3>

<p>Use &#8216;motion&#8217; or &#8216;fswebcam&#8217;, motion may need a default cfg copying</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">apt-get install motion
</span><span class="line">cp /etc/default/motion /etc/motion/motion.conf
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="configure-bluetooth-adapter">Configure bluetooth adapter</h3>

<p><a href="http://www.ctheroux.com/2012/08/a-step-by-step-guide-to-setup-a-bluetooth-keyboard-and-mouse-on-the-raspberry-pi/">Adapted from ctheroux</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="c"># install bluetooth support and dependencies</span>
</span><span class="line">agi bluez python-gobject  <span class="c"># minimal?</span>
</span><span class="line">agi bluetooth bluez-utils  <span class="c"># full</span>
</span><span class="line">
</span><span class="line"><span class="c"># for management from the desktop</span>
</span><span class="line">agi blueman
</span><span class="line">
</span><span class="line"><span class="c"># check adapter is working*</span>
</span><span class="line">hcitool dev
</span><span class="line">
</span><span class="line"><span class="c"># scan for devices</span>
</span><span class="line">hcitool scan
</span><span class="line">
</span><span class="line"><span class="c"># pair with device, using the address listed from scan</span>
</span><span class="line">bluez-simple-agent hci0 XX:XX:XX:XX:XX:XX
</span><span class="line">
</span><span class="line"><span class="c"># trust the device</span>
</span><span class="line">bluez-test-device trusted XX:XX:XX:XX:XX:XX yes
</span><span class="line">
</span><span class="line"><span class="c"># connect to input device</span>
</span><span class="line">bluez-test-input hci0 XX:XX:XX:XX:XX:XX
</span><span class="line">
</span><span class="line"><span class="c"># adapter status</span>
</span><span class="line">hciconfig
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><em>*Note: a bluetooth adapter may be listed in <code>lsusb</code> and <code>hciconfig</code>, without being recognised by <code>hcitool</code>. This is the case with the belkin dongle I have, so use <code>hcitool</code> to check that a device is working properly.</em></p>

<h2 id="troubleshooting-and-backup">Troubleshooting and backup</h2>

<p>Some useful commands and procedures</p>

<h3 id="backup-settings">Backup settings</h3>

<ul>
  <li>Settings, addons etc. are in ~/.xbmc</li>
  <li>.xbmc/userdata - preferences etc</li>
  <li>.xbmc/addons - binaries, themes</li>
  <li>.xbmc/addons/packages - original downloads, can use with &#8220;install from zip&#8221;</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="c"># backup profile settings</span>
</span><span class="line">zip -ry xbmc .xbmc/
</span><span class="line">zip -ry dotfiles .bash_aliases .nanorc .toprc .ssh
</span><span class="line">
</span><span class="line"><span class="c"># backup system config files</span>
</span><span class="line">sudo zip -ry basecfg /etc/wpa_supplicant/wpa_supplicant.conf
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Or using tar..</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="c"># backup profile settings</span>
</span><span class="line">tar -czf xbmc-backup.tar.gz .xbmc
</span><span class="line">
</span><span class="line"><span class="c"># restore profile settings</span>
</span><span class="line">sudo initctl stop xbmc
</span><span class="line">tar -xzf xbmc-backup.tar.gz
</span><span class="line">sudo initctl start xbmc
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="clear-cached-network-adapter">Clear cached network adapter</h3>

<p>(needed for switching cards between devices)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nb">echo</span> | sudo tee /etc/udev/rules.d/70-persistent-net.rules
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="quick-tips">Quick Tips</h3>

<ul>
  <li>You can detect hdmi audio modes: <code>/opt/vc/bin/tvservice -a</code></li>
  <li>Setup CEC remote over hdmi from console: <code>cec-config</code></li>
</ul>

<h2 id="not-used-with-recent-versions">Not used with recent versions</h2>

<p>Previously useful functionality or workarounds</p>

<h3 id="manually-configure-wifi-adapter">Manually configure WiFi adapter</h3>

<p><a href="http://www.savagehomeautomation.com/raspi-airlink101">Instructions adapted from here</a>.</p>

<p>Use <code>lsusb</code> to check that the adapter is recognised, and <code>lsmod</code> to check the kernel module (e.g. <code>8192cu</code>) is loaded.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">sudo nano /etc/network/interfaces
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Make sure the following lines exist in the interfaces file, adding them as needed:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">allow-hotplug wlan0
</span><span class="line">iface wlan0 inet manual
</span><span class="line">wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You may have the line <code>wireless-power off</code> in this file, which relates to power <strong><em>management</em></strong> only.  I&#8217;ve commented it out as it resulted in errors logged during <code>ifup</code> and power management remained off without it.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">sudo nano /etc/wpa_supplicant/wpa_supplicant.conf
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Add your network details to wpa_supplicant.conf, using the following template:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">network</span><span class="o">={</span>
</span><span class="line">  <span class="nv">ssid</span><span class="o">=</span><span class="s2">&quot;YOUR-NETWORK-SSID&quot;</span>
</span><span class="line">  <span class="nv">proto</span><span class="o">=</span>WPA2
</span><span class="line">  <span class="nv">key_mgmt</span><span class="o">=</span>WPA-PSK
</span><span class="line">  <span class="nv">pairwise</span><span class="o">=</span>CCMP TKIP
</span><span class="line">  <span class="nv">group</span><span class="o">=</span>CCMP TKIP
</span><span class="line">  <span class="nv">psk</span><span class="o">=</span><span class="s2">&quot;YOUR-WLAN-PASSWORD&quot;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Reinitialise the adapter, and check it&#8217;s connected.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">sudo ifdown wlan0
</span><span class="line">sudo ifup wlan0
</span><span class="line"><span class="c"># you may get some errors here, even when successful</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Use <code>iwconfig</code> to view wifi adapter info and <code>ifconfig</code> for general network info.</p>

<h3 id="fake-a-hardware-clock-unabridged">Fake a hardware clock (unabridged)</h3>

<p>More complicated instructions, as used on previous versions of XBian.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">touch /etc/init.d/hwclock.sh
</span><span class="line">/etc/init.d/ntp restart
</span><span class="line">apt-get install ntpdate fake-hwclock
</span><span class="line">ntpdate-debian
</span><span class="line">dpkg-reconfigure tzdata
</span><span class="line">sed -i <span class="s1">&#39;s/^exit 0/ntpdate-debian\nexit 0/g&#39;</span> /etc/rc.local
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="fix-ssh-access-using-public-key">Fix ssh access using public key</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="c"># must be owned by root</span>
</span><span class="line">chown root: ~ ~/.ssh
</span><span class="line"><span class="c"># no write for others</span>
</span><span class="line">chmod <span class="nv">a</span><span class="o">=</span>rx,u+w  ~
</span><span class="line">
</span><span class="line"><span class="c"># no access for others</span>
</span><span class="line">chmod -R go-rwx ~/.ssh
</span><span class="line"><span class="c"># public key can be readable</span>
</span><span class="line">chmod a+r ~/.ssh/id_rsa.pub
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="download-openssh-sftp-server">Download OpenSSH sftp server</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">apt-get -d install openssh-server
</span><span class="line">cp /var/cache/apt/archives/openssh-server_*.deb .
</span><span class="line">dpkg-deb -X openssh-server_*.deb sftp
</span><span class="line">cp sftp/usr/lib/openssh/sftp-server /usr/lib/
</span><span class="line">rm -r sftp openssh-server_*.deb
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="update-firmware-without-kernel">Update firmware without kernel</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">wget http://goo.gl/1BOfJ -O /usr/bin/rpi-update <span class="o">&amp;&amp;</span> chmod +x /usr/bin/rpi-update
</span><span class="line"><span class="nv">SKIP_KERNEL</span><span class="o">=</span>1 rpi-update 128
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="allow-xbmc-to-unmount-usb-drives">Allow XBMC to unmount USB drives</h3>

<p>XBian used to include the usbmount package to mount USB devices as soon as they are connected.  This prevented XBMC from bring able to mount and unmount USB drives itself, using the udisk service [as designed], due to root privileges being required to unmount devices mounted by usbmount.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="c"># disable the usbmount package</span>
</span><span class="line">sed -i <span class="s1">&#39;/ENABLED=/s/=1/=0/&#39;</span> /etc/usbmount/usbmount.conf
</span><span class="line">
</span><span class="line"><span class="c"># optionally remove unused usbmount directories</span>
</span><span class="line"><span class="c"># umount /media/usb*; rmdir /media/usb*; rm /media/usb</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Drives can be unmounted manually using <code>udisks</code> without needing to be root, and members of the <code>plugdev</code> group can also use <code>pumount</code>.</p>

<h3 id="install-shairport">Install Shairport</h3>

<p>Instructions found <a href="http://tomsolari.id.au/post/27169019561/airplay-music-streaming-on-raspberry-pi">here</a> (alt site <a href="http://cheeftun.appspot.com/trouch.com/2012/08/03/airpi-airplay-audio-with-raspberry/">here</a>)</p>

<p>A change in IOS 6 <a href="http://jordanburgess.com/post/38986434391/raspberry-pi-airplay">requires Perl Net-SDP</a> module to installed.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">git clone https://github.com/njh/perl-net-sdp.git perl-net-sdp
</span><span class="line"><span class="nb">cd </span>perl-net-sdp
</span><span class="line">perl Build.PL
</span><span class="line">sudo ./Build
</span><span class="line">sudo ./Build <span class="nb">test</span>
</span><span class="line">sudo ./Build install
</span><span class="line"><span class="nb">cd</span> ..
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="c"># do as root</span>
</span><span class="line">sudo -s
</span><span class="line">apt-get install alsa-utils
</span><span class="line">modprobe snd_bcm2835
</span><span class="line"><span class="c"># optionally set to headphone output</span>
</span><span class="line"><span class="c"># amixer cset numid=3 1</span>
</span><span class="line"><span class="c"># optionally restore to hdmi output</span>
</span><span class="line"><span class="c"># amixer cset numid=3 2</span>
</span><span class="line">apt-get install build-essential libssl-dev libcrypt-openssl-rsa-perl libao-dev libio-socket-inet6-perl libwww-perl avahi-utils pkg-config
</span><span class="line">wget https://github.com/albertz/shairport/zipball/master
</span><span class="line">unzip master
</span><span class="line"><span class="nb">cd </span>albertz-shairport-*
</span><span class="line">make install
</span><span class="line">cp shairport.init.sample /etc/init.d/shairport
</span><span class="line"><span class="c"># add to start of shairport: modprobe snd_bcm2835</span>
</span><span class="line">nano /etc/init.d/shairport
</span><span class="line"><span class="c"># optionally edit name of service (remove port number):</span>
</span><span class="line">nano /usr/local/bin/shairport.pl
</span><span class="line">insserv shairport
</span><span class="line"><span class="c"># manually start [services](http://pi-raspberry.blogspot.co.uk/2012/08/shairport-raspberry-pi.html)</span>
</span><span class="line">service avahi-daemon start
</span><span class="line">/etc/init.d/shairport start
</span><span class="line"><span class="c"># exit root</span>
</span><span class="line"><span class="nb">exit</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="footnotes">
  <ol>
    <li id="fn:hostname">
      <p>It should be possible to connect with the hostname even without zeroconfig, e.g. <code>xbian@xbian</code> or <code>pi@raspberrypi</code> (on raspbian), but I&#8217;ve had no luck with this.<a href="#fnref:hostname" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stellaris Virtual Serial Device]]></title>
    <link href="http://jmeosbn.github.com/blog/stellaris-virtual-serial-device/"/>
    <updated>2012-12-10T02:48:00+00:00</updated>
    <id>http://jmeosbn.github.com/blog/stellaris-virtual-serial-device</id>
    <content type="html"><![CDATA[<p>The Stellaris <a href="http://www.ti.com/ww/en/launchpad/stellaris_head.html">Launchpad</a> is able to provide a virtual serial port over the debug USB interface.  Data can be sent in either direction using this serial connection, to interact with program execution, or log it&#8217;s output.</p>

<!-- more -->

<h2 id="device-permissions">device permissions</h2>

<p>Root privileges are required to access the device on some Linux and Unix based systems, so remember to use <code>sudo</code> with commands such as <code>lm4flash</code> and <code>ttylog</code> which directly access the device.</p>

<p>Alternatively, on Linux you can configure permissions for the device using udev rules:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>sudo nano /etc/udev/rules.d/42-sellaris.rules
</span><span class="line">
</span><span class="line"><span class="c"># add the following lines:</span>
</span><span class="line">ATTRS<span class="o">{</span>product<span class="o">}==</span><span class="s2">&quot;In-Circuit Debug Interface&quot;</span>, <span class="nv">OWNER</span><span class="o">=</span><span class="s2">&quot;devuser&quot;</span> <span class="nv">KERNEL</span><span class="o">==</span><span class="s2">&quot;ttyACM?&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The (fairly open) rules shown above, give the user named &#8216;<em>devuser</em>&#8217; permission to access the launchpad&#8217;s usb interface, along with it&#8217;s virtual serial device.</p>

<p>Note: these rules should be more specific if you have similar devices that you don&#8217;t wish to allow access to inadvertently.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="c"># Exact match for Stellaris LM4F120XL</span>
</span><span class="line"><span class="nv">SUBSYSTEMS</span><span class="o">==</span><span class="s2">&quot;usb&quot;</span>, ATTRS<span class="o">{</span>idVendor<span class="o">}==</span><span class="s2">&quot;1cbe&quot;</span>, ATTRS<span class="o">{</span>idProduct<span class="o">}==</span><span class="s2">&quot;00fd&quot;</span>, <span class="nv">MODE</span><span class="o">=</span><span class="s2">&quot;0660&quot;</span>, <span class="nv">OWNER</span><span class="o">=</span><span class="s2">&quot;devuser&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The device in this rule is strictly defined, and read/write permissions have been explicitly set for it.  Also, because the whole device is matched directly (rather than it&#8217;s individual interfaces), only one rule is required.  You could also try assigning the device to a group, using <code>GROUP="devgroup"</code>.</p>

<p>To define these rules, the exact name, vendor, and/or product id needs to be known.  You can check these values using <code>dmesg</code> after connecting your device; the lines of interest are shown below.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>dmesg
</span><span class="line"><span class="c"># &lt;snip&gt;</span>
</span><span class="line"><span class="o">[</span>39911.201497<span class="o">]</span> usb 1-1.2.3: New USB device found, <span class="nv">idVendor</span><span class="o">=</span>1cbe, <span class="nv">idProduct</span><span class="o">=</span>00fd
</span><span class="line"><span class="o">[</span>39911.201537<span class="o">]</span> usb 1-1.2.3: Product: In-Circuit Debug Interface
</span><span class="line"><span class="o">[</span>39911.201551<span class="o">]</span> usb 1-1.2.3: Manufacturer: Texas Instruments
</span><span class="line"><span class="o">[</span>39911.344575<span class="o">]</span> cdc_acm 1-1.2.3:1.0: ttyACM0: USB ACM device
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="serial-device">serial device</h2>

<p>If you want to use the serial connection to provide input or commands to the launchpad, you&#8217;ll need a terminal emulator that can connect to a serial device.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span><span class="nb">cd </span>stellaris/boards/ek-lm4f120xl/qs-rgb
</span><span class="line"><span class="nv">$ </span>make
</span><span class="line"><span class="nv">$ </span>lm4flash gcc/qs-rgb.bin
</span><span class="line">
</span><span class="line"><span class="c"># Use of screen on linux</span>
</span><span class="line"><span class="nv">$ </span>screen /dev/ttyACM? 115200
</span><span class="line">
</span><span class="line"><span class="c"># Use of screen on mac os x</span>
</span><span class="line"><span class="nv">$ </span>screen /dev/tty.usbmodem* 115200
</span><span class="line">
</span><span class="line"><span class="c"># Kill the connection by typing: ^A k</span>
</span><span class="line"><span class="c">#  to list other commands, type: ^A ?</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Use of the wildcard in <code>ttyACM?</code> allows for the times the device may get assigned a different number, e.g. when power cycling or reconnecting.  If you have another ttyACM device connected then you should probably use it&#8217;s full name.</p>

<p>On OS X the device should be named similar to <code>tty.usbmodem</code>, with the serial number of the device appended.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing the Stellaris Toolchain]]></title>
    <link href="http://jmeosbn.github.com/blog/testing-the-stellaris-toolchain/"/>
    <updated>2012-11-15T20:40:00+00:00</updated>
    <id>http://jmeosbn.github.com/blog/testing-the-stellaris-toolchain</id>
    <content type="html"><![CDATA[<p>Once the <a href="https://github.com/jsnyder/arm-eabi-toolchain">toolchain</a> is <a href="http://jmeosbn.github.com/blog/compiling-the-stellaris-toolchain">installed</a>, here&#8217;s the basic steps to compile an example and get the code onto the launchpad.  A mirror for the Stellaris example code and other pieces is available on <a href="https://github.com/yuvadm/stellaris">github</a>.</p>

<!-- more -->

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="c"># Add the toolchain to your profile&#39;s path</span>
</span><span class="line"><span class="c"># Ideally this should go into your bash profile</span>
</span><span class="line"><span class="nv">$ </span><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$HOME</span>/arm-cs-tools/bin:<span class="nv">$PATH</span>
</span><span class="line">
</span><span class="line"><span class="c"># Test the compiler</span>
</span><span class="line"><span class="nv">$ </span>git clone https://github.com/yuvadm/stellaris
</span><span class="line"><span class="nv">$ </span><span class="nb">cd </span>stellaris/boards/ek-lm4f120xl/project0/
</span><span class="line"><span class="nv">$ </span>make clean; make
</span><span class="line">
</span><span class="line"><span class="c"># Flash binary to the board</span>
</span><span class="line"><span class="nv">$ </span>lm4flash gcc/project0.bin
</span><span class="line">
</span><span class="line"><span class="c"># Try making a source modification</span>
</span><span class="line"><span class="nv">$ </span>nano project0.c
</span><span class="line"><span class="nv">$ </span>make <span class="o">&amp;&amp;</span> lm4flash gcc/project0.bin
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="debugging">debugging</h2>

<p><a href="https://github.com/utzig/lm4tools">lm4tools</a> has a bridge to enable TCP over USB, so code running on the device can be debugged using gdb from the compiled toolchain.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="c"># build with debug symbols</span>
</span><span class="line"><span class="nv">$ </span>make clean <span class="o">&amp;&amp;</span> make <span class="nv">DEBUG</span><span class="o">=</span>1
</span><span class="line"><span class="nv">$ </span>lm4flash gcc/project0.bin
</span><span class="line">
</span><span class="line"><span class="c"># start the tcp/usb bridge (in the background)</span>
</span><span class="line"><span class="nv">$ </span>lmicdi &amp;
</span><span class="line">
</span><span class="line"><span class="c"># start gdb and connect to device</span>
</span><span class="line"><span class="nv">$ </span>arm-none-eabi-gdb gcc/project0.axf
</span><span class="line">Reading symbols from ./gcc/project0.axf...done.
</span><span class="line"><span class="o">(</span>gdb<span class="o">)</span> target remote :7777
</span><span class="line">Remote debugging using :7777
</span><span class="line">0x00000494 in SysCtlDelay <span class="o">()</span>
</span><span class="line"><span class="o">(</span>gdb<span class="o">)</span> c
</span><span class="line">Continuing.
</span><span class="line">^C
</span><span class="line"><span class="o">[</span>Thread &lt;main&gt;<span class="o">]</span> <span class="c">#1 stopped.</span>
</span><span class="line">0x00000662 in SysCtlDelay <span class="o">()</span>
</span><span class="line"><span class="o">(</span>gdb<span class="o">)</span> detach
</span><span class="line">Ending remote debugging.
</span><span class="line"><span class="o">(</span>gdb<span class="o">)</span> quit
</span><span class="line">
</span><span class="line"><span class="c"># quit lmicdi to allow use of lm4flash</span>
</span><span class="line"><span class="nv">$ </span>sudo killall lmicdi <span class="c"># or type &#39;fg&#39; followed by ^C</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compiling the Stellaris Toolchain]]></title>
    <link href="http://jmeosbn.github.com/blog/compiling-the-stellaris-toolchain/"/>
    <updated>2012-11-15T20:02:00+00:00</updated>
    <id>http://jmeosbn.github.com/blog/compiling-the-stellaris-toolchain</id>
    <content type="html"><![CDATA[<p>If you have a Stellaris <a href="http://www.ti.com/ww/en/launchpad/stellaris_head.html">Launchpad</a> - and don&#8217;t want to use the <a href="http://www.ti.com/tool/SW-EK-LM4F120XL">official</a> tools - you can mostly follow the instructions at <a href="http://blog.y3xz.com/blog/2012/10/29/an-open-toolchain-for-the-ti-stellaris/">y3xz</a> to build your own toolchain on any Unix/Linux based system using the <a href="https://github.com/jsnyder/arm-eabi-toolchain">ARM EABI Toolchain Builder</a>.  This includes Mac OS X, but I ran into a couple of minor issues as listed below.</p>

<!-- more -->

<p><em>(If you don&#8217;t fancy building the toolchain, <a href="http://www.yagarto.de/">yagarto</a> offers recent binaries for Windows and Mac OS X that target ARM devices.)</em></p>

<p>Note, the libraries included with the Codesourcery Lite <a href="http://www.mentor.com/embedded-software/sourcery-tools/sourcery-codebench/editions/lite-edition">toolchain</a> used here <a href="https://sourcery.mentor.com/GNUToolchain/release2322?@template=datasheet">do not support</a> the hardware FPU of the ARM <a href="http://en.wikipedia.org/wiki/ARM_Cortex-M#Cortex-M4">Cortex-M4F</a>, using software floating point code instead.  There is a <a href="https://github.com/prattmic/arm-cortex-m4-hardfloat-toolchain">hardfloat-toolchain</a> builder (which I&#8217;ve not used yet), and ARM is maintaining a <a href="https://launchpad.net/gcc-arm-embedded/+download">GCC toolchain</a> targeting embedded ARM processors, which I&#8217;ll probably try building next.</p>

<p>For more details on the launchpad, and the various libraries etc. that it uses, T.I. has a selection of <a href="http://www.ti.com/product/lm4f120h5qr">technical documentation</a> on their site.</p>

<h2 id="toolchain">toolchain</h2>

<p>The makefile failed to download the source archive, so <a href="https://sourcery.mentor.com/GNUToolchain/package10384/public/arm-none-eabi/arm-2012.03-56-arm-none-eabi.src.tar.bz2">download</a> it manually into the root of the toolchain repo.  Make will continue so long as the filename and checksum matches.</p>

<h2 id="lm4tools">lm4tools</h2>

<p>The <code>lm4flash</code> tool included in <a href="https://github.com/utzig/lm4tools/commit/cc466b1">recent</a> versions of <a href="https://github.com/utzig/lm4tools">lm4tools</a> is unable to read the serial number of the device on OS X, so compiled code cannot be flashed to the launchpad device.</p>

<p><strong>Update: The dev has <a href="https://github.com/utzig/lm4tools/commit/99d501b">committed</a> a workaround that fixes <code>lm4flash</code> on OS X.</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>./lm4flash project0.bin
</span><span class="line">Unable to get device serial number: LIBUSB_ERROR_OTHER
</span><span class="line">Unable to find any ICDI devices
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Newer versions of lm4tools require a kernel extension to be installed on OS X (this will prevent access to the virtual serial device), see the <a href="https://github.com/utzig/lm4tools/issues/8">issue</a> on github for more info.  The simplest workaround is to checkout and build commit <a href="https://github.com/utzig/lm4tools/commit/ea3c905">ea3c905</a>, which doesn&#8217;t check for the serial number.</p>

<p>Btw, you will get a similar error if your system requires root privileges to access the device directly over usb; try using <code>sudo</code> on linux/unix systems if you have issues.</p>

<h2 id="more-links">more links</h2>

<p><a href="http://hertaville.com/2012/05/28/gcc-arm-toolchain-stm32f0discovery/">Setting up the GCC ARM Toolchain</a> - focuses on using ARM&#8217;s <a href="https://launchpad.net/gcc-arm-embedded/+download">GCC toolchain</a> on Windows</p>

<p><a href="http://jmeosbn.github.com/testing-the-stellaris-toolchain">Testing the Stellaris Toolchain</a> - my overview for compiling and testing code on the device.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resources for Using Git]]></title>
    <link href="http://jmeosbn.github.com/blog/resources-for-using-git/"/>
    <updated>2012-09-29T20:35:00+01:00</updated>
    <id>http://jmeosbn.github.com/blog/resources-for-using-git</id>
    <content type="html"><![CDATA[<p>Here&#8217;s some basic resources to get started pushing code to github.</p>

<!-- more -->

<p>&#8220;Code&#8221; doesn&#8217;t just mean computer source code; git is useful for tracking changes to anything that can be represented as plain text, e.g. <a href="http://www.wired.com/wiredenterprise/2012/08/bundestag/">German Law</a>.</p>

<p>The simplest use of git is to create the repo locally, stored in the same folder as the source (known as the working tree) and named <code>.git</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Initialise a new git repo</span><a href="http://git-scm.com/docs/git-init">git-init</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span><span class="nb">cd </span>my-project
</span><span class="line"><span class="nv">$ </span>git init
</span><span class="line">Initialized empty Git repository in my-project/.git/
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Add any new or changed files you want to track, then commit those changes to the repo.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Add and commit changes</span><a href="http://git-scm.com/docs/git-add">git-add</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span><span class="nb">echo </span>About My-Project &gt; README.md
</span><span class="line"><span class="nv">$ </span>git add . <span class="c"># add all files recursively</span>
</span><span class="line"><span class="nv">$ </span>git commit -m <span class="s1">&#39;First Commit&#39;</span>
</span><span class="line"><span class="o">[</span>master <span class="o">(</span>root-commit<span class="o">)</span> cdab15f<span class="o">]</span> First Commit
</span><span class="line"> 1 file changed, 1 insertion<span class="o">(</span>+<span class="o">)</span>
</span><span class="line"> create mode 100644 README.md
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>View recent commits using <code>git log</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>View recent commits</span><a href="http://git-scm.com/docs/git-log">git-log</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>git log
</span><span class="line">commit cdab15f2036b0b8b1c8fbfceab6357c8e56a0d5f
</span><span class="line">Author: Jamie Osborne &lt;jmeosbn@your-email.com&gt;
</span><span class="line">Date:   Sat Sep 29 23:30:20 2012 +0100
</span><span class="line">
</span><span class="line">    First Commit
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="documentation">documentation</h2>

<p>Git itself can be installed from <a href="http://git-scm.com/downloads">git-scm.com</a> if your OS doesn&#8217;t already include it. The same site also hosts a copy of the <a href="http://git-scm.com/docs">documentation</a>, as well as the <a href="http://git-scm.com/book">Pro Git book</a> which is a great place to start learning git.  Pro Git is also available as a commercially <a href="http://www.amazon.com/gp/product/1430218339?ie=UTF8&amp;tag=prgi-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1430218339">printed book</a> from Apress, and as a free <a href="https://github.s3.amazonaws.com/media/progit.epub">ePub</a>, <a href="https://github.s3.amazonaws.com/media/pro-git.en.mobi">mobi</a>, or <a href="https://github.s3.amazonaws.com/media/progit.en.pdf">PDF</a> download.</p>

<p>If you don&#8217;t fancy reading an entire book, then this <a href="http://www.vogella.com/articles/Git/article.html">Git Tutorial</a> gets straight to the point for those already familiar with the concepts of version control.  There&#8217;s minimal explanatory text, but full command examples for most operations; making it a useful resource for commands you use rarely and need to quickly relearn.</p>

<h2 id="graphical-interfaces">graphical interfaces</h2>

<p>While it&#8217;s good to know how to use git from the command line, it&#8217;s worth getting a GUI for easier building of commits etc. (you could also integrate it with your favourite editor and diff viewer)</p>

<p><a href="http://github.com/">Github</a> offers their own <a href="http://mac.github.com/">Mac</a> and <a href="http://windows.github.com/">Windows</a> GUI clients, which have the advantage of closer integration with some of github&#8217;s features, such as organisations and the &#8220;Clone in Windows/Mac&#8221; button found on each repo on github.</p>

<p><img class="center" src="http://mac.github.com/images/promo-screenshot.png" title="GitHub for Mac" /></p>

<p>They do lack some more advanced features though so I mostly prefer <a href="http://gitx.laullon.com/">GitX</a> on the Mac, though <a href="http://git-scm.com/downloads/guis">plenty more GUIs</a> exist on various platforms.</p>

<p><img class="center" src="http://gitx.laullon.com/commit.png" width="512" title="GitX" /></p>

<h2 id="other-info">other info</h2>

<p>Btw, if you just want to share some code snippets somewhere while maintaining versioning etc., then check out <a href="https://gist.github.com/">gists</a>, a feature of github.</p>
]]></content>
  </entry>
  
</feed>
