<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[git-log(1)]]></title>
  <link href="http://jmeosbn.github.com/atom.xml" rel="self"/>
  <link href="http://jmeosbn.github.com/"/>
  <updated>2012-11-29T22:17:48+00:00</updated>
  <id>http://jmeosbn.github.com/</id>
  <author>
    <name><![CDATA[Jamie Osborne]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing the Stellaris toolchain]]></title>
    <link href="http://jmeosbn.github.com/testing-the-stellaris-toolchain/"/>
    <updated>2012-11-15T20:40:00+00:00</updated>
    <id>http://jmeosbn.github.com/testing-the-stellaris-toolchain</id>
    <content type="html"><![CDATA[<p>With the <a href="https://github.com/jsnyder/arm-eabi-toolchain">toolchain</a> installed, here&#8217;s the basic steps to compile an example and get the code onto the launchpad.  A mirror for the Stellaris example code and other pieces is available on <a href="https://github.com/yuvadm/stellaris">github</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># Add the toolchain to your profile&#39;s path</span>
</span><span class='line'><span class="c"># Ideally this should go into your bash profile</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$HOME</span>/arm-cs-tools/bin:<span class="nv">$PATH</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Test the compiler</span>
</span><span class='line'><span class="nv">$ </span>git clone https://github.com/yuvadm/stellaris
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>stellaris/boards/ek-lm4f120xl/project0/
</span><span class='line'><span class="nv">$ </span>make clean; make
</span><span class='line'>
</span><span class='line'><span class="c"># Flash binary to the board</span>
</span><span class='line'><span class="nv">$ </span>lm4flash gcc/project0.bin
</span><span class='line'>
</span><span class='line'><span class="c"># Try making a source modification</span>
</span><span class='line'><span class="nv">$ </span>nano project0.c
</span><span class='line'><span class="nv">$ </span>make <span class="o">&amp;&amp;</span> lm4flash gcc/project0.bin
</span></code></pre></td></tr></table></div></figure>


<h2>debugging</h2>

<p><a href="https://github.com/utzig/lm4toolsn">lm4tools</a> has a bridge to enable TCP over USB, so code running on the device can be debugged using gdb from the compiled toolchain.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># build with debug symbols</span>
</span><span class='line'><span class="nv">$ </span>make clean <span class="o">&amp;&amp;</span> <span class="nv">DEBUG</span><span class="o">=</span>1 make
</span><span class='line'><span class="nv">$ </span>lm4flash gcc/project0.bin
</span><span class='line'>
</span><span class='line'><span class="c"># start the tcp/usb bridge (in the background)</span>
</span><span class='line'><span class="nv">$ </span>lmicdi &amp;
</span><span class='line'>
</span><span class='line'><span class="c"># start gdb and connect to device</span>
</span><span class='line'><span class="nv">$ </span>arm-none-eabi-gdb gcc/project0.axf
</span><span class='line'>Reading symbols from ./gcc/project0.axf...done.
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> target remote :7777
</span><span class='line'>Remote debugging using :7777
</span><span class='line'>0x00000494 in SysCtlDelay <span class="o">()</span>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> c
</span><span class='line'>Continuing.
</span></code></pre></td></tr></table></div></figure>


<p>Note: As well as quitting lm4flash, I also found <code>detach</code> was needed in gdb (even if it hadn&#8217;t yet been ran), else the board would require a power cycle before flashing was possible again.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compiling the Stellaris toolchain]]></title>
    <link href="http://jmeosbn.github.com/compiling-the-stellaris-toolchain/"/>
    <updated>2012-11-15T20:02:00+00:00</updated>
    <id>http://jmeosbn.github.com/compiling-the-stellaris-toolchain</id>
    <content type="html"><![CDATA[<p>If you have a Stellaris <a href="http://www.ti.com/ww/en/launchpad/stellaris_head.html">Launchpad</a> - and don&#8217;t want to use the <a href="http://www.ti.com/tool/SW-EK-LM4F120XL">official</a> tools - you can mostly follow the instructions at <a href="http://blog.y3xz.com/blog/2012/10/29/an-open-toolchain-for-the-ti-stellaris/">y3xz</a> to build your own toolchain on any Unix/Linux based system using the <a href="https://github.com/jsnyder/arm-eabi-toolchain">ARM EABI Toolchain Builder</a>.  This includes Mac OS X, but I ran into a couple of minor issues as listed below.</p>

<p>Note, the Codesourcery Lite <a href="http://www.mentor.com/embedded-software/sourcery-tools/sourcery-codebench/editions/lite-edition">toolchain</a> used here does not support the hardware FPU of the ARM <a href="http://en.wikipedia.org/wiki/ARM_Cortex-M#Cortex-M4">Cortex-M4F</a>, using software floating point code instead.  There is a <a href="https://github.com/prattmic/arm-cortex-m4-hardfloat-toolchain">hardfloat-toolchain</a> builder (which I&#8217;ve not used yet), and ARM is maintaining a <a href="https://launchpad.net/gcc-arm-embedded/+download">GCC toolchain</a> targeting embedded ARM processors, which I&#8217;ll probably try building next.</p>

<h2>toolchain</h2>

<p>The makefile failed to download the source archive, you can <a href="https://sourcery.mentor.com/GNUToolchain/package10384/public/arm-none-eabi/arm-2012.03-56-arm-none-eabi.src.tar.bz2">download</a> it manually into the root of the toolchain repo and make will continue so long as the checksum matches.</p>

<h2>lm4tools</h2>

<p>The <a href="https://github.com/utzig/lm4tools">lm4tools</a> binary couldn&#8217;t read the serial number of the device using my MacBook running OS X 10.8, so I couldn&#8217;t flash the binary.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>./lm4flash/lm4flash project0.bin
</span><span class='line'>Unable to get device serial number: LIBUSB_ERROR_OTHER
</span><span class='line'>Unable to find any ICDI devices
</span></code></pre></td></tr></table></div></figure>


<p>The simplest workaround is to checkout and build commit <a href="https://github.com/utzig/lm4tools/commit/cc49426081">cc49426</a>, which doesn&#8217;t check for the serial number.  To use newer versions of lm4tools, a kernel extension needs to be installed, see the <a href="https://github.com/utzig/lm4tools/issues/8">issue</a> on github for more info.</p>

<p>Btw, you will get a similar error if your system requires root privileges to access the device directly over usb, try using <code>sudo</code> on linux/unix systems if you have issues.</p>

<h2>more links</h2>

<p><a href="http://hertaville.com/2012/05/28/gcc-arm-toolchain-stm32f0discovery/">Setting up the GCC ARM Toolchain</a> - focuses on using ARM&#8217;s <a href="https://launchpad.net/gcc-arm-embedded/+download">GCC toolchain</a> on Windows</p>

<p>An older <a href="https://github.com/texane/stlink">programming tool</a> with some good info in the README (<a href="https://github.com/utzig/icdiflasher">and another one here</a>).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resources for Using Git]]></title>
    <link href="http://jmeosbn.github.com/resources-for-using-git/"/>
    <updated>2012-09-29T20:35:00+01:00</updated>
    <id>http://jmeosbn.github.com/resources-for-using-git</id>
    <content type="html"><![CDATA[<p>Here&#8217;s some basic resources for getting started pushing code to github.</p>

<p>&#8220;Code&#8221; doesn&#8217;t just mean computer source code; git is useful for tracking anything that can be represented as plain text, eg. changes to <a href="http://www.wired.com/wiredenterprise/2012/08/bundestag/">German Law</a>.</p>

<p>The simplest use of git is to create the repo locally, stored in the same folder as the source (known as the working tree) and named <code>.git</code>.</p>

<figure class='code'><figcaption><span>Initialise a new git repo </span><a href='http://git-scm.com/docs/git-init'>git-init</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>my-project
</span><span class='line'><span class="nv">$ </span>git init
</span><span class='line'>Initialized empty Git repository in my-project/.git/
</span></code></pre></td></tr></table></div></figure>


<p>You then add any new or changed files you want to track, and then commit those changes to the repo.</p>

<figure class='code'><figcaption><span>Add and commit changes </span><a href='http://git-scm.com/docs/git-add'>git-add</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">echo </span>About My-Project &gt; README.md
</span><span class='line'><span class="nv">$ </span>git add . <span class="c"># add all files recursively</span>
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s1">&#39;First Commit&#39;</span>
</span><span class='line'><span class="o">[</span>master <span class="o">(</span>root-commit<span class="o">)</span> cdab15f<span class="o">]</span> First Commit
</span><span class='line'> 1 file changed, 1 insertion<span class="o">(</span>+<span class="o">)</span>
</span><span class='line'> create mode 100644 README.md
</span></code></pre></td></tr></table></div></figure>


<p>View recent commits using <code>git log</code>.</p>

<figure class='code'><figcaption><span>View recent commits </span><a href='http://git-scm.com/docs/git-log'>git-log</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git log
</span><span class='line'>commit cdab15f2036b0b8b1c8fbfceab6357c8e56a0d5f
</span><span class='line'>Author: Jamie Osborne &lt;jmeosbn@your-email.com&gt;
</span><span class='line'>Date:   Sat Sep 29 23:30:20 2012 +0100
</span><span class='line'>
</span><span class='line'>    First Commit
</span></code></pre></td></tr></table></div></figure>


<h2>Documentation</h2>

<p>Git itself can be installed from <a href="http://git-scm.com/downloads">git-scm.com</a> if your OS doesn&#8217;t already include it. They also host a copy of the <a href="http://git-scm.com/docs">documentation</a> and the online <a href="http://git-scm.com/book">Pro Git book</a> which is a great place to start learning git.  Pro Git is also available as a commercially <a href="http://www.amazon.com/gp/product/1430218339?ie=UTF8&amp;tag=prgi-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1430218339">printed book</a> from Apress, and as a free <a href="https://github.s3.amazonaws.com/media/progit.epub">ePub</a>, <a href="https://github.s3.amazonaws.com/media/pro-git.en.mobi">mobi</a>, or <a href="https://github.s3.amazonaws.com/media/progit.en.pdf">PDF</a> download.</p>

<p>If you don&#8217;t fancy reading an entire book, then this <a href="http://www.vogella.com/articles/Git/article.html">Git Tutorial</a> gets straight to the point for those already familiar with the concepts of version control.  There&#8217;s minimal explanatory text, but full command examples for most operations, making it a useful resource for commands you use rarely and need to quickly relearn.</p>

<h2>Graphical Interfaces</h2>

<p>While it&#8217;s good to know how to use git from the command line, it&#8217;s worth getting a GUI for easier building of commits etc. (you could also integrate it with your favourite editor and diff viewer)</p>

<p><a href="http://github.com/">Github</a> offers their own decent <a href="http://mac.github.com/">Mac</a> and <a href="http://windows.github.com/">Windows</a> GUI clients that also have the advantage of supporting github&#8217;s niceties for organisations and the &#8220;Clone in Windows/Mac&#8221; button found on each repo on github.</p>

<p><img class="center" src="http://mac.github.com/images/promo-screenshot.png" title="GitHub for Mac" ></p>

<p>They do lack some more advanced features though so I mostly prefer <a href="http://gitx.laullon.com/">GitX</a> on the Mac, although <a href="http://git-scm.com/downloads/guis">plenty more GUIs</a> exist on various platforms.</p>

<p><img class="center" src="http://gitx.laullon.com/commit.png" width="512" title="GitX" ></p>

<h2>Other Info</h2>

<p>Btw, if you just want to share some code snippets somewhere, while maintaining versioning etc., then check out <a href="https://gist.github.com/">gists</a>, a feature of github.</p>
]]></content>
  </entry>
  
</feed>
