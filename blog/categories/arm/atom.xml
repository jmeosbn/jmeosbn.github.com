<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: arm | jmeosbn]]></title>
  <link href="http://jmeosbn.github.io/blog/categories/arm/atom.xml" rel="self"/>
  <link href="http://jmeosbn.github.io/"/>
  <updated>2014-04-10T22:41:52+01:00</updated>
  <id>http://jmeosbn.github.io/</id>
  <author>
    <name><![CDATA[Jamie Osborne]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dropbox on Pi]]></title>
    <link href="http://jmeosbn.github.io/blog/pi-box/"/>
    <updated>2012-12-19T00:54:00+00:00</updated>
    <id>http://jmeosbn.github.io/blog/pi-box</id>
    <content type="html"><![CDATA[<p>There’s currently no build of the Dropbox sync client that runs on ARM devices; while there is source available, it’s not suitable for automatic, unattended sync on a Raspberry Pi that may not have any windowing system installed.</p>

<p>Dropbox does make various SDKs available though, which enables a ruby or python script to be used instead of the official client.</p>

<!-- more -->

<h1 id="a-ready-made-solution">a ready made solution..</h1>

<p><a href="https://github.com/kenpratt/dbox">dbox</a> is a great ruby client for Dropbox that can locally create, clone, push, pull, sync, and move, a Dropbox folder hierarchy.  It can be used as an API directly from another ruby script, or with the included command line tool.</p>

<blockquote>
  <p><a href="https://github.com/kenpratt/dbox">dbox</a><br />
Dropbox integration made easy. This robust client gives you control over what, where, and when you sync with Dropbox.</p>
</blockquote>

<p>dbox syncs one file at a time, so it won’t be as quick as the official client when syncing large amounts of files.  For most uses this will only be an issue when initially cloning a large folder.</p>

<h2 id="installation">installation</h2>

<p>Before installing dbox, make sure you have any needed packages.</p>

<p><code>sh
	sudo apt-get install ruby ruby-dev libsqlite3-dev
	sudo gem install dbox
</code></p>

<p>Then follow the rest of the instructions from the <a href="https://github.com/kenpratt/dbox">dbox</a> page, to configure your keys and clone your Dropbox folder.</p>

<p>To run dbox periodically, download<sup id="fnref:dl"><a href="#fn:dl" rel="footnote">1</a></sup> the <a href="https://github.com/kenpratt/dbox/blob/master/sample_polling_script.rb">example script</a> and make it executable, then replace the example keys and path settings with your own.</p>

<!--	cp /var/lib/gems/1.9.1/gems/dbox-0.7.2/sample_polling_script.rb dboxsync.rb -->

<p><code>sh
	wget https://raw.github.com/kenpratt/dbox/master/sample_polling_script.rb
	mv ./sample_polling_script.rb dboxsync.rb
	chmod +x dboxsync.rb
	nano dboxsync.rb
	./dboxsync.rb
</code></p>

<p>All output is written to a log file, so it’s normal not to see any output while running.  If you want to see some basic info while testing, change the script so <code>LOGFILE = STDOUT</code>.  To show the full syncing progress and other debug info, set the level of the <a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/logger/rdoc/Logger.html">logger class</a> by changing the script so it reads <code>LOGGER.level = Logger::DEBUG</code>.</p>

<p>To have the script run on startup, add the following entry to <code>/etc/rc.local</code>.</p>

<p>```sh
	sudo nano /etc/rc.local</p>

<pre><code># add the following
if ! pgrep -f dboxsync; then
  sudo -u xbian nice -n 10 /home/xbian/dboxsync.rb &amp;
fi ```
</code></pre>

<p>There’s more proper ways of doing this, but this seemed the simplest.</p>

<h2 id="todo">todo</h2>

<ul>
  <li>increase polling delay, but add detection of local changes to initiate push/pull</li>
</ul>

<h2 id="notes">notes</h2>

<p>While cron or similar could be used to run dbox periodically, each separate invocation of dbox from the command line incurs a startup delay of a few seconds, during which time the Pi’s CPU is maxed out loading ruby and the code needed to run dbox.  This isn’t ideal and would likely cause issues if the Pi is used as a media player.</p>

<p>The sample_polling_script accesses dbox directly though it’s ruby API, and doesn’t exit during each polling interval.  Therefore, code remains cached in memory<sup id="fnref:mem"><a href="#fn:mem" rel="footnote">2</a></sup> and the delay occurs only once upon startup; this is a great advantage over running the command line version periodically.</p>

<h1 id="alternatives">alternatives</h1>

<p>Here’s some more options I considered, in order of decreasing usefulness.</p>

<h2 id="one-way-sync">one way sync</h2>

<p>Create a simple ruby script to sync files one way - <em>from Dropbox</em> - using the Dropbox SDK.  It’s also possible to sync both ways in ruby, but <a href="https://github.com/kenpratt/dbox">dbox</a> has already done a great job implementing that.</p>

<p>Ruby SDK <a href="https://www.dropbox.com/developers/start/setup#ruby">Tutorial</a>, <a href="https://www.dropbox.com/static/developers/dropbox-ruby-sdk-1.5.1-docs/index.html">Documentation</a>.</p>

<p>eg. See the <a href="https://www.dropbox.com/static/developers/dropbox-ruby-sdk-1.5.1-docs/DropboxClient.html#method-i-delta">delta method</a> to keep local files in sync without writing too much code.</p>

<p>There’s also the cli_example.rb script included in the SDK, which provides a simple shell interface similar to FTP but does not have any syncing logic included.</p>

<h2 id="linux-daemon">linux daemon</h2>

<p>Dropbox does have a download for a daemon, but it’s x86/_64 only; see the <a href="https://www.dropbox.com/install?os=lnx">Linux Download</a> page for more info.</p>

<blockquote>
  <p>The Dropbox daemon works fine on all 32-bit and 64-bit Linux servers. To install, run the following command in your Linux terminal.</p>
</blockquote>

<h2 id="build-from-source">build from source</h2>

<p>The Dropbox source appears to be just a plugin for the nautilus file browser (and doesn’t include the above daemon?).  This is only useful when using the desktop.</p>

<p>Download the <a href="https://www.dropbox.com/download?dl=packages/nautilus-dropbox-1.4.0.tar.bz2">source archive</a> and build as usual.  More details can be found in <a href="https://www.dropbox.com/help/247">this help topic</a>.</p>

<h2 id="use-something-else">use something else</h2>

<p>I also use github, sftp, scp, and rsync for file transfer, version history and keeping various things in sync; there are many ways to achieve automatic folder syncing.  However, Dropbox fulfills a role that can’t easily be duplicated if you use many Dropbox enabled mobile apps, and do not wish the Pi to rely upon a second computer to sync through.</p>
<div class="footnotes">
  <ol>
    <li id="fn:dl">
      <p>the script is also included in the installed gem:  <code>cp /var/lib/gems/1.9.1/gems/dbox-0.7.2/sample_polling_script.rb dboxsync.rb</code><a href="#fnref:dl" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:mem">
      <p>memory usage starts at ~8MB after startup, and evens out to ~12MB after many polling loops; polling takes a second or two, during which CPU usage is around 5%, peaking at ~12%.  Contrast with the CLI version which uses a similar amount of memory, but takes several seconds to complete each sync, and includes the overhead of almost total CPU usage for half that time.<a href="#fnref:mem" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Home Theatre Pi (HTPi)]]></title>
    <link href="http://jmeosbn.github.io/blog/baking-the-pi/"/>
    <updated>2012-12-17T19:13:00+00:00</updated>
    <id>http://jmeosbn.github.io/blog/baking-the-pi</id>
    <content type="html"><![CDATA[<p>A collection of notes for setting up a clean image of <a href="http://www.xbian.org">XBian</a> (1.0 Beta 1) on the Raspberry Pi.</p>

<!-- more -->

<p>Jump to <a href="#first-login-tasks">first login tasks</a> if you have already set up terminal access to the Pi.</p>

<ul id="markdown-toc">
  <li><a href="#basic-pi-tips">Basic Pi Tips</a></li>
  <li><a href="#login-as-user-pi-on-raspbian">login as user pi on raspbian</a>    <ul>
      <li><a href="#pre-setup-on-pc-laptop-etc">Pre-setup; on PC, laptop, etc.</a></li>
    </ul>
  </li>
  <li><a href="#remove-any-old-conflicting-host-entries">remove any old, conflicting host entries</a></li>
  <li><a href="#password-is-required-until-the-key-is-installed">password is required until the key is installed</a>    <ul>
      <li><a href="#transfer-files">Transfer files</a></li>
    </ul>
  </li>
  <li><a href="#you-can-also-use-ctlrd-to-logout">you can also use ctlr+d to logout</a>    <ul>
      <li><a href="#first-login-tasks">First login tasks</a></li>
    </ul>
  </li>
  <li><a href="#xbian-config-may-run-here-set-it-up-as-you-like-then-exit">xbian-config may run here, set it up as you like then exit</a></li>
  <li><a href="#disable-autorun-of-xbian-config">Disable autorun of xbian-config</a></li>
  <li><a href="#disable-the-login-message">Disable the login message</a></li>
  <li><a href="#disable-setting-of-the-terminal-title">Disable setting of the terminal title</a></li>
  <li><a href="#use-a-root-shell-for-the-following-commands">Use a root shell for the following commands</a></li>
  <li><a href="#change-password-for-root-and-xbian-users">Change password for root and xbian users</a></li>
  <li><a href="#allow-full-use-of-sudo-without-needing-password">Allow full use of sudo without needing password</a></li>
  <li><a href="#allow-boot-partition-to-be-mounted">Allow boot partition to be mounted</a></li>
  <li><a href="#update-packages">Update packages</a></li>
  <li><a href="#configure-time-zone-and-locale">Configure time zone and locale</a></li>
  <li><a href="#install-some-utilities-and-services">Install some utilities and services</a></li>
  <li><a href="#install-gcc-compiler-dev-tools">Install gcc compiler, dev tools</a></li>
  <li><a href="#install-scripting-tools">Install scripting tools</a></li>
  <li><a href="#install-node-packages">Install node packages</a></li>
  <li><a href="#install-rmate-for-textmate-editing-over-ssh">Install rmate for TextMate editing over ssh</a>    <ul>
      <li><a href="#change-hostname">Change Hostname</a></li>
      <li><a href="#fake-a-hardware-clock">Fake a hardware clock</a></li>
      <li><a href="#link-settings-to-root-profile">Link settings to root profile</a></li>
    </ul>
  </li>
  <li><a href="#define-a-list-of-dot-files-to-link">define a list of dot files to link</a></li>
  <li><a href="#link-each-existing-file-into-the-root-users-home-folder">link each existing file into the root user’s home folder</a></li>
  <li><a href="#hush-login-message">hush login message</a>    <ul>
      <li><a href="#generate-new-rsa-host-keys">Generate new RSA host keys</a></li>
    </ul>
  </li>
  <li><a href="#remove-old-host-key-from-clients-using">remove old host key from clients using:</a>    <ul>
      <li><a href="#configure-wifi-and-bluetooth">Configure WiFi and Bluetooth</a></li>
      <li><a href="#ttl-serial-console">TTL serial console</a></li>
    </ul>
  </li>
  <li><a href="#manually-set-correct-size-for-the-client-window">manually set correct size for the client window</a>    <ul>
      <li><a href="#build-and-install-wiringpi">Build and install WiringPi</a></li>
    </ul>
  </li>
  <li><a href="#test-with-gpio-utility">test with gpio utility</a></li>
  <li><a href="#install-ruby-gem-optional">install ruby gem (optional)</a>    <ul>
      <li><a href="#remove-the-desktop-environment">Remove the desktop environment</a></li>
    </ul>
  </li>
  <li><a href="#network-drives">network drives</a></li>
  <li><a href="#other">other</a></li>
  <li><a href="#cleaning-up">cleaning up</a>    <ul>
      <li><a href="#install-mono">Install Mono</a></li>
      <li><a href="#install-xbian-onto-a-raspbian-image">Install XBian onto a Raspbian image</a></li>
    </ul>
  </li>
  <li><a href="#enable-staging-and-development-repositories-and-update">enable staging and development repositories and update</a></li>
  <li><a href="#install-xbianxbmc">install xbian/xbmc</a></li>
  <li><a href="#reboot-required-to-make-file-system-changes-and-conversion-to-btrfs">reboot required to make file system changes, and conversion to btrfs</a></li>
  <li><a href="#install-remaining-xbian-packages">install remaining xbian packages</a></li>
  <li><a href="#xbmc-can-now-be-started-with-start-xbmc">XBMC can now be started with “start XBMC”</a></li>
  <li><a href="#boot-to-desktop">boot to desktop</a>    <ul>
      <li><a href="#install-aircrack-and-related-tools">Install aircrack and related tools</a></li>
    </ul>
  </li>
  <li><a href="#put-wifi-device-into-monitor-mode">put wifi device into monitor mode</a></li>
  <li><a href="#list-available-networks">list available networks</a></li>
  <li><a href="#set-bssid-to-target-network-name">set bssid to target network name</a></li>
  <li><a href="#start-reaver">start reaver</a>    <ul>
      <li><a href="#regional-system-settings">Regional system settings</a></li>
    </ul>
  </li>
  <li><a href="#configure-keyboard-settings">Configure keyboard settings</a></li>
  <li><a href="#configure-console-font">Configure console font</a></li>
  <li><a href="#configure-time-zone-and-locale-1">Configure time zone and locale</a>    <ul>
      <li><a href="#install-dbox-dropbox-tool">Install dbox (dropbox tool)</a></li>
      <li><a href="#setup-xbmc">Setup XBMC</a></li>
      <li><a href="#useful-extras-not-always-used">Useful extras, not always used</a></li>
    </ul>
  </li>
  <li><a href="#included-on-xbian--10b">included on xbian &gt;= 1.0b</a></li>
  <li><a href="#for-management-from-the-desktop">for management from the desktop</a></li>
  <li><a href="#check-adapter-is-working">check adapter is working*</a></li>
  <li><a href="#scan-for-devices">scan for devices</a></li>
  <li><a href="#pair-with-device-using-the-address-listed-from-scan">pair with device, using the address listed from scan</a></li>
  <li><a href="#trust-the-device">trust the device</a></li>
  <li><a href="#connect-to-input-device">connect to input device</a></li>
  <li><a href="#adapter-status">adapter status</a>    <ul>
      <li><a href="#troubleshooting-and-backup">Troubleshooting and backup</a></li>
    </ul>
  </li>
  <li><a href="#backup-system-config-files">backup system config files</a></li>
  <li><a href="#restore-profile-settings">restore profile settings</a>    <ul>
      <li><a href="#not-used-with-recent-versions">Not used with recent versions</a></li>
    </ul>
  </li>
  <li><a href="#no-access-for-others">no access for others</a></li>
  <li><a href="#optionally-remove-unused-usbmount-directories">optionally remove unused usbmount directories</a></li>
</ul>

<h2 id="basic-pi-tips">Basic Pi Tips</h2>

<p>Guide for navigating XBMC with the <a href="http://wiki.xbmc.org/index.php?title=Keyboard">keyboard</a>.</p>

<h3 id="connecting-to-the-pi">Connecting to the Pi</h3>

<p>XBian names the default user account <code>xbian</code>, other distributions normally use <code>pi</code>.  The default password is <code>raspberry</code>.  XBian includes support for zeroconfig (via avahi-daemon), so it’s easier to find your Pi on the network<sup id="fnref:hostname"><a href="#fn:hostname" rel="footnote">1</a></sup>.</p>

<p><code>sh
# login using zeroconfig
ssh xbian@xbian.local
</code></p>

<p>If zeroconfig can’t be used, you can <a href="#find-the-ip-address">find the Pi’s network IP address</a> and use that to login.</p>

<p>```sh
# login using IP address
ssh xbian@192.168.1.10</p>

<h1 id="login-as-user-pi-on-raspbian">login as user pi on raspbian</h1>
<p>ssh pi@192.168.1.10
```</p>

<p><em>Note: If multiple Pis are active on the same network, they should be given <a href="#change-hostname">unique hostnames</a>.</em></p>

<h2 id="pre-setup-on-pc-laptop-etc">Pre-setup; on PC, laptop, etc.</h2>

<p>Before setting up the Pi remotely, there are some things to do locally to ease logging in when using SSH.  This will obviate the need to enter a password, or specify the full host name each time we access the Pi.</p>

<h3 id="copy-public-key-to-pi">Copy public key to Pi</h3>

<p>If generating a new key pair, accept the default key location as suggested by <code>ssh-keygen</code> below.  While a passphrase is optional, anyone can use a copy of the unencrypted private key to authenticate with your identity.  Many operating systems are preconfigured to use <code>ssh-agent</code> or a similar utility, to avoid having to enter a passphrase multiple times (if at all).</p>

<p>```sh
# generate a key pair if none already exists
test -f ~/.ssh/id_rsa.pub || ssh-keygen</p>

<h1 id="remove-any-old-conflicting-host-entries">remove any old, conflicting host entries</h1>
<p>ssh-keygen -R xbian.local</p>

<h1 id="password-is-required-until-the-key-is-installed">password is required until the key is installed</h1>
<p>ssh-copy-id xbian@xbian.local
```</p>

<p>The easiest way to append a key to the remote user’s <code>~/.ssh/authorized_keys</code> file is to use <code>ssh-copy-id</code> as shown above.  Download <a href="http://hg.mindrot.org/openssh/raw-file/tip/contrib/ssh-copy-id">ssh-copy-id</a> from source (or <a href="https://github.com/beautifulcode/ssh-copy-id-for-OSX">github</a>) if your system doesn’t already have it (<a href="http://www.commandlinefu.com/commands/view/10228/...if-you-have-sudo-access-you-could-just-install-ssh-copy-id-mac-users-take-note.-this-is-how-you-install-ssh-copy-id-">installation instructions</a>), this <a href="http://www.commandlinefu.com/commands/view/188/copy-your-ssh-public-key-to-a-server-from-a-machine-that-doesnt-have-ssh-copy-id">alternative method</a> should also work in most situations.</p>

<h3 id="add-an-alias-to-sshconfig">Add an alias to .ssh/config</h3>

<p>Locally define the alias <code>xb</code>, to be used in place of <code>xbian@xbian.local</code> with commands such as <code>ssh xb</code> and <code>sftp xb</code>.  Enter the text below as a single command, or manually paste the quoted text into <code>~/.ssh/config</code> using <code>nano</code> or similar (the IP address can be used for Hostname if preferred).</p>

<p><code>sh
echo '
Host xb
  User  xbian
  Hostname  xbian.local' &gt;&gt; ~/.ssh/config
</code></p>

<h2 id="transfer-files">Transfer files</h2>

<p>If you have previous files from your Pi stored locally, you can transfer them using <code>sftp</code>, <code>scp</code>, etc.  For easily transferring many arbitrary files , a GUI sftp client is recommended.</p>

<p>```sh
# connect to the pi, using the <code>xb</code> alias defined above
sftp xb
sftp&gt; put .bash_aliases
sftp&gt; exit</p>

<h1 id="you-can-also-use-ctlrd-to-logout">you can also use ctlr+d to logout</h1>
<p>```</p>

<h2 id="first-login-tasks">First login tasks</h2>

<p>Most of the commands below need root privileges on the Pi, as they alter the system configuration.  To run a single command with root privileges, prepend the <code>sudo</code> command to it.  To run many commands this way without typing <code>sudo</code> each time, first start a root shell with <code>sudo -s</code>; <em>remember to logout with ‘exit’ or ctrl+d when finished</em>.</p>

<p>```sh
# Login to the pi, using the <code>xb</code> alias
ssh xb</p>

<h1 id="xbian-config-may-run-here-set-it-up-as-you-like-then-exit">xbian-config may run here, set it up as you like then exit</h1>

<h1 id="disable-autorun-of-xbian-config">Disable autorun of xbian-config</h1>
<p># Use ‘sudo xbian-config’ to run manually
echo 0 &gt; .xbian-config-start</p>

<h1 id="disable-the-login-message">Disable the login message</h1>
<p>touch ~/.hushlogin</p>

<h1 id="disable-setting-of-the-terminal-title">Disable setting of the terminal title</h1>
<p>sed -i ‘/PS1=.*][0-2];/s/^/##/’ ~/.bashrc</p>

<h1 id="use-a-root-shell-for-the-following-commands">Use a root shell for the following commands</h1>
<p>sudo -s</p>

<h1 id="change-password-for-root-and-xbian-users">Change password for root and xbian users</h1>
<p>passwd &amp;&amp; passwd xbian</p>

<h1 id="allow-full-use-of-sudo-without-needing-password">Allow full use of sudo without needing password</h1>
<p># note: XBian 1.0a4 made this much less essential
echo ‘%sudo  ALL=(ALL) NOPASSWD: ALL’ » /etc/sudoers</p>

<h1 id="allow-boot-partition-to-be-mounted">Allow boot partition to be mounted</h1>
<p>sed -i ‘/\s\/boot\s/s/,noauto//’ /etc/fstab</p>

<h1 id="update-packages">Update packages</h1>
<p>apt-get update &amp;&amp; apt-get upgrade</p>

<h1 id="configure-time-zone-and-locale">Configure time zone and locale</h1>
<p>dpkg-reconfigure tzdata
dpkg-reconfigure locales</p>

<h1 id="install-some-utilities-and-services">Install some utilities and services</h1>
<p>apt-get install p7zip zip curl mediainfo avahi-daemon iw</p>

<h1 id="install-gcc-compiler-dev-tools">Install gcc compiler, dev tools</h1>
<p>apt-get install gcc make git-core</p>

<h1 id="install-scripting-tools">Install scripting tools</h1>
<p>apt-get install ruby ruby-dev ri libsqlite3-dev npm
# Fix node binary being named nodejs
cd /usr/bin; sudo ln -s nodejs node; cd</p>

<h1 id="install-node-packages">Install node packages</h1>
<p>npm install -g node-gyp</p>

<h1 id="install-rmate-for-textmate-editing-over-ssh">Install rmate for TextMate editing over ssh</h1>
<p>gem install rmate
```</p>

<h2 id="change-hostname">Change Hostname</h2>

<p>If it’s likely the Pi won’t be the only one using the local network, then it should be given a unique host name.</p>

<p><code>sh
nano /etc/hostname               # enter the desired name
nano /etc/hosts                  # replace the hostname
/etc/init.d/hostname.sh start    # to enable the changes
</code></p>

<h2 id="fake-a-hardware-clock">Fake a hardware clock</h2>

<p>The Pi doesn’t have a real time clock, so it usually defaults to some point in the past until the time can be set correctly using the Internet.  To make the clock more consistent across power cycles, it can be initialised using the last recorded date and time.  <em>(note: previous distros required the <a href="#fake-a-hardware-clock-unabridged">unabridged instructions</a>.)</em></p>

<p><code>sh
apt-get install fake-hwclock
</code></p>

<h2 id="link-settings-to-root-profile">Link settings to root profile</h2>

<p>Occasionally you’ll want to use a root shell, and then be annoyed that your aliases etc. are not configured for the root user.  You can either copy the profile files into ~/root or, as shown here, link them symbolically so that any future modifications will be reflected.</p>

<p>```sh
# change to the home folder you want to link from
cd ~xbian</p>

<h1 id="define-a-list-of-dot-files-to-link">define a list of dot files to link</h1>
<p>dotfiles=”.profile .bashrc .bash_aliases .bash_logout .nanorc .toprc .gemrc”</p>

<h1 id="link-each-existing-file-into-the-root-users-home-folder">link each existing file into the root user’s home folder</h1>
<p>for i in $dotfiles; do [ -f $i ] &amp;&amp; sudo ln -sfv ~+/$i ~root/; done</p>

<h1 id="hush-login-message">hush login message</h1>
<p>sudo touch ~root/.hushlogin
```</p>

<h2 id="generate-new-rsa-host-keys">Generate new RSA host keys</h2>

<p>These keys confirm the identity of the Pi, to prevent a malicious host from intercepting the remote login process.  Not so important for your HTPi, but good standard security practice.  Also recommended if you have <a href="#change-hostname">more than one Pi</a>.</p>

<p>```sh
rm /etc/ssh/ssh_host_*
dpkg-reconfigure openssh-server</p>

<h1 id="remove-old-host-key-from-clients-using">remove old host key from clients using:</h1>
<p># ssh-keygen -R xbian.local
```
<!--
ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key
ssh-keygen -t rsa1 -f /etc/ssh/ssh_host_key
--></p>

<p>If you’re using dropbear instead of openssh, then use:</p>

<p><code>sh
rm -f /etc/dropbear/dropbear/dropbear_*
dropbearkey -t rsa -f /etc/dropbear/dropbear_rsa_host_key
dropbearkey -t rsa -f /etc/dropbear/dropbear_rsa_host_key
/etc/init.d/dropbear restart
</code></p>

<h2 id="configure-wifi-and-bluetooth">Configure WiFi and Bluetooth</h2>

<p>XBian now includes simple WiFi configuration as part of the xbian-config setup menu.  See the <a href="#manually-configure-wifi-adapter">manual configuration</a> if you want finer control over the network settings (e.g. connecting to multiple networks).</p>

<p>My bluetooth adapter is not supported in the current build of Raspbian/XBian, but <a href="#configure-bluetooth-adapter">here is the procedure</a> I used when trying to get it running (confirmed working on a laptop running Ubuntu).</p>

<h2 id="ttl-serial-console">TTL serial console</h2>

<p>Connecting to the pi without a network can be achieved over serial cable: e.g. <code>screen /dev/tty.usbserial 115200</code>.</p>

<p>Unfortunately, the display of full screen terminal programs becomes corrupted when using
a TTL to USB serial connection to the Pi from Mac OS X. Changing the terminal type to
match your system’s <code>$TERM</code> variable enables use of programs such as <code>nano</code> and
<code>xbian-config</code> without screen corruption.</p>

<p><code>sh
sed -i '/ttyAMA0/s/vt100$/xterm-256color/' /etc/inittab
</code></p>

<p>Additionally, using <code>screen</code> results in display size issues if your terminal does not
match the 80x24 columns and lines assumed when logging in over serial. (This does not
occur when using <code>ssh</code> as the client’s current terminal size is communicated to the ssh
server.)</p>

<p>```sh
# print the current size assumed by the host
stty size
# returns: 24 80</p>

<h1 id="manually-set-correct-size-for-the-client-window">manually set correct size for the client window</h1>
<p>stty rows 18
stty cols 70
```</p>

<p>A script is available <a href="https://github.com/akkana/scripts/blob/master/termsize">on github</a> (found via <a href="http://shallowsky.com/blog/hardware/serial-24-line-terminals.html">shallowsky.com</a>) that will determine your <em>actual</em> terminal window size and set it correctly on the Pi.  The script can be run from <code>.bashrc</code> or similar.</p>

<h2 id="build-and-install-wiringpi">Build and install WiringPi</h2>

<p><a href="https://projects.drogon.net/raspberry-pi/wiringpi">WiringPi</a> is a library to access the Pi’s GPIO, SPI, and I2C headers, modelled on the Arduino Wiring system.  It also includes the <code>gpio</code> utility for use of the libraries from the command prompt.</p>

<p>```sh
apt-get install gcc make git-core libi2c-dev
git clone git://git.drogon.net/wiringPi
cd wiringPi; ./build</p>

<h1 id="test-with-gpio-utility">test with gpio utility</h1>
<p>gpio readall</p>

<h1 id="install-ruby-gem-optional">install ruby gem (optional)</h1>
<p>gem install wiringpi
```</p>

<h2 id="remove-the-desktop-environment">Remove the desktop environment</h2>

<p>If you only plan to run the terminal environment (including self-hosted programs such as XBMC), then a lot of space can be recovered by removing x11 and related packages.</p>

<p><em>TODO: mono depends upon libx11-6, so it’ll need to be (re)installed afterwards.</em></p>

<p>```sh
# desktop
apt-get purge x11-common libx11-.* xkb-data xdg-utils menu-xdg
apt-get purge desktop-file-utils fonts-freefont-ttf
apt-get purge libraspberrypi0 raspberrypi-artwork lxde-icon-theme</p>

<h1 id="network-drives">network drives</h1>
<p>apt-get purge cifs-utils samba-common smbclient nfs-common</p>

<h1 id="other">other</h1>
<p>apt-get purge liblapack3 libatlas3-base</p>

<h1 id="cleaning-up">cleaning up</h1>
<p>(cd ~pi; rm -rf Desktop python_games ocr_pi.png)
apt-get autoremove
apt-get clean
```</p>

<p><em>Note: this task is not normally required for distros such as xbian.</em></p>

<h2 id="install-mono">Install Mono</h2>

<p>Install Mono development tools, runtime, and interactive shell.</p>

<p><code>sh
apt-get install mono-devel mono-utils mono-csharp-shell
</code></p>

<!--
pkg-count
353 mono-complete
214 cli-common-dev
172 mono-devel
168 libmono-cil-dev

# for a minimal cli toolchain:
apt-get install mono-mcs mono-xbuild mono-csharp-shell
-->

<h2 id="install-xbian-onto-a-raspbian-image">Install XBian onto a Raspbian image</h2>

<p>From <a href="http://forum.xbian.org/thread-1850.html">Installing XBIAN directly on RASPBIAN IMG</a></p>

<p>```sh
# install xbian repo
wget http://xbian.brantje.com/pool/stable/main/x/xbian-package-repo/xbian-package-repo<em>1.0.0_armhf.deb
dpkg -i xbian-package-repo</em>1.0.0_armhf.deb</p>

<h1 id="enable-staging-and-development-repositories-and-update">enable staging and development repositories and update</h1>
<p>sed -i ‘/ staging|devel main/s/^#+ //’ /etc/apt/sources.list.d/xbian.list
apt-get update
# revert previous edit
sed -i ‘/ staging|devel main/s/^/### /’ /etc/apt/sources.list.d/xbian.list</p>

<h1 id="install-xbianxbmc">install xbian/xbmc</h1>
<p>apt-get install xbian-package-xbianhome xbian-package-kernel</p>

<h1 id="reboot-required-to-make-file-system-changes-and-conversion-to-btrfs">reboot required to make file system changes, and conversion to btrfs</h1>
<p>sed -i /rootfstype/s/btrfs/ext4/ /boot/cmdline.txt # do not use btrfs
reboot</p>

<h1 id="install-remaining-xbian-packages">install remaining xbian packages</h1>
<p># Note: a warning for removal of ‘sysvinit’ will be displayed,
# as xbian replaces it with the ‘upstart’ service manager.
# Also, cmdline.txt should remain unchanged, with new
# parameters written to /boot/cmdline.new.
apt-get install xbian-update xbian-package-rasp-switching</p>

<h1 id="xbmc-can-now-be-started-with-start-xbmc">XBMC can now be started with “start XBMC”</h1>

<h1 id="boot-to-desktop">boot to desktop</h1>
<p># apt-get install lightdm
```</p>

<!-- XBMC can be started with "start XBMC", Raspbian X desktop with "service lightdm start".

if you Raspbian setup used to boot into X with PI user automatically, you can keep this and indeed start / load XBMC quick and easy way - even jumping back and forth between XBMC and you X Desktop. We can click "Logout", put "xbian" as user to log in and XBMC starts. If you quit XBMC, X will come again. No reboots needed.
Both X and XBMC can be managed now from xbian-config tool (from SSH or even XBMC). There is how you RPI will boot if you select what service for autostart: -->

<h2 id="install-aircrack-and-related-tools">Install aircrack and related tools</h2>

<p>Taken from <a href="http://blog.petrilopia.net/linux/raspberry-pi-install-aircrackng-suite/">blog.petrilopia.net</a>.</p>

<p><code>sh
apt-get -y install iw reaver
apt-get -y install libssl-dev libnl-3-dev libnl-genl-3-dev
wget http://download.aircrack-ng.org/aircrack-ng-1.2-beta3.tar.gz
tar -zxvf aircrack-ng-1.2-beta3.tar.gz
cd aircrack-ng-1.2-beta3
make
make install
</code></p>

<h3 id="using-reaver">Using Reaver</h3>

<p>```sh
apt-get install reaver</p>

<h1 id="put-wifi-device-into-monitor-mode">put wifi device into monitor mode</h1>
<p>airmon-ng start wlan0</p>

<h1 id="list-available-networks">list available networks</h1>
<p>airodump-ng wlan0
# airodump-ng mon0</p>

<h1 id="set-bssid-to-target-network-name">set bssid to target network name</h1>
<p>bssid=”setthistobssid”</p>

<h1 id="start-reaver">start reaver</h1>
<p>reaver -i mon0 -b “$bssid” -vv
```</p>

<h2 id="regional-system-settings">Regional system settings</h2>

<p>Both XBian and Raspbian have system setup menus, but neither seem to setup the console keyboard correctly for the en_GB layout.  The current solution I use is to install <code>keyboard-configuration</code>, which only seems to work once <code>console-setup</code> is also installed.</p>

<p><em>The latter package will change the console font, but this can be reverted during the commands shown below. Just choose the font you prefer, or choose ‘Do not change the boot/kernel font’.</em></p>

<p>```sh
# Packages needed to change keyboard layout
apt-get install console-setup keyboard-configuration</p>

<h1 id="configure-keyboard-settings">Configure keyboard settings</h1>
<p>dpkg-reconfigure keyboard-configuration</p>

<h1 id="configure-console-font">Configure console font</h1>
<p># accept the defaults until the font selection screen
dpkg-reconfigure console-setup</p>

<h1 id="configure-time-zone-and-locale-1">Configure time zone and locale</h1>
<p>dpkg-reconfigure tzdata
dpkg-reconfigure locales
```</p>

<h2 id="install-dbox-dropbox-tool">Install dbox (dropbox tool)</h2>

<p>Follow the <a href="https://github.com/kenpratt/dbox">dbox installation instructions</a> to set up the dropbox sdk developer keys and authorisation tokens.  To use dbox for automatic folder syncing, see my post: <a href="/blog/pi-box/">Dropbox on Pi</a>.</p>

<p><code>sh
apt-get install gcc make ruby ruby-dev libsqlite3-dev
gem install dbox
</code></p>

<h2 id="setup-xbmc">Setup XBMC</h2>

<h3 id="xbmc-extensions">XBMC Extensions</h3>

<p>Use <code>wget</code> to download the latest versions from the links below, then open the zip files directly from xbmc’s addons page.</p>

<ul>
  <li><a href="http://code.google.com/p/xbmc-iplayerv2/downloads/list">http://code.google.com/p/xbmc-iplayerv2/downloads/list</a></li>
  <li><a href="http://code.google.com/p/mossy-xbmc-repo/downloads/list">http://code.google.com/p/mossy-xbmc-repo/downloads/list</a></li>
  <li><a href="http://code.google.com/p/xbmc-itv-player/downloads/list">http://code.google.com/p/xbmc-itv-player/downloads/list</a></li>
</ul>

<h3 id="xbmc-settings">XBMC Settings</h3>

<p>If you are storing media in the root folder of an NTFS formatted hard drive, you may see some system folders while using the video/audio file views.  You can hide these system folders, change other advanced xbmc behaviour, or preset/lock standard settings in <a href="http://wiki.xbmc.org/?title=Advancedsettings.xml">advancedsettings.xml</a>.</p>

<p>```xml ~/.xbmc/userdata/advancedsettings.xml</p>
<video>
    <!-- hide system folders from the video files view -->
    <!-- you could also add these to 'excludefromscan' -->
    <excludefromlisting>
        <regexp>(\$RECYCLE.BIN|System Volume Information)</regexp>
    </excludefromlisting>
</video>
<audio>
    <!-- do likewise for the audio files view -->
    <excludefromlisting>
        <regexp>(\$RECYCLE.BIN|System Volume Information)</regexp>
    </excludefromlisting>
</audio>
<p>```</p>

<h2 id="useful-extras-not-always-used">Useful extras, not always used</h2>

<p>Stuff used infrequently, or currently being tested</p>

<h3 id="packages-from-raspbian">Packages from Raspbian</h3>

<p>Some standard packages that are usually excluded from the xbian distro, as they are not required for use of xbmc only.</p>

<p>```sh
apt-get install omxplayer</p>

<h1 id="included-on-xbian--10b">included on xbian &gt;= 1.0b</h1>
<p>apt-get install psmisc usbutils
```</p>

<h3 id="other-useful-packages">Other useful packages</h3>

<p><code>sh
apt-get install fs2resize exfat-fuse
apt-get install clang geany
apt-get install sysv-rc-conf
</code></p>

<h3 id="find-the-ip-address">Find the IP address</h3>

<p>You can get the IP address from your Pi, by running either of the following commands locally on the device.</p>

<p>```sh
ip r | grep -o ‘src.*’</p>

<p>ifconfig 2&gt;&amp;1 | grep cast | grep -o ‘inet [^ ]*’
```</p>

<p>Connect to the address that has the same subnet (starts similar) as the IP address you will be connecting from, ignoring the localhost address (127.0.0.1).</p>

<p>If it isn’t possible to run a command locally on the Pi (e.g. there is no monitor or keyboard attached), you can either <a href="http://www.recantha.co.uk/blog/?p=2397">scan the network</a>, run <code>nmap 192.168.0.1/24 -p 22</code>, or view ‘Attached Devices’ in your Router’s setup.  Look for a matching hostname or MAC address (which will start with <code>b8:27:eb</code> for the on-board LAN).</p>

<h3 id="testing-pvr">Testing PVR</h3>

<p><code>sh
apt-get install vdr-plugin-dvbsddevice
</code></p>

<h3 id="setting-up-webcam">Setting up webcam</h3>

<p>Use ‘motion’ or ‘fswebcam’, motion may need a default cfg copying</p>

<p><code>sh
apt-get install motion
cp /etc/default/motion /etc/motion/motion.conf
</code></p>

<h3 id="configure-bluetooth-adapter">Configure bluetooth adapter</h3>

<p><a href="http://www.ctheroux.com/2012/08/a-step-by-step-guide-to-setup-a-bluetooth-keyboard-and-mouse-on-the-raspberry-pi/">Adapted from ctheroux</a>.</p>

<p>```sh
# install bluetooth support and dependencies
agi bluez python-gobject  # minimal?
agi bluetooth bluez-utils  # full</p>

<h1 id="for-management-from-the-desktop">for management from the desktop</h1>
<p>agi blueman</p>

<h1 id="check-adapter-is-working">check adapter is working*</h1>
<p>hcitool dev</p>

<h1 id="scan-for-devices">scan for devices</h1>
<p>hcitool scan</p>

<h1 id="pair-with-device-using-the-address-listed-from-scan">pair with device, using the address listed from scan</h1>
<p>bluez-simple-agent hci0 XX:XX:XX:XX:XX:XX</p>

<h1 id="trust-the-device">trust the device</h1>
<p>bluez-test-device trusted XX:XX:XX:XX:XX:XX yes</p>

<h1 id="connect-to-input-device">connect to input device</h1>
<p>bluez-test-input hci0 XX:XX:XX:XX:XX:XX</p>

<h1 id="adapter-status">adapter status</h1>
<p>hciconfig
```</p>

<p><em>*Note: a bluetooth adapter may be listed in <code>lsusb</code> and <code>hciconfig</code>, without being recognised by <code>hcitool</code>. This is the case with the belkin dongle I have, so use <code>hcitool</code> to check that a device is working properly.</em></p>

<h2 id="troubleshooting-and-backup">Troubleshooting and backup</h2>

<p>Some useful commands and procedures</p>

<h3 id="backup-settings">Backup settings</h3>

<ul>
  <li>Settings, addons etc. are in ~/.xbmc</li>
  <li>.xbmc/userdata - preferences etc</li>
  <li>.xbmc/addons - binaries, themes</li>
  <li>.xbmc/addons/packages - original downloads, can use with “install from zip”</li>
</ul>

<p>```sh
# backup profile settings
zip -ry xbmc .xbmc/
zip -ry dotfiles .bash_aliases .nanorc .toprc .ssh</p>

<h1 id="backup-system-config-files">backup system config files</h1>
<p>sudo zip -ry basecfg /etc/wpa_supplicant/wpa_supplicant.conf
```</p>

<p>Or using tar..</p>

<p>```sh
# backup profile settings
tar -czf xbmc-backup.tar.gz .xbmc</p>

<h1 id="restore-profile-settings">restore profile settings</h1>
<p>sudo initctl stop xbmc
tar -xzf xbmc-backup.tar.gz
sudo initctl start xbmc
```</p>

<h3 id="clear-cached-network-adapter">Clear cached network adapter</h3>

<p>(needed for switching cards between devices)</p>

<p><code>sh
echo | sudo tee /etc/udev/rules.d/70-persistent-net.rules
</code></p>

<h3 id="quick-tips">Quick Tips</h3>

<ul>
  <li>You can detect hdmi audio modes: <code>/opt/vc/bin/tvservice -a</code></li>
  <li>Setup CEC remote over hdmi from console: <code>cec-config</code></li>
</ul>

<h2 id="not-used-with-recent-versions">Not used with recent versions</h2>

<p>Previously useful functionality or workarounds</p>

<h3 id="manually-configure-wifi-adapter">Manually configure WiFi adapter</h3>

<p><a href="http://www.savagehomeautomation.com/raspi-airlink101">Instructions adapted from here</a>.</p>

<p>Use <code>lsusb</code> to check that the adapter is recognised, and <code>lsmod</code> to check the kernel module (e.g. <code>8192cu</code>) is loaded.</p>

<p><code>sh
sudo nano /etc/network/interfaces
</code></p>

<p>Make sure the following lines exist in the interfaces file, adding them as needed:</p>

<p><code>
allow-hotplug wlan0
iface wlan0 inet manual
wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf
</code></p>

<p>You may have the line <code>wireless-power off</code> in this file, which relates to power <strong><em>management</em></strong> only.  I’ve commented it out as it resulted in errors logged during <code>ifup</code> and power management remained off without it.</p>

<p><code>sh
sudo nano /etc/wpa_supplicant/wpa_supplicant.conf
</code></p>

<p>Add your network details to wpa_supplicant.conf, using the following template:</p>

<p><code>
network={
  ssid="YOUR-NETWORK-SSID"
  proto=WPA2
  key_mgmt=WPA-PSK
  pairwise=CCMP TKIP
  group=CCMP TKIP
  psk="YOUR-WLAN-PASSWORD"
}
</code></p>

<p>Reinitialise the adapter, and check it’s connected.</p>

<p><code>sh
sudo ifdown wlan0
sudo ifup wlan0
# you may get some errors here, even when successful
</code></p>

<p>Use <code>iwconfig</code> to view wifi adapter info and <code>ifconfig</code> for general network info.</p>

<h3 id="fake-a-hardware-clock-unabridged">Fake a hardware clock (unabridged)</h3>

<p>More complicated instructions, as used on previous versions of XBian.</p>

<p><code>sh
touch /etc/init.d/hwclock.sh
/etc/init.d/ntp restart
apt-get install ntpdate fake-hwclock
ntpdate-debian
dpkg-reconfigure tzdata
sed -i 's/^exit 0/ntpdate-debian\nexit 0/g' /etc/rc.local
</code></p>

<h3 id="fix-ssh-access-using-public-key">Fix ssh access using public key</h3>

<p>```sh
# must be owned by root
chown root: ~ ~/.ssh
# no write for others
chmod a=rx,u+w  ~</p>

<h1 id="no-access-for-others">no access for others</h1>
<p>chmod -R go-rwx ~/.ssh
# public key can be readable
chmod a+r ~/.ssh/id_rsa.pub
```</p>

<h3 id="download-openssh-sftp-server">Download OpenSSH sftp server</h3>

<p><code>sh
apt-get -d install openssh-server
cp /var/cache/apt/archives/openssh-server_*.deb .
dpkg-deb -X openssh-server_*.deb sftp
cp sftp/usr/lib/openssh/sftp-server /usr/lib/
rm -r sftp openssh-server_*.deb
</code></p>

<h3 id="update-firmware-without-kernel">Update firmware without kernel</h3>

<p><code>sh
wget http://goo.gl/1BOfJ -O /usr/bin/rpi-update &amp;&amp; chmod +x /usr/bin/rpi-update
SKIP_KERNEL=1 rpi-update 128
</code></p>

<h3 id="allow-xbmc-to-unmount-usb-drives">Allow XBMC to unmount USB drives</h3>

<p>XBian used to include the usbmount package to mount USB devices as soon as they are connected.  This prevented XBMC from bring able to use the udisk service to mount and unmount USB drives itself, due to root privileges being required to unmount devices mounted by usbmount.</p>

<p>```sh
# disable the usbmount package
sed -i ‘/ENABLED=/s/=1/=0/’ /etc/usbmount/usbmount.conf</p>

<h1 id="optionally-remove-unused-usbmount-directories">optionally remove unused usbmount directories</h1>
<p># umount /media/usb<em>; rmdir /media/usb</em>; rm /media/usb
```</p>

<p>Drives can be unmounted manually using <code>udisks</code> without needing to be root, and members of the <code>plugdev</code> group can also use <code>pumount</code>.</p>

<h3 id="install-shairport">Install Shairport</h3>

<p>Instructions found <a href="http://tomsolari.id.au/post/27169019561/airplay-music-streaming-on-raspberry-pi">here</a> (alt site <a href="http://cheeftun.appspot.com/trouch.com/2012/08/03/airpi-airplay-audio-with-raspberry/">here</a>)</p>

<p>More recent instructions: http://lifehacker.com/5978594/turn-a-raspberry-pi-into-an-airplay-receiver-for-streaming-music-in-your-living-room</p>

<p>A change in IOS 6 <a href="http://jordanburgess.com/post/38986434391/raspberry-pi-airplay">requires Perl Net-SDP</a> module to installed.</p>

<p><code>sh
git clone https://github.com/njh/perl-net-sdp.git perl-net-sdp
cd perl-net-sdp
perl Build.PL
sudo ./Build
sudo ./Build test
sudo ./Build install
cd ..
</code></p>

<p><code>sh
# do as root
sudo -s
apt-get install alsa-utils
modprobe snd_bcm2835
# optionally set to headphone output
# amixer cset numid=3 1
# optionally restore to hdmi output
# amixer cset numid=3 2
apt-get install build-essential libssl-dev libcrypt-openssl-rsa-perl libao-dev libio-socket-inet6-perl libwww-perl avahi-utils pkg-config
wget https://github.com/albertz/shairport/zipball/master
unzip master
cd albertz-shairport-*
make install
cp shairport.init.sample /etc/init.d/shairport
# add to start of shairport: modprobe snd_bcm2835
nano /etc/init.d/shairport
# optionally edit name of service (remove port number):
nano /usr/local/bin/shairport.pl
insserv shairport
# manually start [services](http://pi-raspberry.blogspot.co.uk/2012/08/shairport-raspberry-pi.html)
service avahi-daemon start
/etc/init.d/shairport start
# exit root
exit
</code></p>
<div class="footnotes">
  <ol>
    <li id="fn:hostname">
      <p>It should be possible to connect with the hostname even without zeroconfig, e.g. <code>xbian@xbian</code> or <code>pi@raspberrypi</code> (on raspbian), but I’ve had no luck with this.<a href="#fnref:hostname" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stellaris Virtual Serial Device]]></title>
    <link href="http://jmeosbn.github.io/blog/stellaris-virtual-serial-device/"/>
    <updated>2012-12-10T02:48:00+00:00</updated>
    <id>http://jmeosbn.github.io/blog/stellaris-virtual-serial-device</id>
    <content type="html"><![CDATA[<p>The Stellaris <a href="http://www.ti.com/ww/en/launchpad/stellaris_head.html">Launchpad</a> is able to provide a virtual serial port over the debug USB interface.  Data can be sent in either direction using this serial connection, to interact with program execution, or log it’s output.</p>

<!-- more -->

<h2 id="device-permissions">device permissions</h2>

<p>Root privileges are required to access the device on some Linux and Unix based systems, so remember to use <code>sudo</code> with commands such as <code>lm4flash</code> and <code>ttylog</code> which directly access the device.</p>

<p>Alternatively, on Linux you can configure permissions for the device using udev rules:</p>

<p>``` sh
	$ sudo nano /etc/udev/rules.d/42-sellaris.rules</p>

<pre><code># add the following lines:
ATTRS{product}=="In-Circuit Debug Interface", OWNER="devuser" KERNEL=="ttyACM?" ```
</code></pre>

<p>The (fairly open) rules shown above, give the user named ‘<em>devuser</em>’ permission to access the launchpad’s usb interface, along with it’s virtual serial device.</p>

<p>Note: these rules should be more specific if you have similar devices that you don’t wish to allow access to inadvertently.</p>

<p><code>sh
	# Exact match for Stellaris LM4F120XL
	SUBSYSTEMS=="usb", ATTRS{idVendor}=="1cbe", ATTRS{idProduct}=="00fd", MODE="0660", OWNER="devuser"
</code></p>

<p>The device in this rule is strictly defined, and read/write permissions have been explicitly set for it.  Also, because the whole device is matched directly (rather than it’s individual interfaces), only one rule is required.  You could also try assigning the device to a group, using <code>GROUP="devgroup"</code>.</p>

<p>To define these rules, the exact name, vendor, and/or product id needs to be known.  You can check these values using <code>dmesg</code> after connecting your device; the lines of interest are shown below.</p>

<p><code>sh
	$ dmesg
	# &lt;snip&gt;
	[39911.201497] usb 1-1.2.3: New USB device found, idVendor=1cbe, idProduct=00fd
	[39911.201537] usb 1-1.2.3: Product: In-Circuit Debug Interface
	[39911.201551] usb 1-1.2.3: Manufacturer: Texas Instruments
	[39911.344575] cdc_acm 1-1.2.3:1.0: ttyACM0: USB ACM device
</code></p>

<h2 id="serial-device">serial device</h2>

<p>If you want to use the serial connection to provide input or commands to the launchpad, you’ll need a terminal emulator that can connect to a serial device.</p>

<p>``` sh
	$ cd stellaris/boards/ek-lm4f120xl/qs-rgb
	$ make
	$ lm4flash gcc/qs-rgb.bin</p>

<pre><code># Use of screen on linux
$ screen /dev/ttyACM? 115200

# Use of screen on mac os x
$ screen /dev/tty.usbmodem* 115200

# Kill the connection by typing: ^A k
#  to list other commands, type: ^A ? ```
</code></pre>

<p>Use of the wildcard in <code>ttyACM?</code> allows for the times the device may get assigned a different number, e.g. when power cycling or reconnecting.  If you have another ttyACM device connected then you should probably use it’s full name.</p>

<p>On OS X the device should be named similar to <code>tty.usbmodem</code>, with the serial number of the device appended.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing the Stellaris Toolchain]]></title>
    <link href="http://jmeosbn.github.io/blog/testing-the-stellaris-toolchain/"/>
    <updated>2012-11-15T20:40:00+00:00</updated>
    <id>http://jmeosbn.github.io/blog/testing-the-stellaris-toolchain</id>
    <content type="html"><![CDATA[<p>Once the <a href="https://github.com/jsnyder/arm-eabi-toolchain">toolchain</a> is <a href="/blog/compiling-the-stellaris-toolchain">installed</a>, here’s the basic steps to compile an example and get the code onto the launchpad.  A mirror for the Stellaris example code and other pieces is available on <a href="https://github.com/yuvadm/stellaris">github</a>.</p>

<!-- more -->

<p>``` sh
	# Add the toolchain to your profile’s path
	# Ideally this should go into your bash profile
	$ export PATH=$HOME/arm-cs-tools/bin:$PATH</p>

<pre><code># Test the compiler
$ git clone https://github.com/yuvadm/stellaris
$ cd stellaris/boards/ek-lm4f120xl/project0/
$ make clean; make

# Flash binary to the board
$ lm4flash gcc/project0.bin

# Try making a source modification
$ nano project0.c
$ make &amp;&amp; lm4flash gcc/project0.bin ```
</code></pre>

<h2 id="debugging">debugging</h2>

<p><a href="https://github.com/utzig/lm4tools">lm4tools</a> has a bridge to enable TCP over USB, so code running on the device can be debugged using gdb from the compiled toolchain.</p>

<p>``` sh
	# build with debug symbols
	$ make clean &amp;&amp; make DEBUG=1
	$ lm4flash gcc/project0.bin</p>

<pre><code># start the tcp/usb bridge (in the background)
$ lmicdi &amp;

# start gdb and connect to device
$ arm-none-eabi-gdb gcc/project0.axf
Reading symbols from ./gcc/project0.axf...done.
(gdb) target remote :7777
Remote debugging using :7777
0x00000494 in SysCtlDelay ()
(gdb) c
Continuing.
^C
[Thread &lt;main&gt;] #1 stopped.
0x00000662 in SysCtlDelay ()
(gdb) detach
Ending remote debugging.
(gdb) quit

# quit lmicdi to allow use of lm4flash
$ sudo killall lmicdi # or type 'fg' followed by ^C ```
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compiling the Stellaris Toolchain]]></title>
    <link href="http://jmeosbn.github.io/blog/compiling-the-stellaris-toolchain/"/>
    <updated>2012-11-15T20:02:00+00:00</updated>
    <id>http://jmeosbn.github.io/blog/compiling-the-stellaris-toolchain</id>
    <content type="html"><![CDATA[<p>If you have a Stellaris <a href="http://www.ti.com/ww/en/launchpad/stellaris_head.html">Launchpad</a> - and don’t want to use the <a href="http://www.ti.com/tool/SW-EK-LM4F120XL">official</a> tools - you can mostly follow the instructions at <a href="http://blog.y3xz.com/blog/2012/10/29/an-open-toolchain-for-the-ti-stellaris/">y3xz</a> to build your own toolchain on any Unix/Linux based system using the <a href="https://github.com/jsnyder/arm-eabi-toolchain">ARM EABI Toolchain Builder</a>.  This includes Mac OS X, but I ran into a couple of minor issues as listed below.</p>

<!-- more -->

<p><em>(If you don’t fancy building the toolchain, <a href="http://www.yagarto.de/">yagarto</a> offers recent binaries for Windows and Mac OS X that target ARM devices.)</em></p>

<p>Note, the libraries included with the Codesourcery Lite <a href="http://www.mentor.com/embedded-software/sourcery-tools/sourcery-codebench/editions/lite-edition">toolchain</a> used here <a href="https://sourcery.mentor.com/GNUToolchain/release2322?@template=datasheet">do not support</a> the hardware FPU of the ARM <a href="http://en.wikipedia.org/wiki/ARM_Cortex-M#Cortex-M4">Cortex-M4F</a>, using software floating point code instead.  There is a <a href="https://github.com/prattmic/arm-cortex-m4-hardfloat-toolchain">hardfloat-toolchain</a> builder (which I’ve not used yet), and ARM is maintaining a <a href="https://launchpad.net/gcc-arm-embedded/+download">GCC toolchain</a> targeting embedded ARM processors, which I’ll probably try building next.</p>

<p>For more details on the launchpad, and the various libraries etc. that it uses, T.I. has a selection of <a href="http://www.ti.com/product/lm4f120h5qr">technical documentation</a> on their site.</p>

<h2 id="toolchain">toolchain</h2>

<p>The makefile failed to download the source archive, so <a href="https://sourcery.mentor.com/GNUToolchain/package10384/public/arm-none-eabi/arm-2012.03-56-arm-none-eabi.src.tar.bz2">download</a> it manually into the root of the toolchain repo.  Make will continue so long as the filename and checksum matches.</p>

<h2 id="lm4tools">lm4tools</h2>

<p>The <code>lm4flash</code> tool included in <a href="https://github.com/utzig/lm4tools/commit/cc466b1">recent</a> versions of <a href="https://github.com/utzig/lm4tools">lm4tools</a> is unable to read the serial number of the device on OS X, so compiled code cannot be flashed to the launchpad device.</p>

<p><strong>Update: The dev has <a href="https://github.com/utzig/lm4tools/commit/99d501b">committed</a> a workaround that fixes <code>lm4flash</code> on OS X.</strong></p>

<p><code>sh
	$ ./lm4flash project0.bin
	Unable to get device serial number: LIBUSB_ERROR_OTHER
	Unable to find any ICDI devices
</code></p>

<p>Newer versions of lm4tools require a kernel extension to be installed on OS X (this will prevent access to the virtual serial device), see the <a href="https://github.com/utzig/lm4tools/issues/8">issue</a> on github for more info.  The simplest workaround is to checkout and build commit <a href="https://github.com/utzig/lm4tools/commit/ea3c905">ea3c905</a>, which doesn’t check for the serial number.</p>

<p>Btw, you will get a similar error if your system requires root privileges to access the device directly over usb; try using <code>sudo</code> on linux/unix systems if you have issues.</p>

<h2 id="more-links">more links</h2>

<p><a href="http://hertaville.com/2012/05/28/gcc-arm-toolchain-stm32f0discovery/">Setting up the GCC ARM Toolchain</a> - focuses on using ARM’s <a href="https://launchpad.net/gcc-arm-embedded/+download">GCC toolchain</a> on Windows</p>

<p><a href="/testing-the-stellaris-toolchain">Testing the Stellaris Toolchain</a> - my overview for compiling and testing code on the device.</p>

]]></content>
  </entry>
  
</feed>
