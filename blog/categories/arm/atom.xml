<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: arm | git-log(1)]]></title>
  <link href="http://jmeosbn.github.com/blog/categories/arm/atom.xml" rel="self"/>
  <link href="http://jmeosbn.github.com/"/>
  <updated>2012-12-13T00:01:03+00:00</updated>
  <id>http://jmeosbn.github.com/</id>
  <author>
    <name><![CDATA[Jamie Osborne]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Stellaris Virtual Serial Device]]></title>
    <link href="http://jmeosbn.github.com/stellaris-virtual-serial-device/"/>
    <updated>2012-12-10T02:48:00+00:00</updated>
    <id>http://jmeosbn.github.com/stellaris-virtual-serial-device</id>
    <content type="html"><![CDATA[<p>The Stellaris <a href="http://www.ti.com/ww/en/launchpad/stellaris_head.html">Launchpad</a> is able to provide a virtual serial port over the debug USB interface.  With this serial connection, data can be sent in either direction, eg. to interact with program execution, or to simply log it's output.</p>

<h2>device permissions</h2>

<p>Root privileges are required to access the device on some Linux and Unix based systems, so remember to use <code>sudo</code> with anything directly accessing the device, such as <code>lm4flash</code> and <code>ttylog</code>.</p>

<p>Alternatively, on Linux you can configure permissions for the device using udev rules:</p>

<p>``` sh</p>

<pre><code>$ sudo nano /etc/udev/rules.d/42-sellaris.rules

# add the following lines:
ATTRS{product}=="In-Circuit Debug Interface", OWNER="devuser"
KERNEL=="ttyACM?", OWNER="devuser"
</code></pre>

<p>```</p>

<p>The (fairly open) rules shown above gives the user named '<em>devuser</em>' permission to access the launchpad's usb interface, along with it's virtual serial device.</p>

<p>Note: these rules should be more specific if you have similar devices that you don't wish to allow access to inadvertently.</p>

<p>``` sh</p>

<pre><code># Exact match for Stellaris LM4F120XL
SUBSYSTEMS=="usb", ATTRS{idVendor}=="1cbe", ATTRS{idProduct}=="00fd", MODE="0660", OWNER="devuser"
</code></pre>

<p>```</p>

<p>The device in this rule is strictly defined and read/write permissions have been explicitly set for it.  Also, because the device itself is matched directly (rather than it's individual interfaces), only one rule is required.  You could also try assigning the device to a group, using <code>GROUP="devgroup"</code>.</p>

<p>To define these rules, the exact name, vendor and/or product id needs to be known.  You can check these values using <code>dmesg</code> after connecting your device; the lines of interest are shown below.</p>

<p>``` sh</p>

<pre><code>$ dmesg
# &lt;snip&gt;
[39911.201497] usb 1-1.2.3: New USB device found, idVendor=1cbe, idProduct=00fd
[39911.201537] usb 1-1.2.3: Product: In-Circuit Debug Interface
[39911.201551] usb 1-1.2.3: Manufacturer: Texas Instruments
[39911.344575] cdc_acm 1-1.2.3:1.0: ttyACM0: USB ACM device
</code></pre>

<p>```</p>

<h2>serial device</h2>

<p>If you want to use the serial connection to provide input or commands to the launchpad, you'll need a terminal emulator that can connect to a serial device.</p>

<p>``` sh</p>

<pre><code>$ cd stellaris/boards/ek-lm4f120xl/qs-rgb
$ make
$ lm4flash gcc/qs-rgb.bin

# Use of screen on linux
$ screen /dev/ttyACM? 115200

# Use of screen on mac os x
$ screen /dev/tty.usbmodem* 115200

# Kill the connection by typing: ^A k
#  to list other commands, type: ^A ?
</code></pre>

<p>```</p>

<p>Use of the wildcard in <code>ttyACM?</code> allows for the times the device may get assigned a different number, eg. when power cycling or reconnecting - if you have another ttyACM device connected, then you should probably use it's full name.</p>

<p>On OS X the device should be named similar to <code>tty.usbmodem</code>, with the serial number of the device appended.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing the Stellaris Toolchain]]></title>
    <link href="http://jmeosbn.github.com/testing-the-stellaris-toolchain/"/>
    <updated>2012-11-15T20:40:00+00:00</updated>
    <id>http://jmeosbn.github.com/testing-the-stellaris-toolchain</id>
    <content type="html"><![CDATA[<p>Once the <a href="https://github.com/jsnyder/arm-eabi-toolchain">toolchain</a> is <a href="/compiling-the-stellaris-toolchain/">installed</a>, here's the basic steps to compile an example and get the code onto the launchpad.  A mirror for the Stellaris example code and other pieces is available on <a href="https://github.com/yuvadm/stellaris">github</a>.</p>

<p>``` sh</p>

<pre><code># Add the toolchain to your profile's path
# Ideally this should go into your bash profile
$ export PATH=$HOME/arm-cs-tools/bin:$PATH

# Test the compiler
$ git clone https://github.com/yuvadm/stellaris
$ cd stellaris/boards/ek-lm4f120xl/project0/
$ make clean; make

# Flash binary to the board
$ lm4flash gcc/project0.bin

# Try making a source modification
$ nano project0.c
$ make &amp;&amp; lm4flash gcc/project0.bin
</code></pre>

<p>```</p>

<h2>debugging</h2>

<p><a href="https://github.com/utzig/lm4tools">lm4tools</a> has a bridge to enable TCP over USB, so code running on the device can be debugged using gdb from the compiled toolchain.</p>

<p>``` sh</p>

<pre><code># build with debug symbols
$ make clean &amp;&amp; make DEBUG=1
$ lm4flash gcc/project0.bin

# start the tcp/usb bridge (in the background)
$ lmicdi &amp;

# start gdb and connect to device
$ arm-none-eabi-gdb gcc/project0.axf
Reading symbols from ./gcc/project0.axf...done.
(gdb) target remote :7777
Remote debugging using :7777
0x00000494 in SysCtlDelay ()
(gdb) c
Continuing.
^C
[Thread &lt;main&gt;] #1 stopped.
0x00000662 in SysCtlDelay ()
(gdb) detach
Ending remote debugging.
(gdb) quit

# quit lmicdi to allow use of lm4flash
$ sudo killall lmicdi # or type 'fg' followed by ^C
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compiling the Stellaris Toolchain]]></title>
    <link href="http://jmeosbn.github.com/compiling-the-stellaris-toolchain/"/>
    <updated>2012-11-15T20:02:00+00:00</updated>
    <id>http://jmeosbn.github.com/compiling-the-stellaris-toolchain</id>
    <content type="html"><![CDATA[<p>If you have a Stellaris <a href="http://www.ti.com/ww/en/launchpad/stellaris_head.html">Launchpad</a> - and don't want to use the <a href="http://www.ti.com/tool/SW-EK-LM4F120XL">official</a> tools - you can mostly follow the instructions at <a href="http://blog.y3xz.com/blog/2012/10/29/an-open-toolchain-for-the-ti-stellaris/">y3xz</a> to build your own toolchain on any Unix/Linux based system using the <a href="https://github.com/jsnyder/arm-eabi-toolchain">ARM EABI Toolchain Builder</a>.  This includes Mac OS X, but I ran into a couple of minor issues as listed below.</p>

<p>Note, the libraries included with the Codesourcery Lite <a href="http://www.mentor.com/embedded-software/sourcery-tools/sourcery-codebench/editions/lite-edition">toolchain</a> used here <a href="https://sourcery.mentor.com/GNUToolchain/release2322?@template=datasheet">do not support</a> the hardware FPU of the ARM <a href="http://en.wikipedia.org/wiki/ARM_Cortex-M#Cortex-M4">Cortex-M4F</a>, using software floating point code instead.  There is a <a href="https://github.com/prattmic/arm-cortex-m4-hardfloat-toolchain">hardfloat-toolchain</a> builder (which I've not used yet), and ARM is maintaining a <a href="https://launchpad.net/gcc-arm-embedded/+download">GCC toolchain</a> targeting embedded ARM processors, which I'll probably try building next.</p>

<p>For more details on the launchpad, and the various libraries etc. that it uses, T.I. has a selection of <a href="http://www.ti.com/product/lm4f120h5qr">technical documentation</a> on their site.</p>

<h2>toolchain</h2>

<p>The makefile failed to download the source archive, you can <a href="https://sourcery.mentor.com/GNUToolchain/package10384/public/arm-none-eabi/arm-2012.03-56-arm-none-eabi.src.tar.bz2">download</a> it manually into the root of the toolchain repo and make will continue so long as the checksum matches.</p>

<h2>lm4tools</h2>

<p>The <code>lm4flash</code> tool included in <a href="https://github.com/utzig/lm4tools/commit/cc466b1">recent</a> versions of <a href="https://github.com/utzig/lm4tools">lm4tools</a>, is unable to read the serial number of the device on OS X; so compiled code cannot be flashed to the launchpad device.</p>

<p><strong>Update: The dev has <a href="https://github.com/utzig/lm4tools/commit/99d501b">committed</a> a workaround that fixes <code>lm4flash</code> on OS X.</strong>
``` sh</p>

<pre><code>$ ./lm4flash project0.bin
Unable to get device serial number: LIBUSB_ERROR_OTHER
Unable to find any ICDI devices
</code></pre>

<p>```</p>

<p>Newer versions of lm4tools require a kernel extension to be installed on OS X (this will prevent access to the virtual serial device), see the <a href="https://github.com/utzig/lm4tools/issues/8">issue</a> on github for more info.  The simplest workaround is to checkout and build commit <a href="https://github.com/utzig/lm4tools/commit/ea3c905">ea3c905</a>, which doesn't check for the serial number.</p>

<p>Btw, you will get a similar error if your system requires root privileges to access the device directly over usb; try using <code>sudo</code> on linux/unix systems if you have issues.</p>

<h2>more links</h2>

<p><a href="http://hertaville.com/2012/05/28/gcc-arm-toolchain-stm32f0discovery/">Setting up the GCC ARM Toolchain</a> - focuses on using ARM's <a href="https://launchpad.net/gcc-arm-embedded/+download">GCC toolchain</a> on Windows</p>

<p><a href="/testing-the-stellaris-toolchain">Testing the Stellaris Toolchain</a> - my overview for compiling and testing code on the device.</p>
]]></content>
  </entry>
  
</feed>
