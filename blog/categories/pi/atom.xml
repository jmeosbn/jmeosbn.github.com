<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: pi | git-log(1)]]></title>
  <link href="http://jmeosbn.github.com/blog/categories/pi/atom.xml" rel="self"/>
  <link href="http://jmeosbn.github.com/"/>
  <updated>2013-01-28T01:10:40+00:00</updated>
  <id>http://jmeosbn.github.com/</id>
  <author>
    <name><![CDATA[Jamie Osborne]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dropbox on Pi]]></title>
    <link href="http://jmeosbn.github.com/blog/pi-box/"/>
    <updated>2012-12-19T00:54:00+00:00</updated>
    <id>http://jmeosbn.github.com/blog/pi-box</id>
    <content type="html"><![CDATA[<p>There&rsquo;s currently no build of the Dropbox sync client that runs on ARM devices; while there is source available, it&rsquo;s not suitable for automatic, unattended sync on a Raspberry Pi that may not have any windowing system installed.</p>

<p>Dropbox does make various SDKs available though, which enables a ruby or python script to be used instead of the official client.</p>

<h1 id="a-ready-made-solution">a ready made solution..</h1>

<p><a href="https://github.com/kenpratt/dbox">dbox</a> is a great ruby client for Dropbox that can locally create, clone, push, pull, sync, and move, a Dropbox folder hierarchy.  It can be used as an API directly from another ruby script, or with the included command line tool.</p>

<blockquote>
  <p><a href="https://github.com/kenpratt/dbox">dbox</a><br />
Dropbox integration made easy. This robust client gives you control over what, where, and when you sync with Dropbox.</p>
</blockquote>

<p>dbox syncs one file at a time, so it won&rsquo;t be as quick as the official client when syncing large amounts of files.  For most uses this will only be an issue when initially cloning a large folder.</p>

<h2 id="installation">installation</h2>

<p>Before installing dbox, make sure you have any needed packages.</p>

<p><code>sh
	sudo apt-get install ruby ruby-dev libsqlite3-dev
	sudo gem install dbox
</code></p>

<p>Then follow the rest of the instructions from the <a href="https://github.com/kenpratt/dbox">dbox</a> page, to configure your keys and clone your Dropbox folder.</p>

<p>To run dbox periodically, download<sup id="fnref:dl"><a href="#fn:dl" rel="footnote">1</a></sup> the <a href="https://github.com/kenpratt/dbox/blob/master/sample_polling_script.rb">example script</a> and make it executable, then replace the example keys and path settings with your own.</p>

<!--	cp /var/lib/gems/1.9.1/gems/dbox-0.7.2/sample_polling_script.rb dboxsync.rb -->

<p><code>sh
	wget https://raw.github.com/kenpratt/dbox/master/sample_polling_script.rb
	mv ./sample_polling_script.rb dboxsync.rb
	chmod +x dboxsync.rb
	nano dboxsync.rb
	./dboxsync.rb
</code></p>

<p>All output is written to a log file, so it&rsquo;s normal not to see any output while running.  If you want to see some basic info while testing, change the script so <code>LOGFILE = STDOUT</code>.  To show the full syncing progress and other debug info, set the level of the <a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/logger/rdoc/Logger.html">logger class</a> by changing the script so it reads <code>LOGGER.level = Logger::DEBUG</code>.</p>

<p>To have the script run on startup, add the following entry to <code>/etc/rc.local</code>.</p>

<p>```sh
	sudo nano /etc/rc.local</p>

<pre><code># add the following
if ! pgrep -f dboxsync; then
  sudo -u xbian nice -n 10 /home/xbian/dboxsync.rb &amp;
fi ```
</code></pre>

<p>There&rsquo;s more proper ways of doing this, but this seemed the simplest.</p>

<!-- more -->

<h2 id="todo">todo</h2>

<ul>
  <li>increase polling delay, but add detection of local changes to initiate push/pull</li>
</ul>

<h2 id="notes">notes</h2>

<p>While cron or similar could be used to run dbox periodically, each separate invocation of dbox from the command line incurs a startup delay of a few seconds, during which time the Pi&rsquo;s CPU is maxed out loading ruby and the code needed to run dbox.  This isn&rsquo;t ideal and would likely cause issues if the Pi is used as a media player.</p>

<p>The sample_polling_script accesses dbox directly though it&rsquo;s ruby API, and doesn&rsquo;t exit during each polling interval.  Therefore, code remains cached in memory<sup id="fnref:mem"><a href="#fn:mem" rel="footnote">2</a></sup> and the delay occurs only once upon startup; this is a great advantage over running the command line version periodically.</p>

<h1 id="alternatives">alternatives</h1>

<p>Here&rsquo;s some more options I considered, in order of decreasing usefulness.</p>

<h2 id="one-way-sync">one way sync</h2>

<p>Create a simple ruby script to sync files one way - <em>from Dropbox</em> - using the Dropbox SDK.  It&rsquo;s also possible to sync both ways in ruby, but <a href="https://github.com/kenpratt/dbox">dbox</a> has already done a great job implementing that.</p>

<p>Ruby SDK <a href="https://www.dropbox.com/developers/start/setup#ruby">Tutorial</a>, <a href="https://www.dropbox.com/static/developers/dropbox-ruby-sdk-1.5.1-docs/index.html">Documentation</a>.</p>

<p>eg. See the <a href="https://www.dropbox.com/static/developers/dropbox-ruby-sdk-1.5.1-docs/DropboxClient.html#method-i-delta">delta method</a> to keep local files in sync without writing too much code.</p>

<p>There&rsquo;s also the cli_example.rb script included in the SDK, which provides a simple shell interface similar to FTP but does not have any syncing logic included.</p>

<h2 id="linux-daemon">linux daemon</h2>

<p>Dropbox does have a download for a daemon, but it&rsquo;s x86/_64 only; see the <a href="https://www.dropbox.com/install?os=lnx">Linux Download</a> page for more info.</p>

<blockquote>
  <p>The Dropbox daemon works fine on all 32-bit and 64-bit Linux servers. To install, run the following command in your Linux terminal.</p>
</blockquote>

<h2 id="build-from-source">build from source</h2>

<p>The Dropbox source appears to be just a plugin for the nautilus file browser (and doesn&rsquo;t include the above daemon?).  This is only useful when using the desktop.</p>

<p>Download the <a href="https://www.dropbox.com/download?dl=packages/nautilus-dropbox-1.4.0.tar.bz2">source archive</a> and build as usual.  More details can be found in <a href="https://www.dropbox.com/help/247">this help topic</a>.</p>

<h2 id="use-something-else">use something else</h2>

<p>I also use github, sftp, scp, and rsync for file transfer, version history and keeping various things in sync; there are many ways to achieve automatic folder syncing.  However, Dropbox fulfills a role that can&rsquo;t easily be duplicated if you use many Dropbox enabled mobile apps, and do not wish the Pi to rely upon a second computer to sync through.</p>
<div class="footnotes">
  <ol>
    <li id="fn:dl">
      <p>the script is also included in the installed gem:  <code>cp /var/lib/gems/1.9.1/gems/dbox-0.7.2/sample_polling_script.rb dboxsync.rb</code><a href="#fnref:dl" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:mem">
      <p>memory usage starts at ~8MB after startup, and evens out to ~12MB after many polling loops; polling takes a second or two, during which CPU usage is around 5%, peaking at ~12%.  Contrast with the CLI version which uses a similar amount of memory, but takes several seconds to complete each sync, and includes the overhead of almost total CPU usage for half that time.<a href="#fnref:mem" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Home Theatre Pi (HTPi)]]></title>
    <link href="http://jmeosbn.github.com/blog/baking-the-pi/"/>
    <updated>2012-12-17T19:13:00+00:00</updated>
    <id>http://jmeosbn.github.com/blog/baking-the-pi</id>
    <content type="html"><![CDATA[<p>A collection of notes for setting up a clean image of <a href="http://www.xbian.org">XBian</a> (1.0 Alpha 4) on the Raspberry Pi.</p>

<!-- more -->

<p>Jump to <a href="#first-login-tasks">first login tasks</a> if you have already set up terminal access to the Pi.</p>

<h2 id="basic-pi-tips">Basic Pi Tips</h2>

<ul>
  <li>Guide for navigating XBMC with the <a href="http://wiki.xbmc.org/index.php?title=Keyboard">keyboard</a></li>
  <li>Login using hostname with zeroconfig: <code>ssh user@host.local</code></li>
</ul>

<h2 id="pre-setup-on-pc-laptop-etc">Pre-setup, on PC, laptop, etc.</h2>

<p>Before setting up the Pi remotely, there are some things to do locally to ease logging in when using SSH.  This will obviate the need to enter a password, or specify the full host name each time we access the Pi.</p>

<h3 id="copy-public-key-to-pi">Copy public key to Pi</h3>

<p>If generating a new key pair, accept the default key location as suggested by <code>ssh-keygen</code> below.  While a passphrase is optional, anyone can use a copy of the unencrypted private key to authenticate with your identity.  Many operating systems are preconfigured to use <code>ssh-agent</code> or a similar utility, to avoid having to enter a passphrase multiple times (if at all).</p>

<p>```sh
	# generate a key pair if none already exists
	test -f ~/.ssh/id_rsa.pub || ssh-keygen</p>

<pre><code># remove any old, conflicting host entries
ssh-keygen -R xbian.local

# password is required until the key is installed
ssh-copy-id xbian@xbian.local ```
</code></pre>

<p>The easiest way to append a key to the remote user&rsquo;s <code>~/.ssh/authorized_keys</code> file is to use <code>ssh-copy-id</code> as shown above.  Download <a href="http://hg.mindrot.org/openssh/raw-file/tip/contrib/ssh-copy-id">ssh-copy-id</a> from source if your system doesn&rsquo;t already have it (<a href="http://www.commandlinefu.com/commands/view/10228/...if-you-have-sudo-access-you-could-just-install-ssh-copy-id-mac-users-take-note.-this-is-how-you-install-ssh-copy-id-">installation instructions</a>), this <a href="http://www.commandlinefu.com/commands/view/188/copy-your-ssh-public-key-to-a-server-from-a-machine-that-doesnt-have-ssh-copy-id">alternative method</a> should also work in most situations.</p>

<h3 id="add-an-alias-to-sshconfig">Add an alias to .ssh/config</h3>

<p>Locally define the alias <code>xb</code>, to be used in place of <code>xbian@xbian.local</code> with commands such as <code>ssh xb</code> and <code>sftp xb</code>.  Enter the text below as a single command, or manually paste the quoted text into <code>~/.ssh/config</code> using <code>nano</code> or similar.</p>

<p><code>sh
	echo '
	Host xb
	  User  xbian
	  Hostname  xbian.local' &gt;&gt; ~/.ssh/config
</code></p>

<h2 id="transfer-files">Transfer files</h2>

<p>If you have previous files from your Pi stored locally, you can transfer them using <code>sftp</code>, <code>scp</code>, etc.  For easily transferring many arbitrary files , a GUI sftp client is recommended.</p>

<p>```sh
	# connect to the pi, using the <code>xb</code> alias defined above
	sftp xb
	sftp&gt; put .bash_aliases
	sftp&gt; exit</p>

<pre><code># you can also use ctlr+d to logout ```
</code></pre>

<h2 id="first-login-tasks">First login tasks</h2>

<p>Most of the commands below need root privileges on the Pi, as they alter the system configuration.  To run a single command with root privileges, prepend the <code>sudo</code> command to it.  To run many commands this way without typing <code>sudo</code> each time, first start a root shell with <code>sudo -s</code>; <em>remember to logout with &lsquo;exit&rsquo; or ctrl+d when finished</em>.</p>

<p>```sh
	# Login to the pi, using the <code>xb</code> alias
	ssh xb</p>

<pre><code># xbian-config may run here, set it up as you like then exit

# Disable the login message
touch ~/.hushlogin

# Disable setting of the terminal title
sed -i '/PS1=.*\][0-2];/s/^/##/' ~/.bashrc

# Use a root shell for the following commands
sudo -s

# Allow full use of sudo without needing password
# note: XBian 1.0b4 made this much less essential
echo '%sudo  ALL=(ALL) NOPASSWD: ALL' &gt;&gt; /etc/sudoers

# Disable autorun of configuration menu,
# run manually with: 'sudo xbian-config'
sed -i '1 i return' /etc/profile.d/xbian-config.sh

# Prevent hideoutput from overwriting the prompt
sed -i '/40;0m/s/^/##/' /etc/profile.d/hideoutput.sh

# Update packages
apt-get update &amp;&amp; apt-get upgrade

# Install some utilities
apt-get install p7zip zip ```
</code></pre>

<h2 id="ttl-serial-console">TTL serial console</h2>

<p>Using a TTL to USB serial connection to the Pi, I&rsquo;m unable to use full screen terminal programs due to screen corruption.  Changing the terminal type enables use of programs such as <code>nano</code> and <code>xbian-config</code>.</p>

<p><code>sh
	sed -i '/ttyAMA0/s/vt100$/xterm/' /etc/inittab
</code></p>

<h2 id="fake-a-hardware-clock">Fake a hardware clock</h2>

<p>The Pi doesn&rsquo;t have a real time clock, so it usually defaults to some point in the past until the time can be set correctly using the Internet.  To make the clock more consistent across power cycles, it can be initialised using the last recorded date and time.  <em>(note: previous distros required the <a href="#fake-a-hardware-clock-unabridged">unabridged instructions</a>.)</em></p>

<p><code>sh
	apt-get install fake-hwclock
</code></p>

<h2 id="configure-wifi-adapter">Configure WiFi adapter</h2>

<p>XBian includes simple menu driven WiFi configuration as part of xbian-config.  See the <a href="#manually-configure-wifi-adapter">manual instructions</a> for connecting to multiple networks.</p>

<h2 id="link-settings-to-root-profile">Link settings to root profile</h2>

<p>Occasionally you&rsquo;ll want to use a root shell, and then be annoyed that your aliases etc. are not configured for the root user.  You can either copy the profile files into ~/root or, as shown here, link them symbolically so that any future modifications will be reflected.</p>

<p>```sh
	# change to the home folder you want to link from
	cd ~xbian</p>

<pre><code># define a list of dot files to link
dotfiles=".profile .bashrc .bash_aliases .bash_logout .nanorc .toprc"

# link each existing file into the root user's home folder
for i in $dotfiles; do [ -f $i ] &amp;&amp; sudo ln -sfv ~+/$i ~root/; done

# hush login message
sudo touch ~root/.hushlogin ```
</code></pre>

<h2 id="generate-new-rsa-host-keys">Generate new RSA host keys</h2>

<p>These keys confirm the identity of the Pi, to prevent a malicious host from intercepting the remote login process.  Not so important for your HTPi, but good standard security practice.  Also recommended if you have more than one Pi.</p>

<p>```sh
	rm /etc/ssh/ssh_host_*
	/usr/sbin/dpkg-reconfigure openssh-server</p>

<pre><code># remove old host key from clients using:
# ssh-keygen -R xbian.local ``` &lt;!--
ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key
ssh-keygen -t rsa1 -f /etc/ssh/ssh_host_key --&gt;
</code></pre>

<h2 id="build-and-install-wiringpi">Build and install WiringPi</h2>

<p><a href="https://projects.drogon.net/raspberry-pi/wiringpi">WiringPi</a> is a library to access the Pi&rsquo;s GPIO, SPI, and I2C headers, modelled on the Arduino Wiring system.  It also includes the <code>gpio</code> utility for use of the libraries from the command prompt.</p>

<p>```sh
	apt-get install gcc make git-core libi2c-dev
	git clone git://git.drogon.net/wiringPi
	cd wiringPi; ./build</p>

<pre><code># test with gpio utility
gpio readall ```
</code></pre>

<h2 id="install-dbox-dropbox-tool">Install dbox (dropbox tool)</h2>

<p>dbox is a ruby client for Dropbox that can sync with the Dropbox folder hierarchy, or manage individual files.  To use dbox, developer keys and authorisation tokens must first be installed for the dropbox SDK.  See the <a href="https://github.com/kenpratt/dbox">project on github</a> and <a href="/blog/pi-box/">my post on dbox</a> for full details on setting up automatic dropbox sync.</p>

<p><code>sh
	apt-get install gcc make ruby ruby-dev libsqlite3-dev
	gem install dbox
</code></p>

<h2 id="install-mono">Install Mono</h2>

<p>Basic mono setup to run and compile command line tools.</p>

<p><code>sh
	apt-get install mono-devel mono-gmcs mono-csharp-shell
</code></p>

<h2 id="installing-iplayer-and-4od-itv-5">Installing iPlayer (and 4od, ITV, 5)</h2>

<p>Use <code>wget</code> to download the latest versions from the links below, then open the zip files directly from xbmc&rsquo;s addons page.</p>

<p><a href="http://code.google.com/p/xbmc-iplayerv2/downloads/list">http://code.google.com/p/xbmc-iplayerv2/downloads/list</a>
<a href="http://code.google.com/p/mossy-xbmc-repo/downloads/list">http://code.google.com/p/mossy-xbmc-repo/downloads/list</a>
<a href="http://code.google.com/p/xbmc-itv-player/downloads/list">http://code.google.com/p/xbmc-itv-player/downloads/list</a></p>

<p><br /></p>

<h1 id="useful-extras-not-always-used">Useful extras, not always used</h1>

<p>Stuff used infrequently, or currently being tested</p>

<h2 id="packages-from-raspbian">Packages from Raspbian</h2>

<p>Some standard packages that are usually excluded from the xbian distro, as they are not required for use of xbmc only.</p>

<p>```sh
	apt-get install omxplayer</p>

<pre><code># included on xbian &gt;= 1.0b
apt-get install psmisc usbutils ```
</code></pre>

<h2 id="other-useful-packages">Other useful packages</h2>

<p><code>sh
	apt-get install fs2resize exfat-fuse
	apt-get install clang geany
	apt-get install sysv-rc-conf
</code></p>

<h2 id="testing-pvr">Testing PVR</h2>

<p><code>sh
	apt-get install vdr-plugin-dvbsddevice
</code></p>

<h2 id="setting-up-webcam">Setting up webcam</h2>

<p>Use &lsquo;motion&rsquo; or &lsquo;fswebcam&rsquo;, motion may need a default cfg copying</p>

<p><code>sh
	apt-get install motion
	cp /etc/default/motion /etc/motion/motion.conf
</code></p>

<h2 id="configure-bluetooth-adapter">Configure bluetooth adapter</h2>

<p><a href="http://www.ctheroux.com/2012/08/a-step-by-step-guide-to-setup-a-bluetooth-keyboard-and-mouse-on-the-raspberry-pi/">Adapted from ctheroux</a>.</p>

<p>```sh
	# install bluetooth support and dependencies
	agi bluez python-gobject  # minimal?
	agi bluetooth bluez-utils  # full</p>

<pre><code># for management from the desktop
agi blueman

# check adapter is working*
hcitool dev

# scan for devices
hcitool scan

# pair with device, using address listed from scan
bluez-simple-agent hci0 3C:DA:F8:42:0C:AB

# trust the device
bluez-test-device trusted 3C:DA:F8:42:0C:AB yes

# connect to input device
bluez-test-input hci0 3C:DA:F8:42:0C:AB

# adapter status
hciconfig ```
</code></pre>

<p><em>*Note: a bluetooth adapter may be listed in <code>lsusb</code> and <code>hciconfig</code>, without being recognised by <code>hcitool</code>. This is the case with the belkin dongle I have, so use <code>hcitool</code> to check that a device is working properly.</em></p>

<p><br /></p>

<h1 id="troubleshooting--backup">Troubleshooting / backup</h1>

<p>Some useful commands and procedures</p>

<h2 id="backup-settings">Backup settings</h2>

<ul>
  <li>Settings, addons etc. are in ~/.xbmc</li>
  <li>.xbmc/userdata - preferences etc</li>
  <li>.xbmc/addons - binaries, themes</li>
  <li>.xbmc/addons/packages - original downloads, can use with &ldquo;install from zip&rdquo;</li>
</ul>

<p>```sh
	# backup profile settings
	zip -ry xbmc .xbmc/
	zip -ry dotfiles .bash_aliases .nanorc .toprc .ssh</p>

<pre><code># backup system config files
sudo zip -ry basecfg /etc/wpa_supplicant/wpa_supplicant.conf ```
</code></pre>

<h2 id="clear-cached-network-adapter">Clear cached network adapter</h2>

<p>(needed for switching cards between devices)</p>

<p><code>sh
    echo | sudo tee /etc/udev/rules.d/70-persistent-net.rules
</code></p>

<h2 id="quick-tips">Quick Tips</h2>

<ul>
  <li>You can detect hdmi audio modes: <code>/opt/vc/bin/tvservice -a</code></li>
  <li>Setup CEC remote over hdmi from console: <code>cec-config</code></li>
</ul>

<p><br /></p>

<h1 id="not-usedneeded-with-recent-versions">Not used/needed with recent versions</h1>

<p>Previously useful functionality or workarounds</p>

<h2 id="manually-configure-wifi-adapter">Manually configure WiFi adapter</h2>

<p><a href="http://www.savagehomeautomation.com/raspi-airlink101">Instructions adapted from here</a>.</p>

<p>Use <code>lsusb</code> to check that the adapter is recognised, and <code>lsmod</code> to check the kernel module (e.g. <code>8192cu</code>) is loaded.</p>

<p><code>sh
	sudo nano /etc/network/interfaces
</code></p>

<p>Make sure the following lines exist, adding them as needed:</p>

<p><code>
    allow-hotplug wlan0
    iface wlan0 inet manual
    wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf
</code></p>

<p>You may have the line <code>wireless-power off</code> in this file, which relates to power <strong><em>management</em></strong> only.  I&rsquo;ve commented it out as it resulted in errors logged during <code>ifup</code> and power management remained off without it.</p>

<p><code>sh
	sudo nano /etc/wpa_supplicant/wpa_supplicant.conf
</code></p>

<p>Add your network details using the following template:</p>

<p><code>
    network={
    ssid="YOUR-NETWORK-SSID"
    proto=WPA2
    key_mgmt=WPA-PSK
    pairwise=CCMP TKIP
    group=CCMP TKIP
    psk="YOUR-WLAN-PASSWORD"
    }
</code></p>

<p>Reinitialise the adapter, and check it&rsquo;s connected.</p>

<p><code>sh
	sudo ifdown wlan0
	sudo ifup wlan0
	# you may get some errors here, even when successful
</code></p>

<p>Use <code>iwconfig</code> to view wifi adapter info and <code>ifconfig</code> for general network info.</p>

<h2 id="fake-a-hardware-clock-unabridged">Fake a hardware clock (unabridged)</h2>

<p>More complicated instructions, as used on previous versions of XBian.</p>

<p><code>sh
	touch /etc/init.d/hwclock.sh
	/etc/init.d/ntp restart
	apt-get install ntpdate fake-hwclock
	ntpdate-debian
	dpkg-reconfigure tzdata
	sed -i 's/^exit 0/ntpdate-debian\nexit 0/g' /etc/rc.local
</code></p>

<h2 id="fix-ssh-access-using-public-key">Fix ssh access using public key</h2>

<p>```sh
	# must be owned by root
	chown root: ~ ~/.ssh
	# no write for others
	chmod a=rx,u+w  ~</p>

<pre><code># no access for others
chmod -R go-rwx ~/.ssh
# public key can be readable
chmod a+r ~/.ssh/id_rsa.pub ```
</code></pre>

<h2 id="download-openssh-sftp-server">Download OpenSSH sftp server</h2>

<p><code>sh
	apt-get -d install openssh-server
	cp /var/cache/apt/archives/openssh-server_*.deb .
	dpkg-deb -X openssh-server_*.deb sftp
	cp sftp/usr/lib/openssh/sftp-server /usr/lib/
	rm -r sftp openssh-server_*.deb
</code></p>

<h2 id="change-hostname">Change Hostname</h2>

<p><code>sh
    sudo nano /etc/hostname # enter the desired name
    sudo nano /etc/hosts # replace the hostname
    sudo /etc/init.d/hostname.sh start # to enable the changes
</code></p>

<h2 id="update-firmware-without-kernel">Update firmware without kernel</h2>

<p><code>sh
    wget http://goo.gl/1BOfJ -O /usr/bin/rpi-update &amp;&amp; chmod +x /usr/bin/rpi-update
    SKIP_KERNEL=1 rpi-update 128
</code></p>

<h2 id="install-shairport">Install Shairport</h2>

<p>Instructions found <a href="http://tomsolari.id.au/post/27169019561/airplay-music-streaming-on-raspberry-pi">here</a> (alt site <a href="http://cheeftun.appspot.com/trouch.com/2012/08/03/airpi-airplay-audio-with-raspberry/">here</a>)</p>

<p>A change in IOS 6 <a href="http://jordanburgess.com/post/38986434391/raspberry-pi-airplay">requires Perl Net-SDP</a> module to installed.</p>

<p><code>sh
	git clone https://github.com/njh/perl-net-sdp.git perl-net-sdp
	cd perl-net-sdp
	perl Build.PL
	sudo ./Build
	sudo ./Build test
	sudo ./Build install
	cd ..
</code></p>

<p><code>sh
	# do as root
	sudo -s
	apt-get install alsa-utils
	modprobe snd_bcm2835
	# optionally set to headphone output
	# amixer cset numid=3 1
	# optionally restore to hdmi output
	# amixer cset numid=3 2
	apt-get install build-essential libssl-dev libcrypt-openssl-rsa-perl libao-dev libio-socket-inet6-perl libwww-perl avahi-utils pkg-config
	wget https://github.com/albertz/shairport/zipball/master
	unzip master
	cd albertz-shairport-*
	make install
	cp shairport.init.sample /etc/init.d/shairport
	# add to start of shairport: modprobe snd_bcm2835
	nano /etc/init.d/shairport
	# optionally edit name of service (remove port number):
	nano /usr/local/bin/shairport.pl
	insserv shairport
	# manually start [services](http://pi-raspberry.blogspot.co.uk/2012/08/shairport-raspberry-pi.html)
	service avahi-daemon start
	/etc/init.d/shairport start
	# exit root
	exit
</code></p>

]]></content>
  </entry>
  
</feed>
