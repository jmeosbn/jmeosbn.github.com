<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools | git-log(1)]]></title>
  <link href="http://jmeosbn.github.com/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://jmeosbn.github.com/"/>
  <updated>2013-01-21T23:38:41+00:00</updated>
  <id>http://jmeosbn.github.com/</id>
  <author>
    <name><![CDATA[Jamie Osborne]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dropbox on Pi]]></title>
    <link href="http://jmeosbn.github.com/blog/pi-box/"/>
    <updated>2012-12-19T00:54:00+00:00</updated>
    <id>http://jmeosbn.github.com/blog/pi-box</id>
    <content type="html"><![CDATA[<p>There&rsquo;s currently no build of the Dropbox sync client that runs on ARM devices; while there is source available, it&rsquo;s not suitable for automatic, unattended sync on a Raspberry Pi that may not have any windowing system installed.</p>

<p>Dropbox does make various SDKs available though, which enables a ruby or python script to be used instead of the official client.</p>

<h1 id="a-ready-made-solution">a ready made solution..</h1>

<p><a href="https://github.com/kenpratt/dbox">dbox</a> is a great ruby client for Dropbox that can locally create, clone, push, pull, sync, and move, a Dropbox folder hierarchy.  It can be used as an API directly from another ruby script, or with the included command line tool.</p>

<blockquote>
  <p><a href="https://github.com/kenpratt/dbox">dbox</a><br />
Dropbox integration made easy. This robust client gives you control over what, where, and when you sync with Dropbox.</p>
</blockquote>

<p>dbox syncs one file at a time, so it won&rsquo;t be as quick as the official client when syncing large amounts of files.  For most uses this will only be an issue when initially cloning a large folder.</p>

<h2 id="installation">installation</h2>

<p>Before installing dbox, make sure you have any needed packages.</p>

<p><code>sh
	sudo apt-get install ruby ruby-dev libsqlite3-dev
	sudo gem install dbox
</code></p>

<p>Then follow the rest of the instructions from the <a href="https://github.com/kenpratt/dbox">dbox</a> page, to configure your keys and clone your Dropbox folder.</p>

<p>To run dbox periodically, download<sup id="fnref:dl"><a href="#fn:dl" rel="footnote">1</a></sup> the <a href="https://github.com/kenpratt/dbox/blob/master/sample_polling_script.rb">example script</a> and make it executable, then replace the example keys and path settings with your own.</p>

<!--	cp /var/lib/gems/1.9.1/gems/dbox-0.7.2/sample_polling_script.rb dboxsync.rb -->

<p><code>sh
	wget https://raw.github.com/kenpratt/dbox/master/sample_polling_script.rb
	mv ./sample_polling_script.rb dboxsync.rb
	chmod +x dboxsync.rb
	nano dboxsync.rb
	./dboxsync.rb
</code></p>

<p>All output is written to a log file, so it&rsquo;s normal not to see any output while running.  If you want to see some basic info while testing, change the script so <code>LOGFILE = STDOUT</code>.  To show the full syncing progress and other debug info, set the level of the <a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/logger/rdoc/Logger.html">logger class</a> by changing the script so it reads <code>LOGGER.level = Logger::DEBUG</code>.</p>

<p>To have the script run on startup, add the following entry to <code>/etc/rc.local</code>.</p>

<p>```sh
	sudo nano /etc/rc.local</p>

<pre><code># add the following
if ! pgrep -f dboxsync; then
  sudo -u xbian nice -n 10 /home/xbian/dboxsync.rb &amp;
fi ```
</code></pre>

<p>There&rsquo;s more proper ways of doing this, but this seemed the simplest.</p>

<!-- more -->

<h2 id="todo">todo</h2>

<ul>
  <li>increase polling delay, but add detection of local changes to initiate push/pull</li>
</ul>

<h2 id="notes">notes</h2>

<p>While cron or similar could be used to run dbox periodically, each separate invocation of dbox from the command line incurs a startup delay of a few seconds, during which time the Pi&rsquo;s CPU is maxed out loading ruby and the code needed to run dbox.  This isn&rsquo;t ideal and would likely cause issues if the Pi is used as a media player.</p>

<p>The sample_polling_script accesses dbox directly though it&rsquo;s ruby API, and doesn&rsquo;t exit during each polling interval.  Therefore, code remains cached in memory<sup id="fnref:mem"><a href="#fn:mem" rel="footnote">2</a></sup> and the delay occurs only once upon startup; this is a great advantage over running the command line version periodically.</p>

<h1 id="alternatives">alternatives</h1>

<p>Here&rsquo;s some more options I considered, in order of decreasing usefulness.</p>

<h2 id="one-way-sync">one way sync</h2>

<p>Create a simple ruby script to sync files one way - <em>from Dropbox</em> - using the Dropbox SDK.  It&rsquo;s also possible to sync both ways in ruby, but <a href="https://github.com/kenpratt/dbox">dbox</a> has already done a great job implementing that.</p>

<p>Ruby SDK <a href="https://www.dropbox.com/developers/start/setup#ruby">Tutorial</a>, <a href="https://www.dropbox.com/static/developers/dropbox-ruby-sdk-1.5.1-docs/index.html">Documentation</a>.</p>

<p>eg. See the <a href="https://www.dropbox.com/static/developers/dropbox-ruby-sdk-1.5.1-docs/DropboxClient.html#method-i-delta">delta method</a> to keep local files in sync without writing too much code.</p>

<p>There&rsquo;s also the cli_example.rb script included in the SDK, which provides a simple shell interface similar to FTP but does not have any syncing logic included.</p>

<h2 id="linux-daemon">linux daemon</h2>

<p>Dropbox does have a download for a daemon, but it&rsquo;s x86/_64 only; see the <a href="https://www.dropbox.com/install?os=lnx">Linux Download</a> page for more info.</p>

<blockquote>
  <p>The Dropbox daemon works fine on all 32-bit and 64-bit Linux servers. To install, run the following command in your Linux terminal.</p>
</blockquote>

<h2 id="build-from-source">build from source</h2>

<p>The Dropbox source appears to be just a plugin for the nautilus file browser (and doesn&rsquo;t include the above daemon?).  This is only useful when using the desktop.</p>

<p>Download the <a href="https://www.dropbox.com/download?dl=packages/nautilus-dropbox-1.4.0.tar.bz2">source archive</a> and build as usual.  More details can be found in <a href="https://www.dropbox.com/help/247">this help topic</a>.</p>

<h2 id="use-something-else">use something else</h2>

<p>I also use github, sftp, scp, and rsync for file transfer, version history and keeping various things in sync; there are many ways to achieve automatic folder syncing.  However, Dropbox fulfills a role that can&rsquo;t easily be duplicated if you use many Dropbox enabled mobile apps, and do not wish the Pi to rely upon a second computer to sync through.</p>
<div class="footnotes">
  <ol>
    <li id="fn:dl">
      <p>the script is also included in the installed gem:  <code>cp /var/lib/gems/1.9.1/gems/dbox-0.7.2/sample_polling_script.rb dboxsync.rb</code><a href="#fnref:dl" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:mem">
      <p>memory usage starts at ~8MB after startup, and evens out to ~12MB after many polling loops; polling takes a second or two, during which CPU usage is around 5%, peaking at ~12%.  Contrast with the CLI version which uses a similar amount of memory, but takes several seconds to complete each sync, and includes the overhead of almost total CPU usage for half that time.<a href="#fnref:mem" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resources for Using Git]]></title>
    <link href="http://jmeosbn.github.com/blog/resources-for-using-git/"/>
    <updated>2012-09-29T20:35:00+01:00</updated>
    <id>http://jmeosbn.github.com/blog/resources-for-using-git</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s some basic resources for getting started pushing code to github.</p>

<p>&ldquo;Code&rdquo; doesn&rsquo;t just mean computer source code; git is useful for tracking changes to anything that can be represented as plain text, e.g. <a href="http://www.wired.com/wiredenterprise/2012/08/bundestag/">German Law</a>.</p>

<p>The simplest use of git is to create the repo locally, stored in the same folder as the source (known as the working tree) and named <code>.git</code>.</p>

<p><code>sh Initialise a new git repo http://git-scm.com/docs/git-init git-init
$ cd my-project
$ git init
Initialized empty Git repository in my-project/.git/
</code></p>

<p>Add any new or changed files you want to track, then commit those changes to the repo.</p>

<p><code>sh Add and commit changes http://git-scm.com/docs/git-add git-add
$ echo About My-Project &gt; README.md
$ git add . # add all files recursively
$ git commit -m 'First Commit'
[master (root-commit) cdab15f] First Commit
 1 file changed, 1 insertion(+)
 create mode 100644 README.md
</code></p>

<p>View recent commits using <code>git log</code>.</p>

<p>``` sh View recent commits http://git-scm.com/docs/git-log git-log
$ git log
commit cdab15f2036b0b8b1c8fbfceab6357c8e56a0d5f
Author: Jamie Osborne <a href="&#109;&#097;&#105;&#108;&#116;&#111;:&#106;&#109;&#101;&#111;&#115;&#098;&#110;&#064;&#121;&#111;&#117;&#114;&#045;&#101;&#109;&#097;&#105;&#108;&#046;&#099;&#111;&#109;">&#106;&#109;&#101;&#111;&#115;&#098;&#110;&#064;&#121;&#111;&#117;&#114;&#045;&#101;&#109;&#097;&#105;&#108;&#046;&#099;&#111;&#109;</a>
Date:   Sat Sep 29 23:30:20 2012 +0100</p>

<pre><code>First Commit ```
</code></pre>

<h2 id="documentation">documentation</h2>

<p>Git itself can be installed from <a href="http://git-scm.com/downloads">git-scm.com</a> if your OS doesn&rsquo;t already include it. The same site also hosts a copy of the <a href="http://git-scm.com/docs">documentation</a>, as well as the <a href="http://git-scm.com/book">Pro Git book</a> which is a great place to start learning git.  Pro Git is also available as a commercially <a href="http://www.amazon.com/gp/product/1430218339?ie=UTF8&amp;tag=prgi-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1430218339">printed book</a> from Apress, and as a free <a href="https://github.s3.amazonaws.com/media/progit.epub">ePub</a>, <a href="https://github.s3.amazonaws.com/media/pro-git.en.mobi">mobi</a>, or <a href="https://github.s3.amazonaws.com/media/progit.en.pdf">PDF</a> download.</p>

<p>If you don&rsquo;t fancy reading an entire book, then this <a href="http://www.vogella.com/articles/Git/article.html">Git Tutorial</a> gets straight to the point for those already familiar with the concepts of version control.  There&rsquo;s minimal explanatory text, but full command examples for most operations; making it a useful resource for commands you use rarely and need to quickly relearn.</p>

<h2 id="graphical-interfaces">graphical interfaces</h2>

<p>While it&rsquo;s good to know how to use git from the command line, it&rsquo;s worth getting a GUI for easier building of commits etc. (you could also integrate it with your favourite editor and diff viewer)</p>

<p><a href="http://github.com/">Github</a> offers their own <a href="http://mac.github.com/">Mac</a> and <a href="http://windows.github.com/">Windows</a> GUI clients, which have the advantage of closer integration with some of github&rsquo;s features, such as organisations and the &ldquo;Clone in Windows/Mac&rdquo; button found on each repo on github.</p>

<p><img class="center" src="http://mac.github.com/images/promo-screenshot.png" title="GitHub for Mac" ></p>

<p>They do lack some more advanced features though so I mostly prefer <a href="http://gitx.laullon.com/">GitX</a> on the Mac, though <a href="http://git-scm.com/downloads/guis">plenty more GUIs</a> exist on various platforms.</p>

<p><img class="center" src="http://gitx.laullon.com/commit.png" width="512" title="GitX" ></p>

<h2 id="other-info">other info</h2>

<p>Btw, if you just want to share some code snippets somewhere while maintaining versioning etc., then check out <a href="https://gist.github.com/">gists</a>, a feature of github.</p>
]]></content>
  </entry>
  
</feed>
